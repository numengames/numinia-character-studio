var A,Q={serverUrl:"http://localhost:20741",clientId:"any",accessToken:"test1234"},U={language:"en-US",task:"",model:"",continuous:!0,optimizeFinalResult:!0,messageFormat:"default",engineOptions:{}},t="",F={},e={};function n(n){console.log("INFO - Loading server settings..."),Q.serverUrl=n.serverUrl,Q.clientId=n.clientId,Q.accessToken=n.accessToken;var B=new AbortController;setTimeout((function(){B.abort()}),8e3),fetch(Q.serverUrl+"/settings",{method:"GET",signal:B.signal}).then((function(A){if(A.ok)return A.json();throw{name:"FetchError",message:A.statusText,code:A.status}})).then((function(Q){console.log("Server Info",Q),Q&&Q.settings&&function(Q){if(console.log("INFO - Server version: "+Q.version),console.log("INFO - Active engine: "+Q.engine),t=Q.engine,console.log("INFO - Available ASR languages: "+JSON.stringify(Q.languages,null,2)),U.language=Q.languages[0],Q.languages,console.log("INFO - Available ASR models: "+JSON.stringify(Q.models,null,2)),U.model=Q.models[0],console.log("INFO - ASR model properties: "+JSON.stringify(Q.modelProperties,null,2)),Q.models.forEach((function(A,U){e[A]=Q.modelProperties[U],e[A].language=Q.languages[U],e[A].engine||(e[A].engine=t)})),console.log("INFO - Available ASR features: "+JSON.stringify(Q.features,null,2)),Array.isArray(Q.features)?F[t]=Q.features:F=Q.features,!A){A={};let t,F=navigator.language;if(F&&Q.languages&&Q.models){let A=Q.languages.indexOf(F);if(A>=0)t=A;else{let A=F.substring(0,2);for(let U=0;U<Q.languages.length;U++)if(0==Q.languages[U].indexOf(A)){t=U;break}}}null!=t&&(U.language=Q.languages[t],U.model=Q.models[t]),console.log("INFO - Default language/model: "+U.language+"/"+U.model+" - NOTE: If you set 'language' via settings make sure to remove 'model'!")}}(Q.settings)})).catch((function(A){console.error("Server Info Fetch ERROR",A)}))}class B{#A=[];length=0;constructor(A){return this.#A=A,new Proxy(this,{get:(A,Q)=>"length"===Q?this.#A.length:"number"==typeof+Q?this.#A[Q]:void 0})}}class l{resultIndex=0;results;constructor(A){this.results=new B(A)}_dispatch(A,Q){const U=Object.create(l);U.resultIndex=this.resultIndex,U.results=this.results,U.type=Q,A._dispatchEvent(U)}}class a{transcript="";confidence=1}class o{#Q=[];isFinal=!1;length=0;constructor(A){return this.#Q=A,new Proxy(this,{get:(A,Q)=>"isFinal"===Q?this.isFinal:"length"===Q?this.#Q.length:"number"==typeof+Q?this.#Q[Q]:void 0})}}const R=Object.freeze({NOSPEECH:"no-speech",ABORTED:"aborted",AUDIOCAPTURE:"audio-capture",NETWORK:"network",NOTALLOWED:"not-allowed",SERVICENOTALLOWED:"service-not-allowed",BADGRAMMAR:"bad-grammar",LANGUAGENOTSUPPORTED:"language-not-supported"});class d{error="";message="";_dispatch(A){const Q=Object.create(d);Q.error=this.error,Q.message=this.message,Q.type="error",A._dispatchEvent(Q)}}function i(A,Q,U){var t=void 0===Q?null:Q,F=function(A,Q){var U=atob(A);if(Q){for(var t=new Uint8Array(U.length),F=0,e=U.length;F<e;++F)t[F]=U.charCodeAt(F);return String.fromCharCode.apply(null,new Uint16Array(t.buffer))}return U}(A,void 0!==U&&U),e=F.indexOf("\n",10)+1,n=F.substring(e)+(t?"//# sourceMappingURL="+t:""),B=new Blob([n],{type:"application/javascript"});return URL.createObjectURL(B)}function C(A,Q,U){var t;return function(F){return t=t||i(A,Q,U),new Worker(t,F)}}var V=C("Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwohZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Y2xhc3MgQXtjb25zdHJ1Y3RvcihBLEIsZyl7dGhpcy5fcmVhZEluZGV4PTAsdGhpcy5fd3JpdGVJbmRleD0wLHRoaXMuX2ZyYW1lc0F2YWlsYWJsZT0wLHRoaXMuX2NoYW5uZWxDb3VudD1CLHRoaXMuX2xlbmd0aD1BLHRoaXMuX2NoYW5uZWxEYXRhPVtdO2ZvcihsZXQgQj0wO0I8dGhpcy5fY2hhbm5lbENvdW50OysrQil0aGlzLl9jaGFubmVsRGF0YVtCXT0iVWludDE2Ij09Zz9uZXcgVWludDE2QXJyYXkoQSk6IkludDE2Ij09Zz9uZXcgSW50MTZBcnJheShBKToiVWludDgiPT1nP25ldyBVaW50OEFycmF5KEEpOiJJbnQ4Ij09Zz9uZXcgSW50OEFycmF5KEEpOm5ldyBGbG9hdDMyQXJyYXkoQSl9Z2V0IGZyYW1lc0F2YWlsYWJsZSgpe3JldHVybiB0aGlzLl9mcmFtZXNBdmFpbGFibGV9cHVzaChBLEIpe2xldCBnPUFbMF0ubGVuZ3RoLEk9Qnx8ZnVuY3Rpb24oQSxCLGcpe3JldHVybiBBW0JdW2ddfTtmb3IobGV0IEI9MDtCPGc7KytCKXtsZXQgZz0odGhpcy5fd3JpdGVJbmRleCtCKSV0aGlzLl9sZW5ndGg7Zm9yKGxldCBRPTA7UTx0aGlzLl9jaGFubmVsQ291bnQ7KytRKXRoaXMuX2NoYW5uZWxEYXRhW1FdW2ddPUkoQSxRLEIpfXRoaXMuX3dyaXRlSW5kZXgrPWcsdGhpcy5fd3JpdGVJbmRleD49dGhpcy5fbGVuZ3RoJiYodGhpcy5fd3JpdGVJbmRleD10aGlzLl93cml0ZUluZGV4LXRoaXMuX2xlbmd0aCksdGhpcy5fZnJhbWVzQXZhaWxhYmxlKz1nLHRoaXMuX2ZyYW1lc0F2YWlsYWJsZT50aGlzLl9sZW5ndGgmJih0aGlzLl9mcmFtZXNBdmFpbGFibGU9dGhpcy5fbGVuZ3RoKX1wdWxsKEEsQil7aWYoMD09PXRoaXMuX2ZyYW1lc0F2YWlsYWJsZSlyZXR1cm47bGV0IGc9QVswXS5sZW5ndGgsST1CfHxmdW5jdGlvbihBLEIsZyl7cmV0dXJuIEFbQl1bZ119O2ZvcihsZXQgQj0wO0I8ZzsrK0Ipe2xldCBnPSh0aGlzLl9yZWFkSW5kZXgrQikldGhpcy5fbGVuZ3RoO2ZvcihsZXQgUT0wO1E8dGhpcy5fY2hhbm5lbENvdW50OysrUSlBW1FdW0JdPUkodGhpcy5fY2hhbm5lbERhdGEsUSxnKX10aGlzLl9yZWFkSW5kZXgrPWcsdGhpcy5fcmVhZEluZGV4Pj10aGlzLl9sZW5ndGgmJih0aGlzLl9yZWFkSW5kZXg9dGhpcy5fcmVhZEluZGV4LXRoaXMuX2xlbmd0aCksdGhpcy5fZnJhbWVzQXZhaWxhYmxlLT1nLHRoaXMuX2ZyYW1lc0F2YWlsYWJsZTwwJiYodGhpcy5fZnJhbWVzQXZhaWxhYmxlPTApfX1jb25zdCBCPWZ1bmN0aW9uKEEpe2Z1bmN0aW9uIEIoQSl7dmFyIEI9RlsiXyIrQV07cmV0dXJuIGZ1bmN0aW9uKEEsQil7QXx8RCgiQXNzZXJ0aW9uIGZhaWxlZDogIitCKX0oQiwiQ2Fubm90IGNhbGwgdW5rbm93biBmdW5jdGlvbiAiK0ErIiwgbWFrZSBzdXJlIGl0IGlzIGV4cG9ydGVkIiksQn1mdW5jdGlvbiBnKEEsZyxJLEUpe3ZhciBpPXtzdHJpbmc6ZnVuY3Rpb24oQSl7dmFyIEI9MDtpZihudWxsIT1BJiYwIT09QSl7dmFyIGc9MSsoQS5sZW5ndGg8PDIpO0MoQSxCPVYoZyksZyl9cmV0dXJuIEJ9LGFycmF5OmZ1bmN0aW9uKEEpe3ZhciBCPVYoQS5sZW5ndGgpO3JldHVybiBmdW5jdGlvbihBLEIpe3Auc2V0KEEsQil9KEEsQiksQn19LG89QihBKSxhPVtdLGU9MDtpZihFKWZvcih2YXIgbix0PTA7dDxFLmxlbmd0aDt0KyspKG49aVtJW3RdXSk/KDA9PT1lJiYoZT1UKCkpLGFbdF09bihFW3RdKSk6YVt0XT1FW3RdO3ZhciBzPW8uYXBwbHkobnVsbCxhKTtyZXR1cm4gcz1mdW5jdGlvbihBKXtyZXR1cm4ic3RyaW5nIj09PWc/UShBKToiYm9vbGVhbiI9PT1nPyEhQTpBfShzKSwwIT09ZSYmaihlKSxzfWZ1bmN0aW9uIEkoQSxCLGcpe2Zvcih2YXIgST1CK2csUT1CO0FbUV0mJiEoUT49SSk7KSsrUTtpZigxNjxRLUImJkEuc3ViYXJyYXkmJkwpcmV0dXJuIEwuZGVjb2RlKEEuc3ViYXJyYXkoQixRKSk7Zm9yKHZhciBFLEM9IiI7QjxROylpZigxMjgmKEU9QVtCKytdKSl7dmFyIGk9NjMmQVtCKytdO2lmKDE5MiE9KDIyNCZFKSl7dmFyIG89NjMmQVtCKytdO2lmKDY1NTM2PihFPTIyND09KDI0MCZFKT8oMTUmRSk8PDEyfGk8PDZ8bzooNyZFKTw8MTh8aTw8MTJ8bzw8Nnw2MyZBW0IrK10pKUMrPVN0cmluZy5mcm9tQ2hhckNvZGUoRSk7ZWxzZXt2YXIgYT1FLTY1NTM2O0MrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8YT4+MTAsNTYzMjB8MTAyMyZhKX19ZWxzZSBDKz1TdHJpbmcuZnJvbUNoYXJDb2RlKCgzMSZFKTw8NnxpKX1lbHNlIEMrPVN0cmluZy5mcm9tQ2hhckNvZGUoRSk7cmV0dXJuIEN9ZnVuY3Rpb24gUShBLEIpe3JldHVybiBBP0kocSxBLEIpOiIifWZ1bmN0aW9uIEUoQSxCLGcsSSl7aWYoISgwPEkpKXJldHVybiAwO2Zvcih2YXIgUSxFPWcsQz1nK0ktMSxpPTA7aTxBLmxlbmd0aDsrK2kpaWYoNTUyOTY8PShRPUEuY2hhckNvZGVBdChpKSkmJjU3MzQzPj1RJiYoUT02NTUzNisoKDEwMjMmUSk8PDEwKXwxMDIzJkEuY2hhckNvZGVBdCgrK2kpKSwxMjc+PVEpe2lmKGc+PUMpYnJlYWs7QltnKytdPVF9ZWxzZSBpZigyMDQ3Pj1RKXtpZihnKzE+PUMpYnJlYWs7QltnKytdPTE5MnxRPj42LEJbZysrXT0xMjh8NjMmUX1lbHNlIGlmKDY1NTM1Pj1RKXtpZihnKzI+PUMpYnJlYWs7QltnKytdPTIyNHxRPj4xMixCW2crK109MTI4fDYzJlE+PjYsQltnKytdPTEyOHw2MyZRfWVsc2V7aWYoZyszPj1DKWJyZWFrO0JbZysrXT0yNDB8UT4+MTgsQltnKytdPTEyOHw2MyZRPj4xMixCW2crK109MTI4fDYzJlE+PjYsQltnKytdPTEyOHw2MyZRfXJldHVybiBCW2ddPTAsZy1FfWZ1bmN0aW9uIEMoQSxCLGcpe3JldHVybiBFKEEscSxCLGcpfWZ1bmN0aW9uIGkoQSl7dmFyIEI9ZnVuY3Rpb24oQSl7Zm9yKHZhciBCLGc9MCxJPTA7STxBLmxlbmd0aDsrK0kpNTUyOTY8PShCPUEuY2hhckNvZGVBdChJKSkmJjU3MzQzPj1CJiYoQj02NTUzNisoKDEwMjMmQik8PDEwKXwxMDIzJkEuY2hhckNvZGVBdCgrK0kpKSwxMjc+PUI/KytnOmcrPTIwNDc+PUI/Mjo2NTUzNT49Qj8zOjQ7cmV0dXJuIGd9KEEpKzEsZz1WKEIpO3JldHVybiBFKEEscCxnLEIpLGd9ZnVuY3Rpb24gbyhBKXtmb3IoOzA8QS5sZW5ndGg7KXt2YXIgQj1BLnNoaWZ0KCk7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIEIpe3ZhciBnPUIuZnVuYzsibnVtYmVyIj09dHlwZW9mIGc/dm9pZCAwPT09Qi5hcmc/Ri5keW5DYWxsX3YoZyk6Ri5keW5DYWxsX3ZpKGcsQi5hcmcpOmcodm9pZCAwPT09Qi5hcmc/bnVsbDpCLmFyZyl9ZWxzZSBCKCl9fWZ1bmN0aW9uIGEoQSl7Si51bnNoaWZ0KEEpfWZ1bmN0aW9uIGUoQSl7Sy51bnNoaWZ0KEEpfWZ1bmN0aW9uIG4oQSl7ZnVuY3Rpb24gQihBKXt2YXIgQj1BLmV4cG9ydHM7Ri5hc209QixmdW5jdGlvbigpe2lmKFgtLSxGLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMmJkYubW9uaXRvclJ1bkRlcGVuZGVuY2llcyhYKSwwPT1YJiZaKXt2YXIgQT1aO1o9bnVsbCxBKCl9fSgpfWZ1bmN0aW9uIGcoQSl7cmV0dXJuIGZ1bmN0aW9uKEEpe2lmKCJib29sZWFuIj09dHlwZW9mIGwmJmwpe3ZhciBCO3RyeXtCPUJ1ZmZlci5mcm9tKEEsImJhc2U2NCIpfWNhdGNoKGcpe0I9bmV3IEJ1ZmZlcihBLCJiYXNlNjQiKX1yZXR1cm4gbmV3IFVpbnQ4QXJyYXkoQi5idWZmZXIsQi5ieXRlT2Zmc2V0LEIuYnl0ZUxlbmd0aCl9dHJ5e2Zvcih2YXIgZz1RKEEpLEk9bmV3IFVpbnQ4QXJyYXkoZy5sZW5ndGgpLEU9MDtFPGcubGVuZ3RoOysrRSlJW0VdPWcuY2hhckNvZGVBdChFKTtyZXR1cm4gSX1jYXRjaChBKXt0aHJvdyBuZXcgRXJyb3IoIkNvbnZlcnRpbmcgYmFzZTY0IHN0cmluZyB0byBieXRlcyBmYWlsZWQuIil9fShBLnNsaWNlKDM3KSl9dmFyIEk9e2VudjpBLGdsb2JhbDp7TmFOOk5hTixJbmZpbml0eToxLzB9LCJnbG9iYWwuTWF0aCI6TWF0aCxhc20yd2FzbTpVfTtYKyssRi5tb25pdG9yUnVuRGVwZW5kZW5jaWVzJiZGLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoWCk7dmFyIFE9ImZ1bmN0aW9uIj09dHlwZW9mIGF0b2I/YXRvYjpmdW5jdGlvbihBKXt2YXIgQixnLEksUSxFLEMsaT0iIixvPTA7QT1BLnJlcGxhY2UoL1teQS1aYS16MC05XCtcL1w9XS9nLCIiKTtkb3tCPSJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSIuaW5kZXhPZihBLmNoYXJBdChvKyspKTw8MnwoUT0iQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0iLmluZGV4T2YoQS5jaGFyQXQobysrKSkpPj40LGc9KDE1JlEpPDw0fChFPSJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSIuaW5kZXhPZihBLmNoYXJBdChvKyspKSk+PjIsST0oMyZFKTw8NnwoQz0iQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0iLmluZGV4T2YoQS5jaGFyQXQobysrKSkpLGkrPVN0cmluZy5mcm9tQ2hhckNvZGUoQiksNjQhPT1FJiYoaSs9U3RyaW5nLmZyb21DaGFyQ29kZShnKSksNjQhPT1DJiYoaSs9U3RyaW5nLmZyb21DaGFyQ29kZShJKSl9d2hpbGUobzxBLmxlbmd0aCk7cmV0dXJuIGl9O2lmKEYuaW5zdGFudGlhdGVXYXNtKXRyeXtyZXR1cm4gRi5pbnN0YW50aWF0ZVdhc20oSSxCKX1jYXRjaChBKXtyZXR1cm4geSgiTW9kdWxlLmluc3RhbnRpYXRlV2FzbSBjYWxsYmFjayBmYWlsZWQgd2l0aCBlcnJvcjogIitBKSwhMX1yZXR1cm4gZnVuY3Rpb24oQSl7dmFyIEI9ZyhSKTtXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShCLEkpLnRoZW4oQSwoZnVuY3Rpb24oQSl7eSgiZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogIitBKSxEKEEpfSkpfSgoZnVuY3Rpb24oQSl7QihBLmluc3RhbmNlKX0pKSx7fX1mdW5jdGlvbiB0KCl7RCgiT09NIil9ZnVuY3Rpb24gcyhBKXt0aGlzLm5hbWU9IkV4aXRTdGF0dXMiLHRoaXMubWVzc2FnZT0iUHJvZ3JhbSB0ZXJtaW5hdGVkIHdpdGggZXhpdCgiK0ErIikiLHRoaXMuc3RhdHVzPUF9ZnVuY3Rpb24gcihBKXtmdW5jdGlvbiBCKCl7Ri5jYWxsZWRSdW58fChGLmNhbGxlZFJ1bj0hMCxrfHwobyh4KSxvKGIpLGMoRiksRi5vblJ1bnRpbWVJbml0aWFsaXplZCYmRi5vblJ1bnRpbWVJbml0aWFsaXplZCgpLEYuX21haW4mJlAmJkYuY2FsbE1haW4oQSksZnVuY3Rpb24oKXtpZihGLnBvc3RSdW4pZm9yKCJmdW5jdGlvbiI9PXR5cGVvZiBGLnBvc3RSdW4mJihGLnBvc3RSdW49W0YucG9zdFJ1bl0pO0YucG9zdFJ1bi5sZW5ndGg7KWUoRi5wb3N0UnVuLnNoaWZ0KCkpO28oSyl9KCkpKX1BPUF8fEYuYXJndW1lbnRzLCEoMDxYKSYmKGZ1bmN0aW9uKCl7aWYoRi5wcmVSdW4pZm9yKCJmdW5jdGlvbiI9PXR5cGVvZiBGLnByZVJ1biYmKEYucHJlUnVuPVtGLnByZVJ1bl0pO0YucHJlUnVuLmxlbmd0aDspYShGLnByZVJ1bi5zaGlmdCgpKTtvKEopfSgpLDA8WHx8Ri5jYWxsZWRSdW58fChGLnNldFN0YXR1cz8oRi5zZXRTdGF0dXMoIlJ1bm5pbmcuLi4iKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7Ri5zZXRTdGF0dXMoIiIpfSksMSksQigpfSksMSkpOkIoKSkpfWZ1bmN0aW9uIEQoQSl7dGhyb3cgRi5vbkFib3J0JiZGLm9uQWJvcnQoQSksdm9pZCAwPT09QT9BPSIiOih1KEEpLHkoQSksQT0nIicrQSsnIicpLGs9ITAsImFib3J0KCIrQSsiKS4gQnVpbGQgd2l0aCAtcyBBU1NFUlRJT05TPTEgZm9yIG1vcmUgaW5mby4ifXZhciBjLEY9dm9pZCAwPT09KEE9QXx8e30pP3t9OkEsUj0iZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LEFHRnpiUUVBQUFBQnBBRVZZQU4vZjM4QmYyQUFBR0FCZndGL1lBSi9md0YvWUFkL2YzOS9mMzkvQVg5Z0NIOS9mMzkvZjM5L0FYOWdBMzkrZndGK1lBRi9BR0FIZjM5L2YzOS9md0JnQkg5L2YzOEFZQUFCZjJBQ2YzOEFZQVovZjM5L2YzOEJmMkFFZjM5L2Z3Ri9ZQVovZjM5L2YzOEFZQVYvZjM5L2Z3QmdBMzkvZndCZ0NYOS9mMzkvZjM5L2Z3Ri9ZQVIvZjM1L0FYNWdDSDkvZjM5L2YzOS9BR0FGZjM5L2YzOEJmd0xXQWhBRFpXNTJCV0ZpYjNKMEFBY0RaVzUyRGw5ZlgyRnpjMlZ5ZEY5bVlXbHNBQWtEWlc1MkMxOWZYM05sZEVWeWNrNXZBQWNEWlc1MkRWOWZYM041YzJOaGJHd3hOREFBQXdObGJuWU5YMTlmYzNselkyRnNiREUwTmdBREEyVnVkZ3hmWDE5emVYTmpZV3hzTlRRQUF3TmxibllMWDE5ZmMzbHpZMkZzYkRZQUF3TmxibllaWDJWdGMyTnlhWEIwWlc1ZloyVjBYMmhsWVhCZmMybDZaUUFLQTJWdWRoWmZaVzF6WTNKcGNIUmxibDl0WlcxamNIbGZZbWxuQUFBRFpXNTJGMTlsYlhOamNtbHdkR1Z1WDNKbGMybDZaVjlvWldGd0FBSURaVzUyRjJGaWIzSjBUMjVEWVc1dWIzUkhjbTkzVFdWdGIzSjVBQUlEWlc1MkMzTmxkRlJsYlhCU1pYUXdBQWNEWlc1MkRGOWZkR0ZpYkdWZlltRnpaUU4vQUFObGJuWU9SRmxPUVUxSlExUlBVRjlRVkZJRGZ3QURaVzUyQm0xbGJXOXllUUlCZ0FLQUFnTmxibllGZEdGaWJHVUJjQUVnSUFOblpnSUtCd3NLQWd3Q0FnTU5Bd0lEQUFBTkFnQUFBQTBPRHdrQ0R3MEpBQUVCQVFFRENRY0FFQWtKQ1FRQ0J3QUFBQUlGQWdBQUNBc0RBd01EQXdNQ0FBWUNDZ0lBQWdjQUFnSUREUU1DQWdjREFBQUNBd0FOQlJFU0J3c1RBZ01BQkFVR0FRY0lGQVlQQW44QlFjQTVDMzhCUWNDNXdBSUxCN0FDRmhGZlgxOWxjbkp1YjE5c2IyTmhkR2x2YmdCTkJWOW1jbVZsQUZvRlgyMWhhVzRBRUFkZmJXRnNiRzlqQUZrSFgyMWxiV053ZVFCY0IxOXRaVzF6WlhRQVhRMWZjSEp2WTJWemMxOWtZWFJoQUJJRlgzTmljbXNBWGdoZmMyVjBiVzlrWlFBUkNtUjVia05oYkd4ZmFXa0FYd3RrZVc1RFlXeHNYMmxwYVFCZ0RHUjVia05oYkd4ZmFXbHBhUUJoRUdSNWJrTmhiR3hmYVdscGFXbHBhV2tBWWhGa2VXNURZV3hzWDJscGFXbHBhV2xwYVFCakRHUjVia05oYkd4ZmFtbHFhUUJ4Q1dSNWJrTmhiR3hmZGdCbENtUjVia05oYkd4ZmRta0FaaEJrZVc1RFlXeHNYM1pwYVdscGFXbHBBR2NUWlhOMFlXSnNhWE5vVTNSaFkydFRjR0ZqWlFBUENuTjBZV05yUVd4c2IyTUFEQXh6ZEdGamExSmxjM1J2Y21VQURnbHpkR0ZqYTFOaGRtVUFEUWttQVFBakFBc2dhRWszYUdsRVJVWkhTR2xwYWs4NU9rcHFhbXByTm13OWJVdHVMRzg0Y0VFS3FNRUJaaHNCQVg4akFpRUJJQUFqQW1va0FpTUNRUTlxUVhCeEpBSWdBUXNFQUNNQ0N3WUFJQUFrQWdzS0FDQUFKQUlnQVNRREN4c0FRZkFyRUJOQmYwWUVRRUVBRHd0QjhDc29BZ0FRRkVGL1J3c01BRUh3S3lnQ0FDQUFFQlVMY0FBZ0FFVUVRRUhlSVJCWUdnc2dBQzRCQUNBRFJ3UkFRWkFoUWFBaFFSNUJweUVRQVFzZ0FFSElBV291QVFBZ0JFY0VRRUcwSVVHZ0lVRWZRYWNoRUFFTElBVWdBRUdnSDJvdUFRQkdCRUJCOENzb0FnQWdBaUFBSUFFUUZnOEZRY2doUWFBaFFTQkJweUVRQVF0QkFBc3RBQ0FBQkg4Z0FFSGdCUkJaSWdBMkFnQWdBQVIvRUNvZ0FFSGNCV3BCQURZQ0FFRUFCVUYvQ3dWQmZ3c0xCZ0FnQUJBWUN5SUFJQUFFZnlBQVFkd0ZhaWdDQUVFcVJnUi9JQUFnQVJBWkJVRi9Dd1ZCZndzTHhRRUFJQUJGQkVCQmZ3OExJQUpGSUFCQjNBVnFLQUlBUVNwSGNnUkFRWDhQQ3lBQklBTVFGd1JBUVg4UEN3SkFJQUZCZ1BvQlNBUkFJQUZCZ1AwQVNBUkFJQUZCd0Q1clJRUkFJQUFnQWlBREVCc2hBQXdEQzBGL0R3VWdBVUdBL1FCclJRUkFJQUFnQWlBREVDQWhBQXdEQzBGL0R3c0FCU0FCUVlEM0FrZ0VRQ0FCUVlENkFXdEZCRUFnQUNBQ0lBTVFIeUVBREFNTFFYOFBCU0FCUVlEM0FtdEZCRUFnQUNBQ0lBTVFHaUVBREFNTFFYOFBDd0FMQUFzZ0FFRUJJQUJCQVVnYkM0VUJBQUovSUFFZ0FFR0ErZ0ZJQkg4Q2Z5QUFRWUQ5QUVnRVFFRUlJQUJCd0Q1clJRMEJHa0YvREFNTFFYOGdBRUdBL1FCckRRSWFRUkFMQlNBQVFZRDNBa2dFZjBGL0lBQkJnUG9CYXcwQ0drRWdCVUYvSUFCQmdQY0NhdzBDR2tFd0N3c2lBRUVlYkVZZ0FTQUFRUXBzUmlBQklBQkJGR3hHY25KQkFYTkJIM1JCSDNVTEM0MERBUUYvSUFCRkJFQkJmdzhMSUFCQkFUWUNBQ0FBUVFScUlnRkNBRGNDQUNBQlFnQTNBZ2dnQUVHVUFtcENBRGNDQUNBQVFSUnFFREFnQUVHMEFXb2lBVUdBQ0NrQkFEY0JBQ0FCUVlnSUtRRUFOd0VJSUFGQmtBZ3BBUUEzQVJBZ0FFSE1BV29pQVVHZ0NDa0JBRGNCQUNBQlFhZ0lLUUVBTndFSUlBRkJzQWdwQVFBM0FSQWdBRUhrQVdvaUFVSEFDQ2tCQURjQkFDQUJRY2dJS1FFQU53RUlJQUZCMEFncEFRQTNBUkFnQUVIOEFXb2lBVUhnQ0NrQkFEY0JBQ0FCUWVnSUtRRUFOd0VJSUFGQjhBZ3BBUUEzQVJBZ0FFR2NBbXBCQUVIQUFSQmRHa0VBSVFFRFFDQUFRZHdEYWlBQlFRRjBha0dRemdBN0FRQWdBVUVCYWlJQlFlQUFSdzBBQ3lBQVFhZ0ZhaUlCUWdBM0FnQWdBVUlBTndJSUlBRkNBRGNDRUNBQlFRQTJBaGdnQUVHY0JXcEJ3QXc3QVFBZ0FFR2VCV3BCd0F3N0FRQWdBRUdnQldwQndBdzdBUUFnQUVHaUJXcEJ3QXc3QVFBZ0FFR2tCV3BCd0F3N0FRQWdBRUdtQldwQndBdzdBUUFnQUVFQUVCa0VRRUYvRHdzZ0FFSGNCV3BCS2pZQ0FFRUFDK2dEQUFKQUFrQUNRQUpBQWtBZ0FRNEVBQUVDQXdRTElBQkJ4QVZxSWdGQm9DQW9BUUEyQVFBZ0FVR2tJQzRCQURzQkJDQUFRY29GYWlJQlFhWWdLQUVBTmdFQUlBRkJxaUF1QVFBN0FRUWdBRUhRQldvaUFVR1VJQ2dCQURZQkFDQUJRWmdnTGdFQU93RUVJQUJCMWdWcUlnQkJtaUFvQVFBMkFRQWdBRUdlSUM0QkFEc0JCRUVBRHdzZ0FFSEVCV29pQVVHZ0lDZ0JBRFlCQUNBQlFhUWdMZ0VBT3dFRUlBQkJ5Z1ZxSWdGQnBpQW9BUUEyQVFBZ0FVR3FJQzRCQURzQkJDQUFRZEFGYWlJQlFhd2dLQUVBTmdFQUlBRkJzQ0F1QVFBN0FRUWdBRUhXQldvaUFFR3lJQ2dCQURZQkFDQUFRYllnTGdFQU93RUVRUUFQQ3lBQVFjUUZhaUlCUWNRZ0tBRUFOZ0VBSUFGQnlDQXVBUUE3QVFRZ0FFSEtCV29pQVVIS0lDZ0JBRFlCQUNBQlFjNGdMZ0VBT3dFRUlBQkIwQVZxSWdGQnVDQW9BUUEyQVFBZ0FVRzhJQzRCQURzQkJDQUFRZFlGYWlJQVFiNGdLQUVBTmdFQUlBQkJ3aUF1QVFBN0FRUkJBQThMSUFCQnhBVnFJZ0ZCeENBb0FRQTJBUUFnQVVISUlDNEJBRHNCQkNBQVFjb0ZhaUlCUWNvZ0tBRUFOZ0VBSUFGQnppQXVBUUE3QVFRZ0FFSFFCV29pQVVIUUlDZ0JBRFlCQUNBQlFkUWdMZ0VBT3dFRUlBQkIxZ1ZxSWdCQjFpQW9BUUEyQVFBZ0FFSGFJQzRCQURzQkJFRUFEd3RCZnd0MkFRWi9Jd0loQXlNQ1FlQWFhaVFDSUFOQmdCZHFJUVVnQXlJR1FRQkJnQmNRWFJvZ0FrSGdBMjBoQnlBQ1FkOERTZ1JBSUFCQkZHb2hDRUVBSVFRRFFDQUJJQVJCMEFCc1FRRjBJQVZxSUFnZ0JoQXZJQVJCQVdvaUJDQUhSdzBBQ3dzZ0FDQUZJQUpCQm0wUUd5RUFJQU1rQWlBQUN6UUJBWDhqQWlFREl3SkJFR29rQWlBQUlBQWdBeUFBSUFFZ0FpQURFQ0VnQWhBY1FSQjBRUkIxSWdBMkFnQWdBeVFDSUFBTHF4QUJHMzhqQWlFTEl3SkJnQUZxSkFJZ0MwSGdBR29oRGlBTFFVQnJJUThnQzBFZ2FpSU1RZ0EzQXdBZ0RFSUFOd01JSUF4Q0FEY0RFQ0FMSWhCQ0FEY0RBQ0FMUWdBM0F3Z2dDMElBTndNUUFuOENRQUpBQWtBZ0EwSFFBR3NPVVFBQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQVFJTElBQkJ4QVZxSVFVZ0FFSEtCV29oQkNBQVFkWUZhaUVISUFCQjBBVnFEQUlMSUFCQnhnVnFJUVVnQUVITUJXb2hCQ0FBUWRnRmFpRUhJQUJCMGdWcURBRUxJQUJCeUFWcUlRVWdBRUhPQldvaEJDQUFRZG9GYWlFSElBQkIxQVZxQ3lFRElBY3VBUUFoQ0NBRUxnRUFJUmNnQlM0QkFDRVlJQUpCRUhSQkVIVkJDa29FUUNBRExnRUFJUTFCQUNFQ1FRQWhBMEVBSVFVRFFDQUNRUUYwSUFGcUlnY3VBUUFnQUVHMEFXb2dBa0VCZEdvdUFRQWdBRUhrQVdvZ0FrRUJkR291QVFBZ0FrRUJkQ0FPYWhBbklBSkJBWFJCZ0FscUxnRUFiQ0VLSUFjdUFRQWdBRUhNQVdvZ0FrRUJkR291QVFBZ0FFSDhBV29nQWtFQmRHb3VBUUFnQWtFQmRDQVBhaEFuSUFKQkFYUkJvQWxxTGdFQWJDRUpJQW9nQnk0QkFDQUFRYlFCYWlBQ1FRWnFJZ1JCQVhScUxnRUFJQUJCNUFGcUlBUkJBWFJxTGdFQUlBUkJBWFFnRG1vUUp5QUVRUUYwUVlBSmFpNEJBR3hxSVFZZ0NTQUhMZ0VBSUFCQnpBRnFJQVJCQVhScUxnRUFJQUJCL0FGcUlBUkJBWFJxTGdFQUlBUkJBWFFnRDJvUUp5QUVRUUYwUWFBSmFpNEJBR3hxSVFjZ0JoQWRRUjhnQmhzZ0J4QWRRUjhnQnh0clFSQjBJZ1JCRUhVZ0FrRUJkRUhjSUdvdUFRQnNJQU5xSVFOQkFTQUZJQVJCRG5VZ0RVb2JJUVVnQmtFTWRpSUVRUkIwUVFCS0JIOGdBa0VCZENBTWFpQUtRUUowUVlDQWYzRWdCRUgvL3dOeEVDNGlCRHNCQUVHQWdBRWdCR3RCLy84RGNTRUdJQUpCQm1vRlFZQ0FBU0VHSUFJTFFRRjBJQXhxSUFZN0FRQWdCMEVNZGlJRVFSQjBRUUJLQkVBZ0FrRUJkQ0FRYWlBSlFRSjBRWUNBZjNFZ0JFSC8vd054RUM0aUJEc0JBQ0FDUVFacVFRRjBJQkJxUVlDQUFTQUVhenNCQUFzZ0FrRUJhaUlDUVFaSERRQUxJQVZCLy84RGNTQURJQWhPY2lJTlFRQkhJUkpCQUNFR1FZRGtBQ0VDQTBBZ0FDQUdRUUYwSUFGcUloTXVBUUFnQmhBcFFSQjBRUkIxUVFSMElBQkJ0QUZxSUFaQkFYUnFJaFJCQUNBR1FRRjBRWUFKYWlJVkVCNUJCblpyUVJCMFFSQjFRWUNhQVd4QkVIWWhHVUhJQUNBR2F5RWFJQUpCLy84RGNVR0FCV29pQWtILy93TnhJUnNnQWtFUWRFRVFkU0VjUVFBaENnTkFJQUJCdEFGcUlBWWdDa0VHYkdvaUNFRUJkR29pRVM0QkFDRUNJQUJCekFGcUlBaEJBWFJxSWgwdUFRQWhGaUFBUWVRQmFpQUlRUUYwYWlJRExnRUFJUVVnQUVIOEFXb2dDRUVCZEdvaUJ5NEJBQ0VFSUJFZ0NpQWFhaUlSUVFkMElBcEJCM1JCZ0FWcUloNGdHU0FTQkg4Z0FnVWdBa0gvL3dOeElBaEJBWFFnRG1vdUFRQWdDRUVCZENBTWFpNEJBRUVGZEd4QkVIVkJqd1ZzUVJaMWFrSC8vd054QzBILy93TnhhaUlKSUFsQkVIUWdIa0VRZEVnYklna2dDVUVRZENBUlFSZDBTaHM3QVFBZ0VnUkFJQjBnR3lBS1FRRjBRZWdnYWk0QkFDSUNJQllnQ0VFQmRDQVBhaTRCQUNJRElBaEJBWFFnRUdvdUFRQWlCVUVGZEd4QkVIVkJtak5zUVJWMVFRRnFRUUYxYWlJSlFmLy9BM0VnQ1VFUWRFRVFkU0FDU0JzaUFpQWNJQUpCRUhSQkVIVklHenNCQUNBRElCTXZBUUFnRmtFRWFrRURkV3RCRUhSQkVIVnNRUU4xUVlCZ2FpQUZRUUoxYkNJQ1FRUjFJUVVnQWtFUFNnUi9RUmdoQ1VHQWdJQUVJUWdnQnlFRElBVWdCRUVLYkVILy93TnhFQzRoQlNBRUJVRVlJUWxCZ0lDQUJDRUlJQWNoQTBFQVFRQWdCV3NnQkVFS2JFSC8vd054RUM1cklRVWdCQXNoQWdVZ0NFRUJkQ0FPYWk0QkFDQVRMd0VBSUFKQkEzVnJRUkIwUVJCMWJFRURkVUdBWUdvZ0NFRUJkQ0FNYWk0QkFFRUNha0VDZFd3aUFrRU9kU0VFSUFKQi8vOEFTZ1IvUVJZaENVR0FnSUFCSVFnZ0JDQUZJZ0lRTGdWQkZpRUpRWUNBZ0FFaENFRUFRUUFnQkdzZ0JTSUNFQzVyQ3lFRkN5QURRWUFESUFKQi8vOERjU0FJSUFWQkVIUnFJQWwxYWlJQ1FmLy9BM0VnQWtFUWRFR0FnSUFNU0JzN0FRQWdDa0VCYWlJS1FRSkhEUUFMSUJSQkFDQVZFQjRoQWlBQVFjd0JhaUFHUVFGMGFpSURRUUFnQmtFQmRFR2dDV29pQkJBZUlnVkJDWFlnQWtFSmRtdEJFSFJCRUhVaUJ5QUdRUUYwUWV3Z2FpNEJBQ0lLU0FSQUlBTWdDaUFIYTBFUWRFRVFkU0lEUVExc1FRSjJRZi8vQTNFZ0JCQWVJUUlnRkVFQUlBTkJnSUFEYkVFUWRtdEIvLzhEY1NBVkVCNGhBd1VnQWlFRElBVWhBZ3NnQWtFSmRFRVFkU0lGSUFaQkFYUkIrQ0JxTGdFQUlnSWlCRW9FUUNBQVFjd0JhaUFHUVFGMGFpSUhJQVFnQldzaUJTQUhMd0VBYWpzQkFDQUdRUUYwSUFCcVFkZ0JhaUlFSUFRdkFRQWdCV283QVFBTElBTkJDWFJCRUhVaUF5QUdRUUYwUVlRaGFpNEJBQ0lGU2dSQUlBQkJ0QUZxSUFaQkFYUnFJZ1FnQlNBRGF5SURJQVF2QVFCcU93RUFJQVpCQVhRZ0FHcEJ3QUZxSWdVZ0JTOEJBQ0FEYWpzQkFBc2dCa0VCYWlJR1FRWkhEUUFMSUFCQmxBSnFJZ0VnQVNnQ0FFRUJhallDQUNBTlFmLy9BM0VFUUNBQVFab0NhaUlCTGdFQVFRRnFRUkIwUVJCMUlRSWdBU0FDT3dFQUlBSkJCa29FUUNBQlFRWTdBUUFnQUVHWUFtb2dGenNCQUNBTEpBSWdEUThGSUFCQm1BSnFJQmc3QVFBZ0N5UUNJQTBQQ3dBTEN5QUFRWmdDYWlJQ0xnRUFJZ0ZCQUVvRWZ5QUNJQUZCZjJvN0FRQWdBVUgvL3dOeFFRSnFRZi8vQTNFRlFRQUxJUUVnQUVHYUFtcEJBRHNCQUNBTEpBSWdBUXR1QVFGL0lBQkZCRUJCQUE4TFFZQ0FnSUI4UVFCQkVDQUFJQUJCSDNWeklnQkIvLzhCU3hzaUFVRUljaUFCUVlDQWdId2dBWFlnQUhGRkd5SUJRUVJ5SUFGQmdJQ0FRQ0FCZGlBQWNVVWJJZ0ZCQW5JZ0FVR0FnSUNBZmlBQmRpQUFjVVViSWdGMklBQnhSU0FCYWd0VUFRRi9JQUFnQVVILy93TnhJZ0VnQUM4QkFHb2lBenNCQUNBQ0xnRUFJQU5CRUhSQkVIVnNJUU1nQVNBQVFReHFJZ0V2QVFCcUlRQWdBU0FBT3dFQUlBTWdBa0VNYWk0QkFDQUFRUkIwUVJCMWJHb0xSZ0VCZnlNQ0lRTWpBa0dnQzJva0FpQUJJQU5CNEFOcUlnRWdBRUVNYWlBQ0VDZ2dBU0FESUFCQkJHb2dBa0VCZFJBb0lBQWdBeUFDUVFKMUVCc2hBQ0FESkFJZ0FBc3dBUUYvSXdJaEF5TUNRZUFEYWlRQ0lBRWdBeUFBUVFScUlBSVFLQ0FBSUFNZ0FrRUJkUkFiSVFBZ0F5UUNJQUFMNUFJQkIzOGpBaUVJSXdKQjhBVnFKQUlnQ0VId0Eyb2hCU0FJUVlBQ2FpRUpJQWhCZ0FGcUlRWWdDQ0lIUWVBRmFpSUVRUUE3QVFBZ0FrRUJkU0VLSUFKQmYwd0VRRUg2SVVHTElrR0tBa0cwSWhBQkN5QUNRZkVCU0FSQUlBRWdBaUFBUWFnRmFpQUFRYklGYWlBRklBa1FJaUFGSUFvZ0FFR3FCV29nQUVHMEJXb2dCaUFIRUNJZ0JpQUNRUUoySWdGQnNBRWdCQ0FEUVFwcUVDTWdCeUFCUWJBQklBUWdBMEVJYWhBaklBa2dDaUFBUWF3RmFpQUFRYllGYWlBR0lBY1FJaUFHSUFGQnNBRWdCQ0FEUVFacUVDTWdCeUFCSUFCQnJnVnFJQUJCdUFWcUlBVWdDUkFpSUFVZ0FrRURkaUlCUVpBQ0lBUWdBMEVFYWhBaklBa2dBU0FBUWJBRmFpQUFRYm9GYWlBR0lBY1FJaUFHSUFKQkJIWWlBVUh3QWlBRUlBTkJBbW9RSXlBSElBRWdBRUc4QldvZ0JSQWtJQVVnQVVId0FpQUVJQU1RSXlBRUxnRUFJUUFnQ0NRQ0lBQVBCVUhRSWtHTElrR0xBa0cwSWhBQkMwRUFDM3NCQVg4Z0FDQUJRUUYxSWdaQjdLTUJJQUlnQkJBbUlBQkJBbW9nQmtIREt5QURJQVVRSmlBQlFRRk1CRUFQQzBFQUlRQURRQ0FFUVFKcUlRRWdCQ0FFTGdFQUlnTWdCUzhCQUdzN0FRQWdCVUVDYWlFQ0lBVWdBeUFGTHdFQWFqc0JBQ0FBUVFGcUlnQWdCa2dFUUNBQklRUWdBaUVGREFFTEN3dUlBZ0VDZnlNQ0lRWWpBa0VRYWlRQ0lBWWlCVUVBTmdJQUlBQkZCRUJCNHlKQml5SkJwQUZCOHlJUUFRc2dBVUVBVEFSQVFmOGlRWXNpUWFVQlFmTWlFQUVMSUFBZ0FTQUZFREVpQUVVRVFDQUVJQUk3QVFBZ0JpUUNEd3RCRVNBQUVDVnJJUUVnQlNBRktBSUFJQUZxSWdVMkFnQWdCQ0FDUWYvL0EzRkJBQ0FBUVFBZ0FXdDBJQUFnQVhZZ0FVRUFTQnNpQVVFRWRrSC9CM0ZCZ1BBQWNrSFV3QUZzUVJOMklBVkJFSFJCRUhWQjFNQUJiRUVKZG1vaUFDQUFRWUNBQW5FYmFqc0JBQ0FETGdFQUlnQWhBaUFBUVF0T0JFQWdCaVFDRHdzZ0JVRi9TZ1JBSUFNZ0FrRUxhanNCQUNBR0pBSUZJQU1nQWlBQlFRQWdCV3QyYWpzQkFDQUdKQUlMQzdvQkFRaC9JQUZCQUV3RVFBOExJQUpCQW1vaEJTQUNRUVJxSVFZZ0FrRUdhaUVIUVFBaENBTkFJQUF1QVFBaEJDQUZMZ0VBSVFrZ0JTQUNMZ0VBSWdvN0FRQWdBRUVDYWlFTElBSWdBQzRCQURzQkFDQUtRYktZZjJ3Z0JDQUpha0huTTJ4cUlBWXVBUUFpQUVITVBHeHFJQWN1QVFCQmpGUnNhaUVFSUFjZ0FEc0JBQ0FHSUFSQkRuWkIvLzhEY1NJQU93RUFJQU5CQW1vaEJDQURJQUE3QVFBZ0NFRUJhaUlJSUFGSEJFQWdDeUVBSUFRaEF3d0JDd3NMWndFQmZ5QUFSUVJBUVFBUEN5QUFRWUNBZ0lCNFFRQkJFQ0FBUWYvL0Ewc2JJZ0ZCQ0hJZ0FTQUFRWUNBZ0hnZ0FYWnhSUnNpQVVFRWNpQUJJQUJCZ0lDQWdIOGdBWFp4UlJzaUFVRUNjaUFCSUFCQmdJQ0FnSHdnQVhaeFJSc2lBSFp4UlNBQWFndU1BUUVEZnlBREx3RUFRUkIwSVFVZ0FVRUFUQVJBSUFNZ0JVRVFkanNCQUE4TElBSkJFSFJCRUhVaEJrRUFJUWNnQlNFQ0EwQWdCRUVDYWlFRklBUWdCaUFBTGdFQWJDQUNhaUlDUVJCMk93RUFJQUF1QVFCQkRuUWdCaUFDUVJCMWJHdEJBWFFoQWlBQVFRUnFJUUFnQjBFQmFpSUhJQUZIQkVBZ0JTRUVEQUVMQ3lBRElBSkJFSFk3QVFBTG9RRUJBWDhnQWtFUWRFRVJkVUdBZ0FocUlBSVFMa0VRZENJRVFSQjFJUUlnQXlBQVFmLy9BM0ZCQTNRZ0FVSC8vd054YTBFUWRFRVFkU0lBSUFSQkVuVWlBMEVPZENBRGJFRVFkV3hCQ25ZaUFUc0JBQ0FBSUFGQkVIUkJFSFZzSWdCQmdOU3ZCVTRFUUVFQUR3c2dBa0VBSUFCQkIzUkJFSFZCME9JRmJFR0FnSHh4YXlJQVFSQjJRZjhIY1VHQUNISWdBRUdBZ0lCZ2MwRWFkVUVCYW5ac0M5MEJBUVovSUFJb0FnQWhCQ0FDUVFScUlnWW9BZ0FoQlNBRFFRRjFJUWdnQTBFQlRBUkFJQUlnQkRZQ0FDQUdJQVUyQWdBUEMwRUFJUWNnQkNFRElBVWhCQU5BSUFFZ0EwRUJkaUFBTGdFQVFmc29iRUVPZG1vaUF6c0JBQ0FBTGdFQUlBTkJFSFJCRUhVaUNVSDdLR3hCREhWcklRTWdBVUVDYWlFRklBRWdCRUVCZGlBQVFRSnFJZ0V1QVFCQjhBcHNRUTUxYWtFUWRFRVFkU0lFSUFscU93RUFJQUJCQkdvaEFDQUJMZ0VBSUFSQjhBcHNRUXgxYXlFRUlBZEJBV29pQnlBSVNBUkFJQVVoQVF3QkN3c2dBaUFETmdJQUlBWWdCRFlDQUF2K0JnRUhmeUFBUVp3Q2FpQUNRUVIwSWdWQkFYUnFJUWNnQUVIY0Eyb2dCVUVCZEdvaEF5QUNRUVpPQkVCQmp5TkJwaU5CekFCQnh5TVFBUXNnQjBFZWFpRUlJQU5CSG1vaENVRUFJUVVEUUNBRlFRRjBJQWRxSWdZdUFRQWlCRUhrQUVZRVFDQUZJUVlEUUNBR1FRRjBJQU5xSUFaQkFXb2lCRUVCZENBRGFpNEJBRHNCQUNBR1FRRjBJQWRxSUFSQkFYUWdCMm91QVFBN0FRQWdCRUVRUndSQUlBUWhCZ3dCQ3dzZ0NFSGxBRHNCQUNBSlFaRE9BRHNCQUFVZ0JpQUVRUUZxT3dFQUN5QUZRUUZxSWdWQkVFY05BQXNDUUFKQUFrQWdBMEVPYWk0QkFDQUJRUkIwUVJCMVNnUkFJQU5CQm1vdUFRQWdBVUVRZEVFUWRVb0VRQ0FEUVFKcUxnRUFJQUZCRUhSQkVIVktCRUFnQXk0QkFDQUJRUkIwUVJCMVRDRUVEQU1GUVFKQkF5QURRUVJxTGdFQUlBRkJFSFJCRUhWS0d5RUVEQU1MQUFVZ0EwRUthaTRCQUNBQlFSQjBRUkIxU2dSQVFRUkJCU0FEUVFocUxnRUFJQUZCRUhSQkVIVktHeUVFREFNRlFRWkJCeUFEUVF4cUxnRUFJQUZCRUhSQkVIVktHeUVFREFNTEFBc0FCU0FEUVI1cUxnRUFJQUZCRUhSQkVIVktCRUFnQTBFV2FpNEJBQ0FCUVJCMFFSQjFTZ1JBSUFOQkVtb3VBUUFnQVVFUWRFRVFkVW9FUUVFSVFRa2dBMEVRYWk0QkFDQUJRUkIwUVJCMVNoc2hCQXdFQlVFS1FRc2dBMEVVYWk0QkFDQUJRUkIwUVJCMVNoc2hCQXdFQ3dBRklBTkJHbW91QVFBZ0FVRVFkRUVRZFVvRVFFRU1RUTBnQTBFWWFpNEJBQ0FCUVJCMFFSQjFTaHNoQkF3RUJTQURRUnhxTGdFQUlBRkJFSFJCRUhWS0JFQkJEaUVFREFVRlFROGhCQXdHQ3dBTEFBc0FDd3NNQWd0QkR5RUZBMEFnQlVFQmRDQURhaUFGUVg5cUlnWkJBWFFnQTJvdUFRQTdBUUFnQlVFQmRDQUhhaUFHUVFGMElBZHFMZ0VBT3dFQUlBWWdCRW9FUUNBR0lRVU1BUXNMQ3lBRVFRRjBJQU5xSUFFN0FRQWdCRUVCZENBSGFrRUJPd0VBQ3lBQVFaUUNhaWdDQUNJQlFRSktCRUFnQTBFRWFpRURCU0FCUVFCTUJFQWdBRUdjQldvZ0FrRUJkR29pQWk0QkFFRUFJZ0ZCQVdwc0lRQWdBaUFCUWYvL0FYTkJ3QXhzUVlDQUFXb2dBR3BCRDNaQi8vOERjU0lBT3dFQUlBQVBDd3RCbVROQnQvMEJJQU11QVFBaUJTQUFRWndGYWlBQ1FRRjBhaTRCQUVnYklRRWdBVUgvL3dGeklBVkJFSFJCRUhWc1FZQ0FBV29nQUVHY0JXb2dBa0VCZEdvaUFpNEJBQ0FCUVFGcWJHcEJEM1pCLy84RGNTRUFJQUlnQURzQkFDQUFDd1FBRUNzTENnQkI5Q3RCQVJCYkdnc0VBQkF0Qy9JQkFReC9Jd0loQUNNQ1FUQnFKQUlnQUVFc2FpSUJRUUEyQWdBZ0FFRW9haUlDUVFBMkFnQWdBRUVrYWlJRFFRQTJBZ0FnQUVFZ2FpSUVRUUEyQWdBZ0FFRWNhaUlGUVFBMkFnQWdBRUVZYWlJR1FRQTJBZ0FnQUVFVWFpSUhRUUEyQWdBZ0FFRVFhaUlJUVFBMkFnQWdBRUVNYWlJSlFRQTJBZ0FnQUVFSWFpSUtRUUEyQWdBZ0FFRUVhaUlMUVFBMkFnQWdBRUVBTmdJQUlBQkJBVFlDQUNBTFFRSTJBZ0FnQ2tFRE5nSUFJQWxCQkRZQ0FDQUlRUVUyQWdBZ0IwRUJOZ0lBSUFaQkFUWUNBQ0FGUVFFMkFnQWdCRUVDTmdJQUlBTkJBVFlDQUNBQ1FRSTJBZ0FnQVVFRE5nSUFJQUFrQWdzZkFDQUJRZi8vQTNGRkJFQkIvLy8vL3djUEN5QUFJQUZCRUhSQkVIVnRDNThCQVFKL0lBQkI0QU1nQTBHQUNHb2lBQ0FDRURRZ0FFSHdBU0FEUVVCcklBSkJJR29RTlNBRFFTQnFJZ1FnQWtIZ0FHb2lBQ2tDQURjQ0FDQUVJQUFwQWdnM0FnZ2dCQ0FBS1FJUU53SVFJQVFnQUNrQ0dEY0NHQ0FBSUFOQjRBZHFJZ1VwQWdBM0FnQWdBQ0FGS1FJSU53SUlJQUFnQlNrQ0VEY0NFQ0FBSUFVcEFoZzNBaGdnQkNBRFFkQUFFRElnQTBHZ0FTQUJJQUpCZ0FGcUVETUxEQUFnQUVFQVFhQUJFRjBhQzFrQkEzOGdBQ0FCSUFFUU95RUVJQUZCQUV3RVFDQUNJQVEyQWdCQkFBOExRUUFoQTBFQUlRVURRQ0FESUFBdUFRQWlBeUFEYkNBRWRtb2hBeUFBUVFKcUlRQWdCVUVCYWlJRklBRkhEUUFMSUFJZ0JEWUNBQ0FEQzQwQ0FRaC9JQUpCQUV3RVFBOExRUUFoQXdOQUlBRWdBQ2dDQUVHS0JteEJnSUFCYWlBQVFRUnFJZ1VvQWdCQi9tOXNhaUFBUVFocUlnWW9BZ0JCdndoc2FpQUFRUXhxSWdRb0FnQkI5YlVCYkdvZ0FFRVFhaUlIS0FJQVFlZmtBR3hxSUFCQkZHb2lDQ2dDQUVHNVlteHFJQUJCR0dvaUNTZ0NBRUc1QTJ4cUlBQkJIR29pQ2lnQ0FFSGVBV3hxTmdJQUlBRkJCR29nQlNnQ0FFSGVBV3hCZ0lBQmFpQUdLQUlBUWJrRGJHb2dCQ2dDQUVHNVlteHFJQWNvQWdCQjUrUUFiR29nQ0NnQ0FFSDF0UUZzYWlBSktBSUFRYjhJYkdvZ0NpZ0NBRUgrYjJ4cUlBQkJJR29vQWdCQmlnWnNhallDQUNBQlFRaHFJUUVnQTBFQmFpSURJQUpIQkVBZ0JDRUFEQUVMQ3d2RkJBRUtmeUFCUVFGMUlRc2dBVUVCVEFSQUR3c2dBMEVFYWlFSElBTkJDR29oQ0NBRFFReHFJUWxCQUNFR0EwQWdBeWdDQUNBR1FRTjBJQUJxSWd3b0FnQWlCRUdBUUdzZ0J5Z0NBQ0lLYTBFT2RVSHFGMnhxSVFVZ0F5QUVOZ0lBSUFvZ0JTQUlLQUlBSWdwcklnUkJEblVnQkVFZmRtcEJtTWtBYkdvaEJDQUhJQVUyQWdBZ0NTQUtJQVFnQ1NnQ0FHc2lCVUVPZFNBRlFSOTJha0hYOVFCc2FpSUZOZ0lBSUFnZ0JEWUNBQ0FNSUFWQkFYVTJBZ0FnQmtFQmFpSUdJQXRJRFFBTElBQkJCR29oRENBQlFRRk1CRUFQQ3lBRFFSUnFJUVlnQTBFUWFpRUhJQU5CR0dvaENDQURRUnhxSVFsQkFDRURBMEFnQnlnQ0FDQURRUU4wSUF4cUlnb29BZ0FpQkVHQVFHc2dCaWdDQUNJTmEwRU9kVUcxQm14cUlRVWdCeUFFTmdJQUlBMGdCU0FJS0FJQUlnMXJJZ1JCRG5VZ0JFRWZkbXBCM2k5c2FpRUVJQVlnQlRZQ0FDQUpJQTBnQkNBSktBSUFheUlGUVE1MUlBVkJIM1pxUWQ3Z0FHeHFJZ1UyQWdBZ0NDQUVOZ0lBSUFvZ0JVRUJkVFlDQUNBRFFRRnFJZ01nQzBnTkFBc2dBVUVCVEFSQUR3dEJBQ0VCQTBBZ0FVRUJkQ0lEUVFKMElBQnFLQUlBSUFOQkFYSkJBblFnQUdvb0FnQnFJUVlnQTBFQ2NrRUNkQ0FBYWlnQ0FDQURRUU55UVFKMElBQnFLQUlBYWlFRElBRkJBWFFnQW1wQi8vOEJJQVpCRDNVZ0JrSC8vLy8vQTBvYklnWkJnSUIrSUFaQmdJQitTaHM3QVFBZ0FVRUJja0VCZENBQ2FrSC8vd0VnQTBFUGRTQURRZi8vLy84RFNoc2lBMEdBZ0g0Z0EwR0FnSDVLR3pzQkFDQUJRUUpxSWdFZ0MwZ05BQXNMc0FNQkNYOGdBVUVCZFNFTElBRkJBVXdFUUE4TElBTkJCR29oRENBRFFRaHFJUWNnQTBFTWFpRUlRUUFoQlFOQUlBTW9BZ0FnQlVFQ2RDQUFhaTRCQUVFUGRFR0FnQUZ5SWdaQmdNQUFJQXdvQWdBaUJHdHFRUTUxUWVvWGJHb2hDU0FESUFZMkFnQWdCQ0FKSUFjb0FnQWlCbXNpQkVFT2RTQUVRUjkyYWtHWXlRQnNhaUVLSUF3Z0NUWUNBQ0FJSUFZZ0NpQUlLQUlBYXlJRVFRNTFJQVJCSDNacVFkZjFBR3hxSWdRMkFnQWdCeUFLTmdJQUlBVkJBblFnQW1vZ0JFRUJkVFlDQUNBRlFRRnFJZ1VnQzBnTkFBc2dBRUVDYWlFRklBRkJBVXdFUUE4TElBTkJGR29oQnlBRFFSQnFJUWdnQTBFWWFpRUpJQU5CSEdvaENrRUFJUUFEUUNBSUtBSUFJQUJCQW5RZ0JXb3VBUUJCRDNSQmdJQUJjaUlEUVlEQUFDQUhLQUlBSWdGcmFrRU9kVUcxQm14cUlRWWdDQ0FETmdJQUlBRWdCaUFKS0FJQUlnTnJJZ0ZCRG5VZ0FVRWZkbXBCM2k5c2FpRUVJQWNnQmpZQ0FDQUtJQU1nQkNBS0tBSUFheUlCUVE1MUlBRkJIM1pxUWQ3Z0FHeHFJZ00yQWdBZ0NTQUVOZ0lBSUFCQkFuUWdBbW9pQVNBQktBSUFJQU5CQVhWcU5nSUFJQUJCQVdvaUFDQUxTQTBBQ3d2YUJnRU1meUFCUVFGMUlRd2dBRUVFYWlFUElBTkJNR29oRFNBQlFRRk1CRUFQQ3lBRFFRUnFJUVlnQTBFSWFpRUtJQU5CREdvaENVRUFJUWNnRFNFSUEwQWdBeWdDQUNBSUtBSUFJZ1JCZ0VCcklBWW9BZ0FpQld0QkRuVkI2aGRzYWlFSUlBTWdCRFlDQUNBRklBZ2dDaWdDQUNJRmF5SUVRUTUxSUFSQkgzWnFRWmpKQUd4cUlRUWdCaUFJTmdJQUlBa2dCU0FFSUFrb0FnQnJJZ2hCRG5VZ0NFRWZkbXBCMS9VQWJHb2lDRFlDQUNBS0lBUTJBZ0FnQjBFQmRDSUVRUUowSUFKcUlBaEJBWFUyQWdBZ0JFRUNkQ0FQYWlFSUlBZEJBV29pQnlBTVNBMEFDeUFCUVFGTUJFQVBDeUFEUVJScUlRY2dBMEVRYWlFR0lBTkJHR29oQ2lBRFFSeHFJUWxCQUNFSUEwQWdCaWdDQUNBSVFRRjBJZzVCQW5RZ0FHb29BZ0FpQlVHQVFHc2dCeWdDQUNJTGEwRU9kVUcxQm14cUlRUWdCaUFGTmdJQUlBc2dCQ0FLS0FJQUlndHJJZ1ZCRG5VZ0JVRWZkbXBCM2k5c2FpRUZJQWNnQkRZQ0FDQUpJQXNnQlNBSktBSUFheUlFUVE1MUlBUkJIM1pxUWQ3Z0FHeHFJZ1EyQWdBZ0NpQUZOZ0lBSUE1QkFuUWdBbW9pQlNBRktBSUFJQVJCQVhWcVFROTFOZ0lBSUFoQkFXb2lDQ0FNU0EwQUN5QUNRUVJxSVFnZ0FVRUJUQVJBRHdzZ0EwRWthaUVISUFOQklHb2hCaUFEUVNocUlRb2dBMEVzYWlFSlFRQWhBZ05BSUFZb0FnQWdBa0VCZENJT1FRSjBJQUJxS0FJQUlnVkJnRUJySUFjb0FnQWlDMnRCRG5WQjZoZHNhaUVFSUFZZ0JUWUNBQ0FMSUFRZ0NpZ0NBQ0lMYXlJRlFRNTFJQVZCSDNacVFaakpBR3hxSVFVZ0J5QUVOZ0lBSUFrZ0N5QUZJQWtvQWdCcklnUkJEblVnQkVFZmRtcEIxL1VBYkdvaUJEWUNBQ0FLSUFVMkFnQWdEa0VDZENBSWFpQUVRUUYxTmdJQUlBSkJBV29pQWlBTVNBMEFDeUFCUVFGTUJFQVBDeUFEUVRScUlRRWdBMEU0YWlFQ0lBTkJQR29oQTBFQUlRQURRQ0FOS0FJQUlBQkJBWFFpQ2tFQ2RDQVBhaWdDQUNJR1FZQkFheUFCS0FJQUlnbHJRUTUxUWJVR2JHb2hCeUFOSUFZMkFnQWdDU0FISUFJb0FnQWlDV3NpQmtFT2RTQUdRUjkyYWtIZUwyeHFJUVlnQVNBSE5nSUFJQU1nQ1NBR0lBTW9BZ0JySWdkQkRuVWdCMEVmZG1wQjN1QUFiR29pQnpZQ0FDQUNJQVkyQWdBZ0NrRUNkQ0FJYWlJR0lBWW9BZ0FnQjBFQmRXcEJEM1UyQWdBZ0FFRUJhaUlBSUF4SURRQUxDNElCQVFKL1FRRWdCSFJCQVhVaEJ5QUZSU0FBUlNBQ1JYSnlJQVpCQVVoeUlBUkJBRWh5QkVCQmZ3OExJQUZCRUhSQkVIVWhDQ0FEUVJCMFFSQjFJUU5CQUNFQkEzOGdBVUVCZENBRmFpQUJRUUYwSUFCcUxnRUFJQWhzSUFkcUlBRkJBWFFnQW1vdUFRQWdBMnhxSUFSMU93RUFJQUZCQVdvaUFTQUdSdzBBUVFBTEN5Z0JBWDhnQUVFS1N3UkFRUUFoQVFWQkJCQlpJZ0VFUUNBQklBQTJBZ0FGUVFBaEFRc0xJQUVMRFFBZ0FFVUVRQThMSUFBUVdndVVBUUVHZnlNQ0lRWWpBa0dBSUdva0FpQUdJUU5CQVNBQUtBSUFJZ2QwSVFnZ0IwRWZSd1JBUVFBaEJVRUFJUVFEUUNBRVFRRjBJQU5xSUFWQkFYUWdBV291QVFBN0FRQWdCRUVCY2tFQmRDQURha0VBT3dFQUlBUkJBbW9oQkNBRlFRRnFJZ1VnQ0VnTkFBc0xJQU1nQnhCQ0lBTWdBQ2dDQUVFQkVEOGhBQ0FDSUFNZ0NFRUJkRUVFYWhCY0dpQUdKQUlnQUF2ZkFRRUhmeU1DSVFVakFrR0FJR29rQWlBRklnUWdBVUVCSUFBb0FnQWlCblFpQjBFQ2FpSURRUUYwRUZ3YUlBZEJBWFFpQ0NBRFNnUkFBMEFnQTBFQmRDQUVhaUFJSUFOcklnbEJBWFFnQVdvdUFRQTdBUUFnQTBFQmFrRUJkQ0FFYWtFQUlBbEJBV3BCQVhRZ0FXb3ZBUUJyT3dFQUlBZ2dBMEVDYWlJRFNnMEFDd3NnQkNBR0VFSWdCQ0FBS0FJQVFRRVFRQ0VESUFaQkgwWUVRQ0FGSkFJZ0F3OExRUUFoQUVFQUlRRURRQ0FBUVFGMElBSnFJQUZCQVhRZ0JHb3VBUUE3QVFBZ0FVRUNhaUVCSUFCQkFXb2lBQ0FIU0EwQUN5QUZKQUlnQXd1UUFRRUNmMEVBSUFJUVBFRVFkRUVRZFNJRElBRkJBRW9FZjBGL0lRSURRQ0FBUVFKcUlRUWdBQzRCQUNJQVFRQWdBR3NnQUVFQVNodEJFSFJCRUhVaUFDQUNJQUFnQWtvYklRSWdBVUYvYWlFQUlBRkJBVW9FUUNBQUlRRWdCQ0VBREFFTEN5QUNRZi8vQTNFRlFYOExJZ0JCRUhSQkVIVWlBU0FCYkJBZElnRnJJQUJCLy84RGNVVWdBU0FEU25JYkMyY0JBWDhnQUVFQklBQkJBa0VRUVFBZ0FFSC8vd05MR3lJQklBRkJDSElnQUVHQS9nTWdBWFJ4UlJzaUFTQUJRUVJ5SUFCQjhBRWdBWFJ4UlJzaUFTQUJRUUp5SUFCQkRDQUJkSEZGR3lJQWRIRkJBRWNnQUdvaUFIUnhRUUJISUFCcVFmLy9BM0VMbHdFQkFuOGdBMEVBU2lBRlFRQktjU0FISUFZZ0EwRi9hbXdpQ0dvaUNTQUJTSEZGQkVCQmZ3OExJQWhCQUVnRVFFRUFEd3NEZjBFQUlRRkJnQkFoQXdOQUlBRkJBWFFnQkdvdUFRQWdCeUFCYTBFQmRDQUFhaTRCQUd3Z0Eyb2hBeUFCUVFGcUlnRWdCVWNOQUFzZ0FrRUNhaUVCSUFJZ0EwRU1kUkErT3dFQUlBWWdCMm9pQnlBSlNnUi9RUUFGSUFFaEFnd0JDd3NMSkFBZ0FFSC8vd0ZLQkg5Qi8vOEJCU0FBUVlDQWZpQUFRWUNBZmtvYlFmLy9BM0VMQzZZRkFROS9RUUVnQVhRaUJrR0FDRW9FUUVGL0R3c2dCa0VCU2lFQklBSUVmeUFCUlFSQVFRQVBDMEVKSVFkQkFTRURBMzhnQTBFQmRDRUlJQU5CQUVvRVFFRUFJUUVEUUNBQklBZDBJUUlnQVNBR1NBUkFJQUpCQVhSQndBMXFMZ0VBSVFwQkFDQUNRUUYwUWNBSmFpOEJBRUVRZEd0QkVIVWhDeUFCSVFJRFFDQUtJQUlnQTJwQkFYUWlCRUVCZENBQWFpSUpMZ0VBSWcxc1FRRnFJQVJCQVhKQkFYUWdBR29pRGk0QkFDSVBJQXRzYTBFQmRTRUVJQUpCQVhRaUJVRUJkQ0FBYWlJUUxnRUFRUTUwSVF3Z0JVRUJja0VCZENBQWFpSVJMZ0VBUVE1MElRVWdDU0FNUVlDQUFXb2dCR3RCRDNZN0FRQWdEaUFGUVlDQUFTQUxJQTFzUVFGcUlBb2dEMnhxUVFGMUlnbHJha0VQZGpzQkFDQVFJQXhCZ0lBQmFpQUVha0VQZGpzQkFDQVJJQWxCZ0lBQmFpQUZha0VQZGpzQkFDQUNJQWhxSWdJZ0JrZ05BQXNMSUFNZ0FVRUJhaUlCUncwQUN3c2dCMEYvYWlFSElBZ2dCa2dFZnlBSUlRTU1BUVZCQUFzTEJTQUJSUVJBUVFBUEMwRUpJUWRCQVNFREEzOGdBMEVCZENFSUlBTkJBRW9FUUVFQUlRRURRQ0FCSUFkMElRSWdBU0FHU0FSQUlBSkJBWFJCd0ExcUxnRUFJUXBCQUNBQ1FRRjBRY0FKYWk4QkFFRVFkR3RCRUhVaEN5QUJJUUlEUUNBS0lBSWdBMnBCQVhRaUJFRUJkQ0FBYWlJSkxnRUFJZzFzSUFzZ0JFRUJja0VCZENBQWFpSU9MZ0VBSWc5c2EwRVBkU0VFSUFKQkFYUWlCVUVCZENBQWFpSVFMZ0VBSVF3Z0JVRUJja0VCZENBQWFpSVJMZ0VBSVFVZ0NTQU1JQVJyUVFGMk93RUFJQTRnQlNBS0lBOXNJQXNnRFd4cVFROTFJZ2xyUVFGMk93RUFJQkFnQkNBTWFrRUJkanNCQUNBUklBVWdDV3BCQVhZN0FRQWdBaUFJYWlJQ0lBWklEUUFMQ3lBRElBRkJBV29pQVVjTkFBc0xJQWRCZjJvaEJ5QUlJQVpJQkg4Z0NDRUREQUVGUVFBTEN3c0x0UVVCRkg5QkFTQUJkQ0lGUVlBSVNnUkFRWDhQQ3lBRlFRRk1CRUJCQUE4TElBVkJBWFFoRkNBQ1JTRVZRUWtoRFVFQklRWkJBQ0VQQTBBZ0FDQVVFRU1pQWtFUWRFRVFkVUdGNmdCS0lRRWdBa0VRZEVFUWRVR0sxQUZLSWdJZ0FTQVBhbW9oRDBFQ1FRRWdBUnNnQVNBQ0d5RURRWUNBQVVHQXdBQWdBUnNnQW5RaEJ5QUdRUUYwSVE0Z0JrRUFTaUVCSUJVRVFDQUJCRUJCQUNFQkEwQWdBU0FOZENFQ0lBRWdCVWdFUUNBQ1FRRjBRY0FOYWk0QkFDRUhJQUpCQVhSQndBbHFMZ0VBSVFzZ0FTRUNBMEFnQnlBQ0lBWnFRUUYwSWdoQkFYUWdBR29pQkM0QkFDSU1iQ0FMSUFoQkFYSkJBWFFnQUdvaUVDNEJBQ0lSYkd0QkQzVWhDQ0FDUVFGMElnbEJBWFFnQUdvaUVpNEJBQ0VLSUFsQkFYSkJBWFFnQUdvaUV5NEJBQ0VKSUFRZ0NpQUlheUFEZFRzQkFDQVFJQWtnQnlBUmJDQUxJQXhzYWtFUGRTSUVheUFEZFRzQkFDQVNJQWdnQ21vZ0EzVTdBUUFnRXlBRUlBbHFJQU4xT3dFQUlBSWdEbW9pQWlBRlNBMEFDd3NnQmlBQlFRRnFJZ0ZIRFFBTEN3VWdBUVJBSUFOQkRtb2hBMEVBSVFFRFFDQUJJQTEwSVFJZ0FTQUZTQVJBSUFKQkFYUkJ3QTFxTGdFQUlRc2dBa0VCZEVIQUNXb3VBUUFoQ0NBQklRSURRQ0FMSUFJZ0JtcEJBWFFpQ2tFQmRDQUFhaUlNTGdFQUloQnNRUUZxSUFnZ0NrRUJja0VCZENBQWFpSVJMZ0VBSWhKc2EwRUJkU0VLSUFKQkFYUWlCRUVCZENBQWFpSVRMZ0VBUVE1MElRa2dCRUVCY2tFQmRDQUFhaUlXTGdFQVFRNTBJUVFnRENBSElBbHFJQXBySUFOMU93RUFJQkVnQkNBSElBZ2dFR3hCQVdvZ0N5QVNiR3BCQVhVaURHdHFJQU4xT3dFQUlCTWdCeUFKYWlBS2FpQURkVHNCQUNBV0lBY2dER29nQkdvZ0EzVTdBUUFnQWlBT2FpSUNJQVZJRFFBTEN5QUdJQUZCQVdvaUFVY05BQXNMQ3lBTlFYOXFJUTBnRGlBRlNBUkFJQTRoQmd3QkN3c2dEd3U0QVFFRmZ5QUVRUkIwUVJCMUlRY2dCRUVRZEVFUWRVRUFUQVJBRHdzZ0EwRVFkRUVRZFNFSUlBTkJFSFJCRUhWQkFFb2hDU0FHUVJCMFFSQjFJUVlnQlVFUWRFRVFkU0VLUVFBaEJBTkFJQUJCQURZQ0FDQUpCRUFnQkNBR2JDRUxJQUFvQWdBaEJVRUFJUU1EUUNBRklBTWdDMnBCQVhRZ0Ftb3VBUUFnQTBFQmRDQUJhaTRCQUd3Z0NuVnFJUVVnQTBFQmFpSURJQWhIRFFBTElBQWdCVFlDQUFzZ0FFRUVhaUVBSUFSQkFXb2lCQ0FIUncwQUN3dUFBZ0VHZnlBQlFYbHFRUUpKQkVCQndCbEJvQjBnQVVFSVJpSUJHeUVDUWZBQlFmQUFJQUViSVFSQkFDRUJBMEFnQVVFQmRDQUNhaTRCQUVFQ2RDQUFhaUlES0FJQUlRVWdBeUFCUVFGeVFRRjBJQUpxTGdFQVFRSjBJQUJxSWdNb0FnQTJBZ0FnQXlBRk5nSUFJQUZCQW1vaUFTQUVTUTBBQ3c4TFFRRWdBWFFpQTBGL2FpRUdJQU5CQVV3RVFBOExRUUVoQWtFQUlRUURRQ0FHSUFScklRVWdBeUVCQTBBZ0FVRUJkU0lCSUFWS0RRQUxJQUpCQW5RZ0FHb2hCU0FFSUFGQmYycHhJQUZxSWdSQkFuUWdBR29oQVNBRUlBSktCRUFnQlNnQ0FDRUhJQVVnQVNnQ0FEWUNBQ0FCSUFjMkFnQUxJQU1nQWtFQmFpSUNSdzBBQ3d0aEFRTi9JQUJGSUFGQkFVaHlCRUJCZnc4TFFRQWhCRUVBSVFJRFFDQUVRUUYwSUFCcUxnRUFJZ05CQUNBRGF5QURRWDlLR3lJRElBSWdBeUFDU2hzaEFpQUVRUUZxSWdRZ0FVY05BQXNnQWtILy93RWdBa0gvL3dGSUcwSC8vd054QzJBQkEzOGdBRVVnQVVFQlNISUVRRUYvRHd0QkFDRUVRUUFoQWdOQUlBUkJBblFnQUdvb0FnQWlBMEVBSUFOcklBTkJmMG9iSWdNZ0FpQURJQUpMR3lFQ0lBUkJBV29pQkNBQlJ3MEFDeUFDUWYvLy8vOEhJQUpCLy8vLy93ZEpHd3RRQVFOL0lBQkJBRWNnQVVFQVNuRkZCRUJCZ0lCK0R3dEJBQ0VEUVlDQWZpRUNBMEFnQTBFQmRDQUFhaTRCQUNJRUlBSWdCQ0FDUVJCMFFSQjFTaHNoQWlBRFFRRnFJZ01nQVVjTkFBc2dBZ3RPQVFOL0lBQkJBRWNnQVVFQVNuRkZCRUJCZ0lDQWdIZ1BDMEVBSVFOQmdJQ0FnSGdoQWdOQUlBTkJBblFnQUdvb0FnQWlCQ0FDSUFRZ0Frb2JJUUlnQTBFQmFpSURJQUZIRFFBTElBSUxVQUVEZnlBQVFRQkhJQUZCQUVweFJRUkFRZi8vQVE4TFFRQWhBMEgvL3dFaEFnTkFJQU5CQVhRZ0FHb3VBUUFpQkNBQ0lBUWdBa0VRZEVFUWRVZ2JJUUlnQTBFQmFpSURJQUZIRFFBTElBSUxUZ0VEZnlBQVFRQkhJQUZCQUVweFJRUkFRZi8vLy84SER3dEJBQ0VEUWYvLy8vOEhJUUlEUUNBRFFRSjBJQUJxS0FJQUlnUWdBaUFFSUFKSUd5RUNJQU5CQVdvaUF5QUJSdzBBQ3lBQ0N5NEJBWDhqQWlFQkl3SkJFR29rQWlBQklBQkJQR29vQWdBUVRqWUNBRUVHSUFFUUJoQk1JUUFnQVNRQ0lBQUxtQU1CQzM4akFpRUhJd0pCTUdva0FpQUhRU0JxSVFVZ0J5SURJQUJCSEdvaUNpZ0NBQ0lFTmdJQUlBTkJCR29nQUVFVWFpSUxLQUlBSUFScklnUTJBZ0FnQTBFSWFpQUJOZ0lBSUFOQkRHb2dBallDQUNBRFFSQnFJZ0VnQUVFOGFpSU1LQUlBTmdJQUlBRkJCR29nQXpZQ0FDQUJRUWhxUVFJMkFnQUNRQUpBSUFJZ0JHb2lCRUdTQVNBQkVBUVFUQ0lCUmcwQVFRSWhDQU5BSUFGQkFFNEVRQ0FEUVFocUlBTWdBU0FEUVFScUtBSUFJZ2xMSWdZYklnTWdBU0FKUVFBZ0JodHJJZ2tnQXlnQ0FHbzJBZ0FnQTBFRWFpSU5JQTBvQWdBZ0NXczJBZ0FnQlNBTUtBSUFOZ0lBSUFWQkJHb2dBellDQUNBRlFRaHFJQVpCSDNSQkgzVWdDR29pQ0RZQ0FFR1NBU0FGRUFRUVRDSUdJQVFnQVdzaUJFWU5BaUFHSVFFTUFRc0xJQUJCRUdwQkFEWUNBQ0FLUVFBMkFnQWdDMEVBTmdJQUlBQWdBQ2dDQUVFZ2NqWUNBQ0FJUVFKR0JIOUJBQVVnQWlBRFFRUnFLQUlBYXdzaEFnd0JDeUFBUVJCcUlBQkJMR29vQWdBaUFTQUFRVEJxS0FJQWFqWUNBQ0FLSUFFMkFnQWdDeUFCTmdJQUN5QUhKQUlnQWd0MEFRSi9Jd0loQkNNQ1FTQnFKQUlnQkVFSWFpSURJQUJCUEdvb0FnQTJBZ0FnQTBFRWFpQUJRaUNJUGdJQUlBTkJDR29nQVQ0Q0FDQURRUXhxSUFRaUFEWUNBQ0FEUVJCcUlBSTJBZ0JCakFFZ0F4QURFRXhCQUVnRWZpQUFRbjgzQXdCQ2Z3VWdBQ2tEQUFzaEFTQUVKQUlnQVFzYkFDQUFRWUJnU3dSQUVFMUJBQ0FBYXpZQ0FFRi9JUUFMSUFBTEJRQkIrQ3NMQkFBZ0FBdDJBUU4vSXdJaEJDTUNRU0JxSkFJZ0JDSURRUkJxSVFVZ0FFRWtha0VFTmdJQUlBQW9BZ0JCd0FCeFJRUkFJQU1nQUVFOGFpZ0NBRFlDQUNBRFFRUnFRWk9vQVRZQ0FDQURRUWhxSUFVMkFnQkJOaUFERUFVRVFDQUFRY3NBYWtGL09nQUFDd3NnQUNBQklBSVFTaUVBSUFRa0FpQUFDd1FBUVFFTEF3QUJDNFVDQVFSL0FrQUNRQ0FDUVJCcUlnUW9BZ0FpQXcwQUlBSVFVd1IvUVFBRklBUW9BZ0FoQXd3QkN5RUNEQUVMSUFKQkZHb2lCaWdDQUNJRklRUWdBeUFGYXlBQlNRUkFJQUpCSkdvb0FnQWhBeUFDSUFBZ0FTQURRUWR4UVF4cUVRQUFJUUlNQVFzZ0FVVWdBa0hMQUdvc0FBQkJBRWh5Qkg5QkFBVUNmeUFCSVFNRFFDQUFJQU5CZjJvaUJXb3NBQUJCQ2tjRVFDQUZCRUFnQlNFRERBSUZRUUFNQXdzQUN3c2dBa0VrYWlnQ0FDRUVJQUlnQUNBRElBUkJCM0ZCREdvUkFBQWlBaUFEU1EwQ0lBWW9BZ0FoQkNBQklBTnJJUUVnQUNBRGFpRUFJQU1MQ3lFQ0lBUWdBQ0FCRUZ3YUlBWWdCaWdDQUNBQmFqWUNBQ0FCSUFKcUlRSUxJQUlMZmdFQ2Z5QUFRY29BYWlJQ0xBQUFJUUVnQWlBQklBRkIvd0ZxY2pvQUFDQUFLQUlBSWdGQkNIRUVmeUFBSUFGQklISTJBZ0JCZndVZ0FFRUlha0VBTmdJQUlBQkJCR3BCQURZQ0FDQUFRUnhxSUFCQkxHb29BZ0FpQVRZQ0FDQUFRUlJxSUFFMkFnQWdBRUVRYWlBQklBQkJNR29vQWdCcU5nSUFRUUFMQzQ0QkFRTi9Ba0FDUUNBQUlnSkJBM0ZGRFFBZ0FpRUJBMEFDUUNBQUxBQUFSUVJBSUFFaEFBd0JDeUFBUVFGcUlnQWlBVUVEY1EwQkRBSUxDd3dCQ3dOQUlBQkJCR29oQVNBQUtBSUFJZ05CZ0lHQ2hIaHhRWUNCZ29SNGN5QURRZi85KzNkcWNVVUVRQ0FCSVFBTUFRc0xJQU5CL3dGeEJFQURRQ0FBUVFGcUlnQXNBQUFOQUFzTEN5QUFJQUpyQ3hzQkFYOGdBQkJVSWdJZ0FFRUJJQUlnQVJCV1IwRWZkRUVmZFF0YUFRSi9JQUVnQW13aEJDQUNRUUFnQVJzaEFpQURRY3dBYWlnQ0FFRi9TZ1JBSUFNUVVFVWhCU0FBSUFRZ0F4QlNJUUFnQlVVRVFDQURFRkVMQlNBQUlBUWdBeEJTSVFBTElBQWdCRWNFUUNBQUlBRnVJUUlMSUFJTHRBRUJCbjhqQWlFREl3SkJFR29rQWlBRElnUWdBVUgvQVhFaUJ6b0FBQUpBQWtBZ0FFRVFhaUlDS0FJQUlnVU5BQ0FBRUZNRWYwRi9CU0FDS0FJQUlRVU1BUXNoQVF3QkN5QUFRUlJxSWdJb0FnQWlCaUFGU1FSQUlBRkIvd0Z4SWdFZ0FFSExBR29zQUFCSEJFQWdBaUFHUVFGcU5nSUFJQVlnQnpvQUFBd0NDd3NnQUVFa2FpZ0NBQ0VCSUFBZ0JFRUJJQUZCQjNGQkRHb1JBQUJCQVVZRWZ5QUVMUUFBQlVGL0N5RUJDeUFESkFJZ0FRdUdBUUVEZjBHUUlDZ0NBQ0lCUWN3QWFpZ0NBRUYvU2dSL0lBRVFVQVZCQUFzaEFpQUFJQUVRVlVFQVNBUi9RWDhGQW44Z0FVSExBR29zQUFCQkNrY0VRQ0FCUVJScUlnTW9BZ0FpQUNBQlFSQnFLQUlBU1FSQUlBTWdBRUVCYWpZQ0FDQUFRUW82QUFCQkFBd0NDd3NnQVVFS0VGZEJIM1VMQ3lFQUlBSUVRQ0FCRUZFTElBQUw0VGdCREg4akFpRUtJd0pCRUdva0FpQUtJUWtnQUVIMUFVa0VmMEg4S3lnQ0FDSURRUkFnQUVFTGFrRjRjU0FBUVF0Skd5SUNRUU4ySWdCMklnRkJBM0VFUUNBQlFRRnhRUUZ6SUFCcUlnQkJBM1JCcEN4cUlnRkJDR29pQmlnQ0FDSUNRUWhxSWdVb0FnQWlCQ0FCUmdSQVFmd3JJQU5CQVNBQWRFRi9jM0UyQWdBRklBUkJER29nQVRZQ0FDQUdJQVEyQWdBTElBSkJCR29nQUVFRGRDSUFRUU55TmdJQUlBQWdBbXBCQkdvaUFDQUFLQUlBUVFGeU5nSUFJQW9rQWlBRkR3c2dBa0dFTENnQ0FDSUhTd1IvSUFFRVFFRUNJQUIwSWdSQkFDQUVhM0lnQVNBQWRIRWlBRUVBSUFCcmNVRi9haUlBUVF4MlFSQnhJZ0VnQUNBQmRpSUFRUVYyUVFoeElnRnlJQUFnQVhZaUFFRUNka0VFY1NJQmNpQUFJQUYySWdCQkFYWkJBbkVpQVhJZ0FDQUJkaUlBUVFGMlFRRnhJZ0Z5SUFBZ0FYWnFJZ1JCQTNSQnBDeHFJZ0JCQ0dvaUJTZ0NBQ0lCUVFocUlnZ29BZ0FpQmlBQVJnUkFRZndySUFOQkFTQUVkRUYvYzNFaUFEWUNBQVVnQmtFTWFpQUFOZ0lBSUFVZ0JqWUNBQ0FESVFBTElBRkJCR29nQWtFRGNqWUNBQ0FCSUFKcUlnWkJCR29nQkVFRGRDSUVJQUpySWdOQkFYSTJBZ0FnQVNBRWFpQUROZ0lBSUFjRVFFR1FMQ2dDQUNFQ0lBZEJBM1lpQkVFRGRFR2tMR29oQVNBQVFRRWdCSFFpQkhFRWZ5QUJRUWhxSWdBaEJDQUFLQUlBQlVIOEt5QUFJQVJ5TmdJQUlBRkJDR29oQkNBQkN5RUFJQVFnQWpZQ0FDQUFRUXhxSUFJMkFnQWdBa0VJYWlBQU5nSUFJQUpCREdvZ0FUWUNBQXRCaEN3Z0F6WUNBRUdRTENBR05nSUFJQW9rQWlBSUR3dEJnQ3dvQWdBaUN3Ui9JQXRCQUNBTGEzRkJmMm9pQUVFTWRrRVFjU0lCSUFBZ0FYWWlBRUVGZGtFSWNTSUJjaUFBSUFGMklnQkJBblpCQkhFaUFYSWdBQ0FCZGlJQVFRRjJRUUp4SWdGeUlBQWdBWFlpQUVFQmRrRUJjU0lCY2lBQUlBRjJha0VDZEVHc0xtb29BZ0FpQUVFRWFpZ0NBRUY0Y1NBQ2F5RUlJQUFoQlFOQUFrQWdBRUVRYWlnQ0FDSUJCRUFnQVNFQUJTQUFRUlJxS0FJQUlnQkZEUUVMSUFCQkJHb29BZ0JCZUhFZ0Ftc2lCQ0FJU1NFQklBUWdDQ0FCR3lFSUlBQWdCU0FCR3lFRkRBRUxDeUFDSUFWcUlnd2dCVXNFZnlBRlFSaHFLQUlBSVFrZ0JVRU1haWdDQUNJQUlBVkdCRUFDUUNBRlFSUnFJZ0VvQWdBaUFFVUVRQ0FGUVJCcUlnRW9BZ0FpQUVVRVFFRUFJUUFNQWdzTEEwQUNRQ0FBUVJScUlnUW9BZ0FpQmdSL0lBUWhBU0FHQlNBQVFSQnFJZ1FvQWdBaUJrVU5BU0FFSVFFZ0Jnc2hBQXdCQ3dzZ0FVRUFOZ0lBQ3dVZ0JVRUlhaWdDQUNJQlFReHFJQUEyQWdBZ0FFRUlhaUFCTmdJQUN5QUpCRUFDUUNBRlFSeHFLQUlBSWdGQkFuUkJyQzVxSWdRb0FnQWdCVVlFUUNBRUlBQTJBZ0FnQUVVRVFFR0FMQ0FMUVFFZ0FYUkJmM054TmdJQURBSUxCU0FKUVJCcUlnRWdDVUVVYWlBQktBSUFJQVZHR3lBQU5nSUFJQUJGRFFFTElBQkJHR29nQ1RZQ0FDQUZRUkJxS0FJQUlnRUVRQ0FBUVJCcUlBRTJBZ0FnQVVFWWFpQUFOZ0lBQ3lBRlFSUnFLQUlBSWdFRVFDQUFRUlJxSUFFMkFnQWdBVUVZYWlBQU5nSUFDd3NMSUFoQkVFa0VRQ0FGUVFScUlBSWdDR29pQUVFRGNqWUNBQ0FBSUFWcVFRUnFJZ0FnQUNnQ0FFRUJjallDQUFVZ0JVRUVhaUFDUVFOeU5nSUFJQXhCQkdvZ0NFRUJjallDQUNBSUlBeHFJQWcyQWdBZ0J3UkFRWkFzS0FJQUlRSWdCMEVEZGlJQlFRTjBRYVFzYWlFQUlBTkJBU0FCZENJQmNRUi9JQUJCQ0dvaUFTRURJQUVvQWdBRlFmd3JJQUVnQTNJMkFnQWdBRUVJYWlFRElBQUxJUUVnQXlBQ05nSUFJQUZCREdvZ0FqWUNBQ0FDUVFocUlBRTJBZ0FnQWtFTWFpQUFOZ0lBQzBHRUxDQUlOZ0lBUVpBc0lBdzJBZ0FMSUFva0FpQUZRUWhxRHdVZ0Fnc0ZJQUlMQlNBQ0N3VWdBRUcvZjBzRWYwRi9CUUovSUFCQkMyb2lBRUY0Y1NFQlFZQXNLQUlBSWdRRWYwRUFJQUZySVFJQ2Z3SkFJQUJCQ0hZaUFBUi9JQUZCLy8vL0Iwc0VmMEVmQlNBQUlBQkJnUDQvYWtFUWRrRUljU0lHZENJRFFZRGdIMnBCRUhaQkJIRWhBQ0FESUFCMElnVkJnSUFQYWtFUWRrRUNjU0VESUFGQkRpQUFJQVp5SUFOeWF5QUZJQU4wUVE5MmFpSUFRUWRxZGtFQmNTQUFRUUYwY2dzRlFRQUxJZ2RCQW5SQnJDNXFLQUlBSWdBRVFFRUFJUVVnQVVFQVFSa2dCMEVCZG1zZ0IwRWZSaHQwSVFaQkFDRURBMEFnQUVFRWFpZ0NBRUY0Y1NBQmF5SUlJQUpKQkVBZ0NBUi9JQUFoQXlBSUJVRUFJUU1nQUNFQ0RBUUxJUUlMSUFVZ0FFRVVhaWdDQUNJRklBVkZJQVVnQUVFUWFpQUdRUjkyUVFKMGFpZ0NBQ0lJUm5JYklRQWdCa0VCZENFR0lBZ0VRQ0FBSVFVZ0NDRUFEQUVMQ3dWQkFDRUFRUUFoQXdzZ0FDQURjZ1IvSUFBaEJpQURCU0FCSUFSQkFpQUhkQ0lBUVFBZ0FHdHljU0lBUlEwRUdpQUFRUUFnQUd0eFFYOXFJZ0JCREhaQkVIRWlBeUFBSUFOMklnQkJCWFpCQ0hFaUEzSWdBQ0FEZGlJQVFRSjJRUVJ4SWdOeUlBQWdBM1lpQUVFQmRrRUNjU0lEY2lBQUlBTjJJZ0JCQVhaQkFYRWlBM0lnQUNBRGRtcEJBblJCckM1cUtBSUFJUVpCQUFzaEFDQUdCSDhnQWlFRElBWWhBZ3dCQlNBQ0lRWWdBQXNNQVFzRGZ5QUNRUVJxS0FJQVFYaHhJQUZySWdVZ0Ewa2hCaUFGSUFNZ0Joc2hBeUFDSUFBZ0Joc2hBQ0FDUVJCcUtBSUFJZ1lFZnlBR0JTQUNRUlJxS0FJQUN5SUNEUUFnQXlFR0lBQUxDeUlEQkg4Z0JrR0VMQ2dDQUNBQmEwa0VmeUFCSUFOcUlnY2dBMHNFZnlBRFFSaHFLQUlBSVFrZ0EwRU1haWdDQUNJQUlBTkdCRUFDUUNBRFFSUnFJZ0lvQWdBaUFFVUVRQ0FEUVJCcUlnSW9BZ0FpQUVVRVFFRUFJUUFNQWdzTEEwQUNRQ0FBUVJScUlnVW9BZ0FpQ0FSL0lBVWhBaUFJQlNBQVFSQnFJZ1VvQWdBaUNFVU5BU0FGSVFJZ0NBc2hBQXdCQ3dzZ0FrRUFOZ0lBQ3dVZ0EwRUlhaWdDQUNJQ1FReHFJQUEyQWdBZ0FFRUlhaUFDTmdJQUN5QUpCRUFDUUNBRFFSeHFLQUlBSWdKQkFuUkJyQzVxSWdVb0FnQWdBMFlFUUNBRklBQTJBZ0FnQUVVRVFFR0FMQ0FFUVFFZ0FuUkJmM054SWdBMkFnQU1BZ3NGSUFsQkVHb2lBaUFKUVJScUlBSW9BZ0FnQTBZYklBQTJBZ0FnQUVVRVFDQUVJUUFNQWdzTElBQkJHR29nQ1RZQ0FDQURRUkJxS0FJQUlnSUVRQ0FBUVJCcUlBSTJBZ0FnQWtFWWFpQUFOZ0lBQ3lBRFFSUnFLQUlBSWdJRWZ5QUFRUlJxSUFJMkFnQWdBa0VZYWlBQU5nSUFJQVFGSUFRTElRQUxCU0FFSVFBTElBWkJFRWtFUUNBRFFRUnFJQUVnQm1vaUFFRURjallDQUNBQUlBTnFRUVJxSWdBZ0FDZ0NBRUVCY2pZQ0FBVUNRQ0FEUVFScUlBRkJBM0kyQWdBZ0IwRUVhaUFHUVFGeU5nSUFJQVlnQjJvZ0JqWUNBQ0FHUVFOMklRRWdCa0dBQWtrRVFDQUJRUU4wUWFRc2FpRUFRZndyS0FJQUlnSkJBU0FCZENJQmNRUi9JQUJCQ0dvaUFTRUNJQUVvQWdBRlFmd3JJQUVnQW5JMkFnQWdBRUVJYWlFQ0lBQUxJUUVnQWlBSE5nSUFJQUZCREdvZ0J6WUNBQ0FIUVFocUlBRTJBZ0FnQjBFTWFpQUFOZ0lBREFFTElBWkJDSFlpQVFSL0lBWkIvLy8vQjBzRWYwRWZCU0FCSUFGQmdQNC9ha0VRZGtFSWNTSUVkQ0lDUVlEZ0gycEJFSFpCQkhFaEFTQUNJQUYwSWdWQmdJQVBha0VRZGtFQ2NTRUNJQVpCRGlBQklBUnlJQUp5YXlBRklBSjBRUTkyYWlJQlFRZHFka0VCY1NBQlFRRjBjZ3NGUVFBTElnRkJBblJCckM1cUlRSWdCMEVjYWlBQk5nSUFJQWRCRUdvaUJFRUVha0VBTmdJQUlBUkJBRFlDQUNBQVFRRWdBWFFpQkhGRkJFQkJnQ3dnQUNBRWNqWUNBQ0FDSUFjMkFnQWdCMEVZYWlBQ05nSUFJQWRCREdvZ0J6WUNBQ0FIUVFocUlBYzJBZ0FNQVFzZ0FpZ0NBQ0lBUVFScUtBSUFRWGh4SUFaR0JFQWdBQ0VCQlFKQUlBWkJBRUVaSUFGQkFYWnJJQUZCSDBZYmRDRUNBMEFnQUVFUWFpQUNRUjkyUVFKMGFpSUVLQUlBSWdFRVFDQUNRUUYwSVFJZ0FVRUVhaWdDQUVGNGNTQUdSZzBDSUFFaEFBd0JDd3NnQkNBSE5nSUFJQWRCR0dvZ0FEWUNBQ0FIUVF4cUlBYzJBZ0FnQjBFSWFpQUhOZ0lBREFJTEN5QUJRUWhxSWdBb0FnQWlBa0VNYWlBSE5nSUFJQUFnQnpZQ0FDQUhRUWhxSUFJMkFnQWdCMEVNYWlBQk5nSUFJQWRCR0dwQkFEWUNBQXNMSUFva0FpQURRUWhxRHdVZ0FRc0ZJQUVMQlNBQkN3VWdBUXNMQ3dzaEFFR0VMQ2dDQUNJQ0lBQlBCRUJCa0N3b0FnQWhBU0FDSUFCcklnTkJEMHNFUUVHUUxDQUFJQUZxSWdRMkFnQkJoQ3dnQXpZQ0FDQUVRUVJxSUFOQkFYSTJBZ0FnQVNBQ2FpQUROZ0lBSUFGQkJHb2dBRUVEY2pZQ0FBVkJoQ3hCQURZQ0FFR1FMRUVBTmdJQUlBRkJCR29nQWtFRGNqWUNBQ0FCSUFKcVFRUnFJZ0FnQUNnQ0FFRUJjallDQUFzZ0NpUUNJQUZCQ0dvUEMwR0lMQ2dDQUNJQ0lBQkxCRUJCaUN3Z0FpQUFheUlDTmdJQVFaUXNRWlFzS0FJQUlnRWdBR29pQXpZQ0FDQURRUVJxSUFKQkFYSTJBZ0FnQVVFRWFpQUFRUU55TmdJQUlBb2tBaUFCUVFocUR3c2dBRUV3YWlFR1FkUXZLQUlBQkg5QjNDOG9BZ0FGUWR3dlFZQWdOZ0lBUWRndlFZQWdOZ0lBUWVBdlFYODJBZ0JCNUM5QmZ6WUNBRUhvTDBFQU5nSUFRYmd2UVFBMkFnQkIxQzhnQ1VGd2NVSFlxdFdxQlhNMkFnQkJnQ0FMSWdFZ0FFRXZhaUlGYWlJSVFRQWdBV3NpQ1hFaUJDQUFUUVJBSUFva0FrRUFEd3RCdEM4b0FnQWlBUVJBUWF3dktBSUFJZ01nQkdvaUJ5QURUU0FISUFGTGNnUkFJQW9rQWtFQUR3c0xBa0FDUUVHNEx5Z0NBRUVFY1FSQVFRQWhBZ1VDUUFKQUFrQkJsQ3dvQWdBaUFVVU5BRUc4THlFREEwQUNRQ0FES0FJQUlnY2dBVTBFUUNBSElBTkJCR29vQWdCcUlBRkxEUUVMSUFOQkNHb29BZ0FpQXcwQkRBSUxDeUFJSUFKcklBbHhJZ0pCLy8vLy93ZEpCRUFnQWhCZUlRRWdBU0FES0FJQUlBTkJCR29vQWdCcVJ3MENJQUZCZjBjTkJRVkJBQ0VDQ3d3Q0MwRUFFRjRpQVVGL1JnUi9RUUFGUWF3dktBSUFJZ2dnQVVIWUx5Z0NBQ0lDUVg5cUlnTnFRUUFnQW10eElBRnJRUUFnQVNBRGNSc2dCR29pQW1vaEF5QUNRZi8vLy84SFNTQUNJQUJMY1FSL1FiUXZLQUlBSWdrRVFDQURJQWhOSUFNZ0NVdHlCRUJCQUNFQ0RBVUxDeUFCSUFJUVhpSURSZzBGSUFNaEFRd0NCVUVBQ3dzaEFnd0JDMEVBSUFKcklRZ2dBVUYvUnlBQ1FmLy8vLzhIU1hFZ0JpQUNTM0ZGQkVBZ0FVRi9SZ1JBUVFBaEFnd0NCUXdFQ3dBTFFkd3ZLQUlBSWdNZ0JTQUNhMnBCQUNBRGEzRWlBMEgvLy8vL0IwOE5BaUFERUY1QmYwWUVmeUFJRUY0YVFRQUZJQUlnQTJvaEFnd0RDeUVDQzBHNEwwRzRMeWdDQUVFRWNqWUNBQXNnQkVILy8vLy9CMGtFUUNBRUVGNGhBVUVBRUY0aUF5QUJheUlHSUFCQktHcExJUVFnQmlBQ0lBUWJJUUlnQkVFQmN5QUJRWDlHY2lBQlFYOUhJQU5CZjBkeElBRWdBMGx4UVFGemNrVU5BUXNNQVF0QnJDOUJyQzhvQWdBZ0Ftb2lBellDQUNBRFFiQXZLQUlBU3dSQVFiQXZJQU0yQWdBTFFaUXNLQUlBSWdRRVFBSkFRYnd2SVFNQ1FBSkFBMEFnQXlnQ0FDSUdJQU5CQkdvb0FnQWlCV29nQVVZTkFTQURRUWhxS0FJQUlnTU5BQXNNQVFzZ0EwRUVhaUVJSUFOQkRHb29BZ0JCQ0hGRkJFQWdCaUFFVFNBQklBUkxjUVJBSUFnZ0FpQUZhallDQUNBRVFRQWdCRUVJYWlJQmEwRUhjVUVBSUFGQkIzRWJJZ05xSVFGQmlDd29BZ0FnQW1vaUJpQURheUVDUVpRc0lBRTJBZ0JCaUN3Z0FqWUNBQ0FCUVFScUlBSkJBWEkyQWdBZ0JDQUdha0VFYWtFb05nSUFRWmdzUWVRdktBSUFOZ0lBREFNTEN3c2dBVUdNTENnQ0FFa0VRRUdNTENBQk5nSUFDeUFCSUFKcUlRWkJ2QzhoQXdKQUFrQURRQ0FES0FJQUlBWkdEUUVnQTBFSWFpZ0NBQ0lERFFBTERBRUxJQU5CREdvb0FnQkJDSEZGQkVBZ0F5QUJOZ0lBSUFOQkJHb2lBeUFES0FJQUlBSnFOZ0lBUVFBZ0FVRUlhaUlDYTBFSGNVRUFJQUpCQjNFYklBRnFJZ2tnQUdvaEJTQUdRUUFnQmtFSWFpSUJhMEVIY1VFQUlBRkJCM0ViYWlJQ0lBbHJJQUJySVFNZ0NVRUVhaUFBUVFOeU5nSUFJQUlnQkVZRVFFR0lMRUdJTENnQ0FDQURhaUlBTmdJQVFaUXNJQVUyQWdBZ0JVRUVhaUFBUVFGeU5nSUFCUUpBUVpBc0tBSUFJQUpHQkVCQmhDeEJoQ3dvQWdBZ0Eyb2lBRFlDQUVHUUxDQUZOZ0lBSUFWQkJHb2dBRUVCY2pZQ0FDQUFJQVZxSUFBMkFnQU1BUXNnQWtFRWFpZ0NBQ0lBUVFOeFFRRkdCRUFnQUVGNGNTRUhJQUJCQTNZaEJDQUFRWUFDU1FSQUlBSkJDR29vQWdBaUFDQUNRUXhxS0FJQUlnRkdCRUJCL0N0Qi9Dc29BZ0JCQVNBRWRFRi9jM0UyQWdBRklBQkJER29nQVRZQ0FDQUJRUWhxSUFBMkFnQUxCUUpBSUFKQkdHb29BZ0FoQ0NBQ1FReHFLQUlBSWdBZ0FrWUVRQUpBSUFKQkVHb2lBVUVFYWlJRUtBSUFJZ0FFUUNBRUlRRUZJQUVvQWdBaUFFVUVRRUVBSVFBTUFnc0xBMEFDUUNBQVFSUnFJZ1FvQWdBaUJnUi9JQVFoQVNBR0JTQUFRUkJxSWdRb0FnQWlCa1VOQVNBRUlRRWdCZ3NoQUF3QkN3c2dBVUVBTmdJQUN3VWdBa0VJYWlnQ0FDSUJRUXhxSUFBMkFnQWdBRUVJYWlBQk5nSUFDeUFJUlEwQUlBSkJIR29vQWdBaUFVRUNkRUdzTG1vaUJDZ0NBQ0FDUmdSQUFrQWdCQ0FBTmdJQUlBQU5BRUdBTEVHQUxDZ0NBRUVCSUFGMFFYOXpjVFlDQUF3Q0N3VWdDRUVRYWlJQklBaEJGR29nQVNnQ0FDQUNSaHNnQURZQ0FDQUFSUTBCQ3lBQVFSaHFJQWcyQWdBZ0FrRVFhaUlFS0FJQUlnRUVRQ0FBUVJCcUlBRTJBZ0FnQVVFWWFpQUFOZ0lBQ3lBRVFRUnFLQUlBSWdGRkRRQWdBRUVVYWlBQk5nSUFJQUZCR0dvZ0FEWUNBQXNMSUFJZ0Iyb2hBaUFESUFkcUlRTUxJQUpCQkdvaUFDQUFLQUlBUVg1eE5nSUFJQVZCQkdvZ0EwRUJjallDQUNBRElBVnFJQU0yQWdBZ0EwRURkaUVCSUFOQmdBSkpCRUFnQVVFRGRFR2tMR29oQUVIOEt5Z0NBQ0lDUVFFZ0FYUWlBWEVFZnlBQVFRaHFJZ0VoQWlBQktBSUFCVUg4S3lBQklBSnlOZ0lBSUFCQkNHb2hBaUFBQ3lFQklBSWdCVFlDQUNBQlFReHFJQVUyQWdBZ0JVRUlhaUFCTmdJQUlBVkJER29nQURZQ0FBd0JDeUFEUVFoMklnQUVmeUFEUWYvLy93ZExCSDlCSHdVZ0FDQUFRWUQrUDJwQkVIWkJDSEVpQW5RaUFVR0E0QjlxUVJCMlFRUnhJUUFnQVNBQWRDSUVRWUNBRDJwQkVIWkJBbkVoQVNBRFFRNGdBQ0FDY2lBQmNtc2dCQ0FCZEVFUGRtb2lBRUVIYW5aQkFYRWdBRUVCZEhJTEJVRUFDeUlCUVFKMFFhd3VhaUVBSUFWQkhHb2dBVFlDQUNBRlFSQnFJZ0pCQkdwQkFEWUNBQ0FDUVFBMkFnQkJnQ3dvQWdBaUFrRUJJQUYwSWdSeFJRUkFRWUFzSUFJZ0JISTJBZ0FnQUNBRk5nSUFJQVZCR0dvZ0FEWUNBQ0FGUVF4cUlBVTJBZ0FnQlVFSWFpQUZOZ0lBREFFTElBQW9BZ0FpQUVFRWFpZ0NBRUY0Y1NBRFJnUkFJQUFoQVFVQ1FDQURRUUJCR1NBQlFRRjJheUFCUVI5R0czUWhBZ05BSUFCQkVHb2dBa0VmZGtFQ2RHb2lCQ2dDQUNJQkJFQWdBa0VCZENFQ0lBRkJCR29vQWdCQmVIRWdBMFlOQWlBQklRQU1BUXNMSUFRZ0JUWUNBQ0FGUVJocUlBQTJBZ0FnQlVFTWFpQUZOZ0lBSUFWQkNHb2dCVFlDQUF3Q0N3c2dBVUVJYWlJQUtBSUFJZ0pCREdvZ0JUWUNBQ0FBSUFVMkFnQWdCVUVJYWlBQ05nSUFJQVZCREdvZ0FUWUNBQ0FGUVJocVFRQTJBZ0FMQ3lBS0pBSWdDVUVJYWc4TEMwRzhMeUVEQTBBQ1FDQURLQUlBSWdZZ0JFMEVRQ0FHSUFOQkJHb29BZ0JxSWdVZ0JFc05BUXNnQTBFSWFpZ0NBQ0VEREFFTEN5QUZRVkZxSWdaQkNHb2hBeUFFSUFaQkFDQURhMEVIY1VFQUlBTkJCM0ViYWlJRElBTWdCRUVRYWlJSlNSc2lBMEVJYWlFR1FaUXNRUUFnQVVFSWFpSUlhMEVIY1VFQUlBaEJCM0ViSWdnZ0FXb2lCellDQUVHSUxDQUNRVmhxSWdzZ0NHc2lDRFlDQUNBSFFRUnFJQWhCQVhJMkFnQWdBU0FMYWtFRWFrRW9OZ0lBUVpnc1FlUXZLQUlBTmdJQUlBTkJCR29pQ0VFYk5nSUFJQVpCdkM4cEFnQTNBZ0FnQmtIRUx5a0NBRGNDQ0VHOEx5QUJOZ0lBUWNBdklBSTJBZ0JCeUM5QkFEWUNBRUhFTHlBR05nSUFJQU5CR0dvaEFRTkFJQUZCQkdvaUFrRUhOZ0lBSUFGQkNHb2dCVWtFUUNBQ0lRRU1BUXNMSUFNZ0JFY0VRQ0FJSUFnb0FnQkJmbkUyQWdBZ0JFRUVhaUFESUFScklnWkJBWEkyQWdBZ0F5QUdOZ0lBSUFaQkEzWWhBaUFHUVlBQ1NRUkFJQUpCQTNSQnBDeHFJUUZCL0Nzb0FnQWlBMEVCSUFKMElnSnhCSDhnQVVFSWFpSUNJUU1nQWlnQ0FBVkIvQ3NnQWlBRGNqWUNBQ0FCUVFocUlRTWdBUXNoQWlBRElBUTJBZ0FnQWtFTWFpQUVOZ0lBSUFSQkNHb2dBallDQUNBRVFReHFJQUUyQWdBTUFnc2dCa0VJZGlJQkJIOGdCa0gvLy84SFN3Ui9RUjhGSUFFZ0FVR0EvajlxUVJCMlFRaHhJZ04wSWdKQmdPQWZha0VRZGtFRWNTRUJJQUlnQVhRaUJVR0FnQTlxUVJCMlFRSnhJUUlnQmtFT0lBRWdBM0lnQW5KcklBVWdBblJCRDNacUlnRkJCMnAyUVFGeElBRkJBWFJ5Q3dWQkFBc2lBa0VDZEVHc0xtb2hBU0FFUVJ4cUlBSTJBZ0FnQkVFVWFrRUFOZ0lBSUFsQkFEWUNBRUdBTENnQ0FDSURRUUVnQW5RaUJYRkZCRUJCZ0N3Z0F5QUZjallDQUNBQklBUTJBZ0FnQkVFWWFpQUJOZ0lBSUFSQkRHb2dCRFlDQUNBRVFRaHFJQVEyQWdBTUFnc2dBU2dDQUNJQlFRUnFLQUlBUVhoeElBWkdCRUFnQVNFQ0JRSkFJQVpCQUVFWklBSkJBWFpySUFKQkgwWWJkQ0VEQTBBZ0FVRVFhaUFEUVI5MlFRSjBhaUlGS0FJQUlnSUVRQ0FEUVFGMElRTWdBa0VFYWlnQ0FFRjRjU0FHUmcwQ0lBSWhBUXdCQ3dzZ0JTQUVOZ0lBSUFSQkdHb2dBVFlDQUNBRVFReHFJQVEyQWdBZ0JFRUlhaUFFTmdJQURBTUxDeUFDUVFocUlnRW9BZ0FpQTBFTWFpQUVOZ0lBSUFFZ0JEWUNBQ0FFUVFocUlBTTJBZ0FnQkVFTWFpQUNOZ0lBSUFSQkdHcEJBRFlDQUFzTEJVR01MQ2dDQUNJRFJTQUJJQU5KY2dSQVFZd3NJQUUyQWdBTFFid3ZJQUUyQWdCQndDOGdBallDQUVISUwwRUFOZ0lBUWFBc1FkUXZLQUlBTmdJQVFad3NRWDgyQWdCQnNDeEJwQ3cyQWdCQnJDeEJwQ3cyQWdCQnVDeEJyQ3cyQWdCQnRDeEJyQ3cyQWdCQndDeEJ0Q3cyQWdCQnZDeEJ0Q3cyQWdCQnlDeEJ2Q3cyQWdCQnhDeEJ2Q3cyQWdCQjBDeEJ4Q3cyQWdCQnpDeEJ4Q3cyQWdCQjJDeEJ6Q3cyQWdCQjFDeEJ6Q3cyQWdCQjRDeEIxQ3cyQWdCQjNDeEIxQ3cyQWdCQjZDeEIzQ3cyQWdCQjVDeEIzQ3cyQWdCQjhDeEI1Q3cyQWdCQjdDeEI1Q3cyQWdCQitDeEI3Q3cyQWdCQjlDeEI3Q3cyQWdCQmdDMUI5Q3cyQWdCQi9DeEI5Q3cyQWdCQmlDMUIvQ3cyQWdCQmhDMUIvQ3cyQWdCQmtDMUJoQzAyQWdCQmpDMUJoQzAyQWdCQm1DMUJqQzAyQWdCQmxDMUJqQzAyQWdCQm9DMUJsQzAyQWdCQm5DMUJsQzAyQWdCQnFDMUJuQzAyQWdCQnBDMUJuQzAyQWdCQnNDMUJwQzAyQWdCQnJDMUJwQzAyQWdCQnVDMUJyQzAyQWdCQnRDMUJyQzAyQWdCQndDMUJ0QzAyQWdCQnZDMUJ0QzAyQWdCQnlDMUJ2QzAyQWdCQnhDMUJ2QzAyQWdCQjBDMUJ4QzAyQWdCQnpDMUJ4QzAyQWdCQjJDMUJ6QzAyQWdCQjFDMUJ6QzAyQWdCQjRDMUIxQzAyQWdCQjNDMUIxQzAyQWdCQjZDMUIzQzAyQWdCQjVDMUIzQzAyQWdCQjhDMUI1QzAyQWdCQjdDMUI1QzAyQWdCQitDMUI3QzAyQWdCQjlDMUI3QzAyQWdCQmdDNUI5QzAyQWdCQi9DMUI5QzAyQWdCQmlDNUIvQzAyQWdCQmhDNUIvQzAyQWdCQmtDNUJoQzQyQWdCQmpDNUJoQzQyQWdCQm1DNUJqQzQyQWdCQmxDNUJqQzQyQWdCQm9DNUJsQzQyQWdCQm5DNUJsQzQyQWdCQnFDNUJuQzQyQWdCQnBDNUJuQzQyQWdCQmxDeEJBQ0FCUVFocUlnTnJRUWR4UVFBZ0EwRUhjUnNpQXlBQmFpSUVOZ0lBUVlnc0lBSkJXR29pQWlBRGF5SUROZ0lBSUFSQkJHb2dBMEVCY2pZQ0FDQUJJQUpxUVFScVFTZzJBZ0JCbUN4QjVDOG9BZ0EyQWdBTFFZZ3NLQUlBSWdFZ0FFc0VRRUdJTENBQklBQnJJZ0kyQWdCQmxDeEJsQ3dvQWdBaUFTQUFhaUlETmdJQUlBTkJCR29nQWtFQmNqWUNBQ0FCUVFScUlBQkJBM0kyQWdBZ0NpUUNJQUZCQ0dvUEN3c1FUVUVNTmdJQUlBb2tBa0VBQzhnUEFRaC9JQUJGQkVBUEMwR01MQ2dDQUNFRUlBQkJlR29pQVNBQVFYeHFLQUlBSWdOQmVIRWlBR29oQmlBRFFRRnhCRUFnQVNFQ0JRSi9JQUVvQWdBaEFpQURRUU54UlFSQUR3c2dBQ0FDYWlFRElBRWdBbXNpQUNBRVNRUkFEd3RCa0N3b0FnQWdBRVlFUUNBR1FRUnFJZ0VvQWdBaUFrRURjVUVEUndSQUlBQWhBU0FBSVFJZ0F3d0NDMEdFTENBRE5nSUFJQUVnQWtGK2NUWUNBQ0FBUVFScUlBTkJBWEkyQWdBZ0FDQURhaUFETmdJQUR3c2dBa0VEZGlFRUlBSkJnQUpKQkVBZ0FFRUlhaWdDQUNJQklBQkJER29vQWdBaUFrWUVRRUg4SzBIOEt5Z0NBRUVCSUFSMFFYOXpjVFlDQUNBQUlRRWdBQ0VDSUFNTUFnVWdBVUVNYWlBQ05nSUFJQUpCQ0dvZ0FUWUNBQ0FBSVFFZ0FDRUNJQU1NQWdzQUN5QUFRUmhxS0FJQUlRY2dBRUVNYWlnQ0FDSUJJQUJHQkVBQ1FDQUFRUkJxSWdKQkJHb2lCQ2dDQUNJQkJFQWdCQ0VDQlNBQ0tBSUFJZ0ZGQkVCQkFDRUJEQUlMQ3dOQUFrQWdBVUVVYWlJRUtBSUFJZ1VFZnlBRUlRSWdCUVVnQVVFUWFpSUVLQUlBSWdWRkRRRWdCQ0VDSUFVTElRRU1BUXNMSUFKQkFEWUNBQXNGSUFCQkNHb29BZ0FpQWtFTWFpQUJOZ0lBSUFGQkNHb2dBallDQUFzZ0J3Ui9JQUJCSEdvb0FnQWlBa0VDZEVHc0xtb2lCQ2dDQUNBQVJnUkFJQVFnQVRZQ0FDQUJSUVJBUVlBc1FZQXNLQUlBUVFFZ0FuUkJmM054TmdJQUlBQWhBU0FBSVFJZ0F3d0RDd1VnQjBFUWFpSUNJQWRCRkdvZ0FpZ0NBQ0FBUmhzZ0FUWUNBQ0FCUlFSQUlBQWhBU0FBSVFJZ0F3d0RDd3NnQVVFWWFpQUhOZ0lBSUFCQkVHb2lCQ2dDQUNJQ0JFQWdBVUVRYWlBQ05nSUFJQUpCR0dvZ0FUWUNBQXNnQkVFRWFpZ0NBQ0lDQkg4Z0FVRVVhaUFDTmdJQUlBSkJHR29nQVRZQ0FDQUFJUUVnQUNFQ0lBTUZJQUFoQVNBQUlRSWdBd3NGSUFBaEFTQUFJUUlnQXdzTElRQUxJQUVnQms4RVFBOExJQVpCQkdvaUJDZ0NBQ0lEUVFGeFJRUkFEd3NnQTBFQ2NRUi9JQVFnQTBGK2NUWUNBQ0FDUVFScUlBQkJBWEkyQWdBZ0FDQUJhaUFBTmdJQUlBQUZRWlFzS0FJQUlBWkdCRUJCaUN4QmlDd29BZ0FnQUdvaUFEWUNBRUdVTENBQ05nSUFJQUpCQkdvZ0FFRUJjallDQUNBQ1FaQXNLQUlBUndSQUR3dEJrQ3hCQURZQ0FFR0VMRUVBTmdJQUR3dEJrQ3dvQWdBZ0JrWUVRRUdFTEVHRUxDZ0NBQ0FBYWlJQU5nSUFRWkFzSUFFMkFnQWdBa0VFYWlBQVFRRnlOZ0lBSUFBZ0FXb2dBRFlDQUE4TElBTkJlSEVnQUdvaEJDQURRUU4ySVFVZ0EwR0FBa2tFUUNBR1FRaHFLQUlBSWdBZ0JrRU1haWdDQUNJRFJnUkFRZndyUWZ3cktBSUFRUUVnQlhSQmYzTnhOZ0lBQlNBQVFReHFJQU0yQWdBZ0EwRUlhaUFBTmdJQUN3VUNRQ0FHUVJocUtBSUFJUWdnQmtFTWFpZ0NBQ0lBSUFaR0JFQUNRQ0FHUVJCcUlnTkJCR29pQlNnQ0FDSUFCRUFnQlNFREJTQURLQUlBSWdCRkJFQkJBQ0VBREFJTEN3TkFBa0FnQUVFVWFpSUZLQUlBSWdjRWZ5QUZJUU1nQndVZ0FFRVFhaUlGS0FJQUlnZEZEUUVnQlNFRElBY0xJUUFNQVFzTElBTkJBRFlDQUFzRklBWkJDR29vQWdBaUEwRU1haUFBTmdJQUlBQkJDR29nQXpZQ0FBc2dDQVJBSUFaQkhHb29BZ0FpQTBFQ2RFR3NMbW9pQlNnQ0FDQUdSZ1JBSUFVZ0FEWUNBQ0FBUlFSQVFZQXNRWUFzS0FJQVFRRWdBM1JCZjNOeE5nSUFEQU1MQlNBSVFSQnFJZ01nQ0VFVWFpQURLQUlBSUFaR0d5QUFOZ0lBSUFCRkRRSUxJQUJCR0dvZ0NEWUNBQ0FHUVJCcUlnVW9BZ0FpQXdSQUlBQkJFR29nQXpZQ0FDQURRUmhxSUFBMkFnQUxJQVZCQkdvb0FnQWlBd1JBSUFCQkZHb2dBellDQUNBRFFSaHFJQUEyQWdBTEN3c0xJQUpCQkdvZ0JFRUJjallDQUNBQklBUnFJQVEyQWdCQmtDd29BZ0FnQWtZRWYwR0VMQ0FFTmdJQUR3VWdCQXNMSWdOQkEzWWhBU0FEUVlBQ1NRUkFJQUZCQTNSQnBDeHFJUUJCL0Nzb0FnQWlBMEVCSUFGMElnRnhCSDhnQUVFSWFpSUJJUU1nQVNnQ0FBVkIvQ3NnQVNBRGNqWUNBQ0FBUVFocUlRTWdBQXNoQVNBRElBSTJBZ0FnQVVFTWFpQUNOZ0lBSUFKQkNHb2dBVFlDQUNBQ1FReHFJQUEyQWdBUEN5QURRUWgySWdBRWZ5QURRZi8vL3dkTEJIOUJId1VnQUNBQVFZRCtQMnBCRUhaQkNIRWlCSFFpQVVHQTRCOXFRUkIyUVFSeElRQWdBU0FBZENJRlFZQ0FEMnBCRUhaQkFuRWhBU0FEUVE0Z0FDQUVjaUFCY21zZ0JTQUJkRUVQZG1vaUFFRUhhblpCQVhFZ0FFRUJkSElMQlVFQUN5SUJRUUowUWF3dWFpRUFJQUpCSEdvZ0FUWUNBQ0FDUVJScVFRQTJBZ0FnQWtFUWFrRUFOZ0lBUVlBc0tBSUFJZ1JCQVNBQmRDSUZjUVJBQWtBZ0FDZ0NBQ0lBUVFScUtBSUFRWGh4SUFOR0JFQWdBQ0VCQlFKQUlBTkJBRUVaSUFGQkFYWnJJQUZCSDBZYmRDRUVBMEFnQUVFUWFpQUVRUjkyUVFKMGFpSUZLQUlBSWdFRVFDQUVRUUYwSVFRZ0FVRUVhaWdDQUVGNGNTQURSZzBDSUFFaEFBd0JDd3NnQlNBQ05nSUFJQUpCR0dvZ0FEWUNBQ0FDUVF4cUlBSTJBZ0FnQWtFSWFpQUNOZ0lBREFJTEN5QUJRUWhxSWdBb0FnQWlBMEVNYWlBQ05nSUFJQUFnQWpZQ0FDQUNRUWhxSUFNMkFnQWdBa0VNYWlBQk5nSUFJQUpCR0dwQkFEWUNBQXNGUVlBc0lBUWdCWEkyQWdBZ0FDQUNOZ0lBSUFKQkdHb2dBRFlDQUNBQ1FReHFJQUkyQWdBZ0FrRUlhaUFDTmdJQUMwR2NMRUdjTENnQ0FFRi9haUlBTmdJQUlBQUVRQThMUWNRdklRQURRQ0FBS0FJQUlnRkJDR29oQUNBQkRRQUxRWndzUVg4MkFnQUxMQUFnQUNnQ0FFSGZ0OTZhQVVZRVFFRUFEd3NnQVVFQmNVRWFhaEVCQUNBQVFkKzMzcG9CTmdJQVFRQUx4Z01CQTM4Z0FrR0F3QUJPQkVBZ0FDQUJJQUlRQ0JvZ0FBOExJQUFoQkNBQUlBSnFJUU1nQUVFRGNTQUJRUU54UmdSQUEwQWdBRUVEY1FSQUlBSkZCRUFnQkE4TElBQWdBU3dBQURvQUFDQUFRUUZxSVFBZ0FVRUJhaUVCSUFKQkFXc2hBZ3dCQ3dzZ0EwRjhjU0lDUVVCcUlRVURRQ0FBSUFWTUJFQWdBQ0FCS0FJQU5nSUFJQUFnQVNnQ0JEWUNCQ0FBSUFFb0FnZzJBZ2dnQUNBQktBSU1OZ0lNSUFBZ0FTZ0NFRFlDRUNBQUlBRW9BaFEyQWhRZ0FDQUJLQUlZTmdJWUlBQWdBU2dDSERZQ0hDQUFJQUVvQWlBMkFpQWdBQ0FCS0FJa05nSWtJQUFnQVNnQ0tEWUNLQ0FBSUFFb0FpdzJBaXdnQUNBQktBSXdOZ0l3SUFBZ0FTZ0NORFlDTkNBQUlBRW9BamcyQWpnZ0FDQUJLQUk4TmdJOElBQkJRR3NoQUNBQlFVQnJJUUVNQVFzTEEwQWdBQ0FDU0FSQUlBQWdBU2dDQURZQ0FDQUFRUVJxSVFBZ0FVRUVhaUVCREFFTEN3VWdBMEVFYXlFQ0EwQWdBQ0FDU0FSQUlBQWdBU3dBQURvQUFDQUFJQUVzQUFFNkFBRWdBQ0FCTEFBQ09nQUNJQUFnQVN3QUF6b0FBeUFBUVFScUlRQWdBVUVFYWlFQkRBRUxDd3NEUUNBQUlBTklCRUFnQUNBQkxBQUFPZ0FBSUFCQkFXb2hBQ0FCUVFGcUlRRU1BUXNMSUFRTG1BSUJCSDhnQUNBQ2FpRUVJQUZCL3dGeElRRWdBa0hEQUU0RVFBTkFJQUJCQTNFRVFDQUFJQUU2QUFBZ0FFRUJhaUVBREFFTEN5QUJRUWgwSUFGeUlBRkJFSFJ5SUFGQkdIUnlJUU1nQkVGOGNTSUZRVUJxSVFZRFFDQUFJQVpNQkVBZ0FDQUROZ0lBSUFBZ0F6WUNCQ0FBSUFNMkFnZ2dBQ0FETmdJTUlBQWdBellDRUNBQUlBTTJBaFFnQUNBRE5nSVlJQUFnQXpZQ0hDQUFJQU0yQWlBZ0FDQUROZ0lrSUFBZ0F6WUNLQ0FBSUFNMkFpd2dBQ0FETmdJd0lBQWdBellDTkNBQUlBTTJBamdnQUNBRE5nSThJQUJCUUdzaEFBd0JDd3NEUUNBQUlBVklCRUFnQUNBRE5nSUFJQUJCQkdvaEFBd0JDd3NMQTBBZ0FDQUVTQVJBSUFBZ0FUb0FBQ0FBUVFGcUlRQU1BUXNMSUFRZ0Ftc0xVZ0VEZnhBSElRTWdBQ01CS0FJQUlnSnFJZ0VnQWtnZ0FFRUFTbkVnQVVFQVNISUVRQ0FCRUFvYVFRd1FBa0YvRHdzZ0FTQURTZ1JBSUFFUUNVVUVRRUVNRUFKQmZ3OExDeU1CSUFFMkFnQWdBZ3NNQUNBQklBQkJBM0VSQWdBTEVRQWdBU0FDSUFCQkIzRkJCR29SQXdBTEV3QWdBU0FDSUFNZ0FFRUhjVUVNYWhFQUFBc2JBQ0FCSUFJZ0F5QUVJQVVnQmlBSElBQkJBWEZCRkdvUkJBQUxIUUFnQVNBQ0lBTWdCQ0FGSUFZZ0J5QUlJQUJCQVhGQkZtb1JCUUFMRXdBZ0FTQUNJQU1nQUVFQmNVRVlhaEVHQUFzTkFDQUFRUUZ4UVJwcUVRRUFDdzhBSUFFZ0FFRUJjVUVjYWhFSEFBc2JBQ0FCSUFJZ0F5QUVJQVVnQmlBSElBQkJBWEZCSG1vUkNBQUxDQUJCQUJBQVFRQUxDQUJCQVJBQVFRQUxDQUJCQWhBQVFRQUxDQUJCQXhBQVFRQUxDQUJCQkJBQVFRQUxDQUJCQlJBQVFnQUxCZ0JCQmhBQUN3WUFRUWNRQUFzR0FFRUlFQUFMSXdFQmZpQUFJQUVnQXEwZ0E2MUNJSWFFSUFRUVpDRUZJQVZDSUlpbkVBc2dCYWNMQy9rYURBQkJnQWdMR0ZJYUhCT1pHenNhY3hvcERkNGRGdytNSG1JY25CTUtFUUJCb0FnTEdISWdaU2RlSnk4dVF5NmxHQUVsWXlWL0twMGQ5Qjg3SFFCQndBZ0xHSG9CS0FUdEFVWUNzQUpSQXRvQnVRTGJBYkFDcFFISEFRQkI0QWdMR0NzQytRRTNBZ3dDU1FMUEJQMEJQQVBzQVFRR053UlNBd0JCZ0FrTEZ5SUFQZ0JJQUVJQU5RQVpBRjRBUWdBNEFENEFTd0JuQUVHZ0NRc1hNQUJTQUMwQVZ3QXlBQzhBVUFBdUFGTUFLUUJPQUZFQVFjSUpDNzhWeVFDU0FWc0NKQVB0QTdZRWZnVkhCaEFIMlFlaENHb0pNZ3I3Q3NNTGl3eFREUnNPNHc2ckQzSVFPUkVBRXNjU2poTlZGQnNWNFJXbkZtMFhNeGo0R0wwWmdocEdHd3Njenh5VEhWWWVHUi9jSDU4Z1lTRWpJdVFpcGlObkpDY2w1eVduSm1jbkppamxLS01wWVNvZUs5c3JtQ3hVTFJBdXpDNkdMMEV3K3pDME1XMHlKalBlTTVZMFRUVUROcmsyYnpja09OZzRqRGsvT3ZJNnBEdFdQQWM5dHoxblBoWS94VDl6UUNCQnpVRjVRaVZEMEVONlJDTkZ6RVYwUmh4SHcwZHBTQTVKczBsWFN2cEtuVXMvVE9CTWdFMGdUcjlPWFUvNlQ1ZFFNMUhPVVdoU0FWT2FVekpVeVZSZlZmUlZpVllkVjdCWFFsalRXR05aODFtQldnOWJuRnNvWExOY1BWM0dYVTllMWw1ZFgrSmZaMkRyWUc1aDhHRnhZdkZpY0dQdVkydGs1MlJpWmQxbFZtYk9aa1ZudkdjeGFLVm9HV21MYWZ4cGJHcmJha3BydDJzamJJNXMrR3hoYmNsdE1HNlZidnB1WG0vQWJ5SndnbkRoY0VCeG5YSDVjVlJ5cm5JR2MxNXp0WE1LZEY1MHNYUURkVlIxcEhYemRVQjJqWGJZZGlKM2EzZXpkL2wzUDNpRGVNWjRDSGxKZVlsNXgza0Vla0Y2ZkhxMWV1NTZKWHRjZTVGN3hIdjNleWw4V1h5SWZMWjg0bndPZlRoOVlYMkpmYkI5MVgzNWZSeCtQbjVlZm41K25INjVmdFIrNzM0SWZ5Qi9OMzlNZjJGL2RIK0dmNVovcG4rMGY4Ri96WC9YZitCLzZIL3ZmL1YvK1gvOGYvNS8vMy8rZi94LytYLzFmKzkvNkgvZ2Y5ZC96WC9CZjdSL3BuK1dmNFovZEg5aGYweC9OMzhnZndoLzczN1Vmcmwrbkg1K2ZsNStQbjRjZnZsOTFYMndmWWw5WVgwNGZRNTk0bnkyZkloOFdYd3BmUGQ3eEh1UmUxeDdKWHZ1ZXJWNmZIcEJlZ1I2eDNtSmVVbDVDSG5HZUlONFAzajVkN04zYTNjaWQ5aDJqWFpBZHZOMXBIVlVkUU4xc1hSZWRBcDB0WE5lY3daenJuSlVjdmx4blhGQWNlRndnbkFpY01CdlhtLzZicFZ1TUc3SmJXRnQrR3lPYkNOc3QydEthOXRxYkdyOGFZdHBHV21sYURGb3ZHZEZaODVtVm1iZFpXSmw1MlJyWk81amNHUHhZbkZpOEdGdVlldGdaMkRpWDExZjFsNVBYc1pkUFYyelhDaGNuRnNQVzRGYTgxbGpXZE5ZUWxpd1Z4MVhpVmIwVlY5VnlWUXlWSnBUQVZOb1VzNVJNMUdYVVBwUFhVKy9UaUJPZ0UzZ1REOU1uVXY2U2xkS3Mwa09TV2xJdzBjY1IzUkd6RVVqUlhwRTBFTWxRM2xDelVFZ1FYTkF4VDhXUDJjK3R6MEhQVlk4cER2eU9qODZqRG5ZT0NRNGJ6ZTVOZ00yVFRXV05ONHpKak50TXJReCt6QkJNSVl2ekM0UUxsUXRtQ3piS3g0cllTcWpLZVVvSmlobko2Y201eVVuSldja3BpUGtJaU1pWVNHZklOd2ZHUjlXSHBNZHp4d0xIRVliZ2hxOUdmZ1lNeGh0RjZjVzRSVWJGVlVVamhQSEVnQVNPUkZ5RUtzUDR3NGJEbE1OaXd6REMvc0tNZ3BxQ2FFSTJRY1FCMGNHZmdXMkJPMERKQU5iQXBJQnlRQUFBRGYvYnY2bC9kejhFL3hLKzRMNnVmbncrQ2Y0WC9lVzlzNzFCZlU5OUhYenJmTGw4UjN4VmZDTzc4ZnVBTzQ1N1hMc3Erdmw2aC9xV2VtVDZNM25DT2RENW43bHV1VDE0ekhqYmVLcTRlZmdKT0JoMzUvZTNkMGMzVnJjbWR2WjJobmFXZG1aMk5yWEc5ZGQxcC9WNHRRbDFHalRyTkx3MFRUUmV0Qy96d1hQVE02VHpkck1Jc3hxeTdQSy9jbEh5WkhJM01jb3gzVEd3Y1VPeFZ6RXFzUDV3a25DbWNIcXdEdkFqYi9ndmpPK2g3M2J2REM4aHJ2ZHVqUzZqTG5rdUQyNGw3Znl0azIycWJVR3RXTzB3Yk1nczRDeTRMRkJzYU93QnJCcHI4MnVNcTZZcmYrc1pxek9xemVyb2FvTXFuZXA0NmhRcUw2bkxhZWRwZzJtZjZYeHBHU2syS05ObzhPaU9xS3hvU3FobzZBZW9KbWZGWitTbmhDZWo1MFBuWkNjRXB5Vm14bWJucG9qbXFxWk1wbTdtRVNZejVkYmwrZVdkWllFbHBTVkpaVzJsRW1VM1pOeWt3aVRuNUkza3RDUmE1RUdrYUtRUUpEZWozNlBINC9Bam1PT0I0NnNqVktOK295aWpFdU05b3VpaTArTC9ZcXNpbHlLRFlyQWlYT0pLSW5laUpXSVRZZ0hpTUdIZlljNmgvaUd0NFozaGptRy9JVy9oWVNGUzRVU2hkdUVwSVJ2aER5RUNZVFhnNmVEZUlOS2d4NkQ4b0xJZ3ArQ2Q0SlFnaXVDQjRMa2djS0Jvb0dDZ1dTQlI0RXNnUkdCK0lEZ2dNbUF0SUNmZ0l5QWVvQnFnRnFBVElBL2dET0FLWUFnZ0JpQUVZQUxnQWVBQklBQ2dBR0FBb0FFZ0FlQUM0QVJnQmlBSUlBcGdET0FQNEJNZ0ZxQWFvQjZnSXlBbjRDMGdNbUE0SUQ0Z0JHQkxJRkhnV1NCZ29HaWdjS0I1SUVIZ2l1Q1VJSjNncCtDeUlMeWdoNkRTb040ZzZlRDE0TUpoRHlFYjRTa2hOdUVFb1ZMaFlTRnY0WDhoVG1HZDRhM2h2aUdPb2Q5aDhHSEI0aE5pSldJM29nb2lYT0p3SWtOaWx5S3JJcjlpaytMb292MmkwdU1vb3o2akZLTnJJMEhqbU9Pd0k0ZmozNlAzbzlBa0tLUUJwRnJrZENSTjVLZmtnaVRjcFBkazBtVXRwUWxsWlNWQkpaMWx1ZVdXNWZQbDBTWXU1Z3ltYXFaSTVxZW1obWJsWnNTbkpDY0Q1MlBuUkNla3A0Vm41bWZIcUNqb0NxaHNhRTZvc09pVGFQWW8yU2s4YVIvcFEybW5hWXRwNzZuVUtqanFIZXBES3FocWplcnpxdG1yUCtzbUsweXJzMnVhYThHc0tPd1FiSGdzWUN5SUxQQnMyTzBCcldwdFUyMjhyYVh0ejI0NUxpTXVUUzYzYnFHdXpDODI3eUh2VE8rNEw2TnZ6dkE2c0Nad1VuQytjS3F3MXpFRHNYQnhYVEdLTWZjeDVISVI4bjl5YlBLYXNzaXpOck1rODFNemdYUHY4OTYwRFRSOE5HczBtalRKZFRpMUovVlhkWWIxOXJYbWRoWjJSbmEyZHFaMjFyY0hOM2QzWi9lWWQ4azRPZmdxdUZ0NGpIajllTzY1SDdsUStZSTU4M25rK2haNlIvcTVlcXI2M0xzT2UwQTdzZnVqdTlWOEIzeDVmR3Q4blh6UGZRRjljNzFsdlpmOXlmNDhQaTUrWUw2U3ZzVC9OejhwZjF1L2pmL0FRQ0FBQUlBUUFBREFNQUFCQUFnQUFVQW9BQUdBR0FBQndEZ0FBZ0FFQUFKQUpBQUNnQlFBQXNBMEFBTUFEQUFEUUN3QUE0QWNBQVBBUEFBRVFDSUFCSUFTQUFUQU1nQUZBQW9BQlVBcUFBV0FHZ0FGd0RvQUJrQW1BQWFBRmdBR3dEWUFCd0FPQUFkQUxnQUhnQjRBQjhBK0FBaEFJUUFJZ0JFQUNNQXhBQWxBS1FBSmdCa0FDY0E1QUFwQUpRQUtnQlVBQ3NBMUFBc0FEUUFMUUMwQUM0QWRBQXZBUFFBTVFDTUFESUFUQUF6QU13QU5RQ3NBRFlBYkFBM0FPd0FPUUNjQURvQVhBQTdBTndBUFFDOEFENEFmQUEvQVB3QVFRQ0NBRU1Bd2dCRkFLSUFSZ0JpQUVjQTRnQkpBSklBU2dCU0FFc0EwZ0JOQUxJQVRnQnlBRThBOGdCUkFJb0FVd0RLQUZVQXFnQldBR29BVndEcUFGa0FtZ0JiQU5vQVhRQzZBRjRBZWdCZkFQb0FZUUNHQUdNQXhnQmxBS1lBWndEbUFHa0FsZ0JyQU5ZQWJRQzJBRzRBZGdCdkFQWUFjUUNPQUhNQXpnQjFBSzRBZHdEdUFIa0FuZ0I3QU40QWZRQytBSDhBL2dDREFNRUFoUUNoQUljQTRRQ0pBSkVBaXdEUkFJMEFzUUNQQVBFQWt3REpBSlVBcVFDWEFPa0Ftd0RaQUowQXVRQ2ZBUGtBb3dERkFLY0E1UUNyQU5VQXJRQzFBSzhBOVFDekFNMEF0d0R0QUxzQTNRQy9BUDBBeHdEakFNc0Ewd0RQQVBNQTF3RHJBTjhBK3dEdkFQY0FBUUJBQUFJQUlBQURBR0FBQkFBUUFBVUFVQUFHQURBQUJ3QndBQWtBU0FBS0FDZ0FDd0JvQUF3QUdBQU5BRmdBRGdBNEFBOEFlQUFSQUVRQUVnQWtBQk1BWkFBVkFGUUFGZ0EwQUJjQWRBQVpBRXdBR2dBc0FCc0FiQUFkQUZ3QUhnQThBQjhBZkFBaEFFSUFJd0JpQUNVQVVnQW1BRElBSndCeUFDa0FTZ0FyQUdvQUxRQmFBQzRBT2dBdkFIb0FNUUJHQURNQVpnQTFBRllBTndCMkFEa0FUZ0E3QUc0QVBRQmVBRDhBZmdCREFHRUFSUUJSQUVjQWNRQkxBR2tBVFFCWkFFOEFlUUJUQUdVQVZ3QjFBRnNBYlFCZkFIMEFad0J6QUc4QWV3QUZBRUdNSHdzQkFRQkJwQjhMRGdFQUFBQUJBQUFBNkJFQUFBQUVBRUc4SHdzQkFRQkJ5eDhMQlFyLy8vLy9BRUdRSUF2TUE0QVBBQUFZQUJVQUdBQTVBREFBT1FBSUFBUUFBd0FPQUFjQUJRQWxBQ0FBSlFCa0FGQUFaQUJTQUU0QVVnQWRBUVFCSFFFR0FBTUFBZ0FKQUFVQUF3QmVBRjRBWGdCTUJCb0VUQVFHQUFnQUNnQU1BQTRBRUFDQUFnQURJQUlnQWtBQ1FBSkFBa0FDZ0N5QUxBQXRBQzBBTFFBdEFDU0FJd0FqZ0NJQUlvQWhaR0YwWVZzd1hTQTlQU0IyWVd3d0FHMWhhVzR1WXdCd2NtOWpaWE56WDJSaGRHRUFaR0YwWVZzeE1EQmRJRDA5SUhaaGJERXdNQUJrWVhSaFd6SXdNREJkSUQwOUlIWmhiREl3TURBQWNISnZZMlZ6YzE5a1lYUmhPaUJrWVhSaElEMDlJRTVWVEV3Z0FHUmhkR0ZmYkdWdVozUm9JRDQ5SURBQWQyVmljblJqTDJOdmJXMXZibDloZFdScGJ5OTJZV1F2ZG1Ga1gyWnBiSFJsY21KaGJtc3VZd0JYWldKU2RHTldZV1JmUTJGc1kzVnNZWFJsUm1WaGRIVnlaWE1BWkdGMFlWOXNaVzVuZEdnZ1BEMGdNalF3QUdSaGRHRmZhVzRnSVQwZ1RsVk1UQUJNYjJkUFprVnVaWEpuZVFCa1lYUmhYMnhsYm1kMGFDQStJREFBWTJoaGJtNWxiQ0E4SUd0T2RXMURhR0Z1Ym1Wc2N3QjNaV0p5ZEdNdlkyOXRiVzl1WDJGMVpHbHZMM1poWkM5MllXUmZjM0F1WXdCWFpXSlNkR05XWVdSZlJtbHVaRTFwYm1sdGRXMD0iO0YucmVhZHk9bmV3IFByb21pc2UoKGZ1bmN0aW9uKEEsQil7Yz1BfSkpO3ZhciBHLHc9e307Zm9yKEcgaW4gRilGLmhhc093blByb3BlcnR5KEcpJiYod1tHXT1GW0ddKTtGLmFyZ3VtZW50cz1bXSxGLnRoaXNQcm9ncmFtPSIuL3RoaXMucHJvZ3JhbSIsRi5xdWl0PWZ1bmN0aW9uKEEsQil7dGhyb3cgQn0sRi5wcmVSdW49W10sRi5wb3N0UnVuPVtdO3ZhciBmLGQsaCxsPSExO2Y9Im9iamVjdCI9PXR5cGVvZiB3aW5kb3csZD0iZnVuY3Rpb24iPT10eXBlb2YgaW1wb3J0U2NyaXB0cyxoPSJvYmplY3QiPT10eXBlb2YgcHJvY2VzcyYmImZ1bmN0aW9uIj09dHlwZW9mIHJlcXVpcmUsKGw9aCYmIWYmJiFkKT8oMTxwcm9jZXNzLmFyZ3YubGVuZ3RoJiYoRi50aGlzUHJvZ3JhbT1wcm9jZXNzLmFyZ3ZbMV0ucmVwbGFjZSgvXFwvZywiLyIpKSxGLmFyZ3VtZW50cz1wcm9jZXNzLmFyZ3Yuc2xpY2UoMiksInVuZGVmaW5lZCIhPXR5cGVvZiBtb2R1bGUmJihtb2R1bGUuZXhwb3J0cz1GKSxwcm9jZXNzLm9uKCJ1bmNhdWdodEV4Y2VwdGlvbiIsKGZ1bmN0aW9uKEEpe2lmKCEoQSBpbnN0YW5jZW9mIHMpKXRocm93IEF9KSkscHJvY2Vzcy5vbigidW5oYW5kbGVkUmVqZWN0aW9uIixEKSxGLnF1aXQ9ZnVuY3Rpb24oQSl7cHJvY2Vzcy5leGl0KEEpfSxGLmluc3BlY3Q9ZnVuY3Rpb24oKXtyZXR1cm4iW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF0ifSk6KGZ8fGQpJiYoRi5zZXRXaW5kb3dUaXRsZT1mdW5jdGlvbihBKXtkb2N1bWVudC50aXRsZT1BfSk7dmFyIHU9Ri5wcmludHx8KCJ1bmRlZmluZWQiPT10eXBlb2YgY29uc29sZT8idW5kZWZpbmVkIj09dHlwZW9mIHByaW50P251bGw6cHJpbnQ6Y29uc29sZS5sb2cuYmluZChjb25zb2xlKSkseT1GLnByaW50RXJyfHwoInVuZGVmaW5lZCI9PXR5cGVvZiBwcmludEVycj8idW5kZWZpbmVkIiE9dHlwZW9mIGNvbnNvbGUmJmNvbnNvbGUud2Fybi5iaW5kKGNvbnNvbGUpfHx1OnByaW50RXJyKTtmb3IoRyBpbiB3KXcuaGFzT3duUHJvcGVydHkoRykmJihGW0ddPXdbR10pO3c9dm9pZCAwO3ZhciBVPXsiZjY0LXJlbSI6ZnVuY3Rpb24oQSxCKXtyZXR1cm4gQSVCfSxkZWJ1Z2dlcjpmdW5jdGlvbigpe319LE49MDsib2JqZWN0IiE9dHlwZW9mIFdlYkFzc2VtYmx5JiZ5KCJubyBuYXRpdmUgd2FzbSBzdXBwb3J0IGRldGVjdGVkIik7dmFyIFMsWSxwLHEsSCxrPSExLEw9InVuZGVmaW5lZCI9PXR5cGVvZiBUZXh0RGVjb2Rlcj92b2lkIDA6bmV3IFRleHREZWNvZGVyKCJ1dGY4Iik7InVuZGVmaW5lZCI9PXR5cGVvZiBUZXh0RGVjb2Rlcnx8bmV3IFRleHREZWNvZGVyKCJ1dGYtMTZsZSIpO3ZhciBtPTUyNDI4ODAsTT1GLlRPVEFMX01FTU9SWXx8MTY3NzcyMTY7TTxtJiZ5KCJUT1RBTF9NRU1PUlkgc2hvdWxkIGJlIGxhcmdlciB0aGFuIFRPVEFMX1NUQUNLLCB3YXMgIitNKyIhIChUT1RBTF9TVEFDSz0iK20rIikiKSxGLmJ1ZmZlcj9ZPUYuYnVmZmVyOiJvYmplY3QiPT10eXBlb2YgV2ViQXNzZW1ibHkmJiJmdW5jdGlvbiI9PXR5cGVvZiBXZWJBc3NlbWJseS5NZW1vcnk/KFM9bmV3IFdlYkFzc2VtYmx5Lk1lbW9yeSh7aW5pdGlhbDpNLzY1NTM2LG1heGltdW06TS82NTUzNn0pLFk9Uy5idWZmZXIpOlk9bmV3IEFycmF5QnVmZmVyKE0pLEYuSEVBUDg9cD1uZXcgSW50OEFycmF5KFkpLEYuSEVBUDE2PW5ldyBJbnQxNkFycmF5KFkpLEYuSEVBUDMyPUg9bmV3IEludDMyQXJyYXkoWSksRi5IRUFQVTg9cT1uZXcgVWludDhBcnJheShZKSxGLkhFQVBVMTY9bmV3IFVpbnQxNkFycmF5KFkpLEYuSEVBUFUzMj1uZXcgVWludDMyQXJyYXkoWSksRi5IRUFQRjMyPW5ldyBGbG9hdDMyQXJyYXkoWSksRi5IRUFQRjY0PW5ldyBGbG9hdDY0QXJyYXkoWSksSFsxODMyXT01MjUwMjQwO3ZhciBKPVtdLHg9W10sYj1bXSxLPVtdLFg9MCxaPW51bGw7Ri5wcmVsb2FkZWRJbWFnZXM9e30sRi5wcmVsb2FkZWRBdWRpb3M9e30sZnVuY3Rpb24oQSl7cmV0dXJuIDA9PT1BLmluZGV4T2YoImRhdGE6YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2Jhc2U2NCwiKX0oUil8fEQoIndhc21CaW5hcnlGaWxlIGhhcyB0byBiZSBhIGRhdGEtVVJJIiksRi5hc209ZnVuY3Rpb24oQSxCKXtyZXR1cm4gQi5tZW1vcnk9UyxCLnRhYmxlPW5ldyBXZWJBc3NlbWJseS5UYWJsZSh7aW5pdGlhbDozMixtYXhpbXVtOjMyLGVsZW1lbnQ6ImFueWZ1bmMifSksQi5fX21lbW9yeV9iYXNlPTEwMjQsQi5fX3RhYmxlX2Jhc2U9MCxuKEIpfTt2YXIgdj17YnVmZmVyczpbbnVsbCxbXSxbXV0scHJpbnRDaGFyOmZ1bmN0aW9uKEEsQil7dmFyIGc9di5idWZmZXJzW0FdOzA9PT1CfHwxMD09PUI/KCgxPT09QT91OnkpKEkoZywwKSksZy5sZW5ndGg9MCk6Zy5wdXNoKEIpfSx2YXJhcmdzOjAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHYudmFyYXJncys9NCxIW3YudmFyYXJncy00Pj4yXX0sZ2V0U3RyOmZ1bmN0aW9uKCl7cmV0dXJuIFEodi5nZXQoKSl9LGdldDY0OmZ1bmN0aW9uKCl7dmFyIEE9di5nZXQoKTtyZXR1cm4gdi5nZXQoKSxBfSxnZXRaZXJvOmZ1bmN0aW9uKCl7di5nZXQoKX19LFc9Ri5hc20oe30se2Fib3J0OkQsc2V0VGVtcFJldDA6ZnVuY3Rpb24oQSl7Tj1BfSxnZXRUZW1wUmV0MDpmdW5jdGlvbigpe3JldHVybiBOfSxfX19hc3NlcnRfZmFpbDpmdW5jdGlvbihBLEIsZyxJKXtEKCJBc3NlcnRpb24gZmFpbGVkOiAiK1EoQSkrIiwgYXQ6ICIrW0I/UShCKToidW5rbm93biBmaWxlbmFtZSIsZyxJP1EoSSk6InVua25vd24gZnVuY3Rpb24iXSl9LF9fX3NldEVyck5vOmZ1bmN0aW9uKEEpe3JldHVybiBGLl9fX2Vycm5vX2xvY2F0aW9uJiYoSFtGLl9fX2Vycm5vX2xvY2F0aW9uKCk+PjJdPUEpLEF9LF9fX3N5c2NhbGwxNDA6ZnVuY3Rpb24oQSxCKXt2LnZhcmFyZ3M9Qjt0cnl7cmV0dXJuIHYuZ2V0U3RyZWFtRnJvbUZEKCksdi5nZXQoKSx2LmdldCgpLHYuZ2V0KCksdi5nZXQoKSwwfWNhdGNoKEEpe3JldHVybiJ1bmRlZmluZWQiIT10eXBlb2YgRlMmJkEgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yfHxEKEEpLC1BLmVycm5vfX0sX19fc3lzY2FsbDE0NjpmdW5jdGlvbihBLEIpe3YudmFyYXJncz1CO3RyeXtmb3IodmFyIGc9di5nZXQoKSxJPXYuZ2V0KCksUT12LmdldCgpLEU9MCxDPTA7QzxRO0MrKyl7Zm9yKHZhciBpPUhbSSs4KkM+PjJdLG89SFtJKyg4KkMrNCk+PjJdLGE9MDthPG87YSsrKXYucHJpbnRDaGFyKGcscVtpK2FdKTtFKz1vfXJldHVybiBFfWNhdGNoKEEpe3JldHVybiJ1bmRlZmluZWQiIT10eXBlb2YgRlMmJkEgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yfHxEKEEpLC1BLmVycm5vfX0sX19fc3lzY2FsbDU0OmZ1bmN0aW9uKEEsQil7di52YXJhcmdzPUI7dHJ5e3JldHVybiAwfWNhdGNoKEEpe3JldHVybiJ1bmRlZmluZWQiIT10eXBlb2YgRlMmJkEgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yfHxEKEEpLC1BLmVycm5vfX0sX19fc3lzY2FsbDY6ZnVuY3Rpb24oQSxCKXt2LnZhcmFyZ3M9Qjt0cnl7cmV0dXJuIHYuZ2V0U3RyZWFtRnJvbUZEKCksMH1jYXRjaChBKXtyZXR1cm4idW5kZWZpbmVkIiE9dHlwZW9mIEZTJiZBIGluc3RhbmNlb2YgRlMuRXJybm9FcnJvcnx8RChBKSwtQS5lcnJub319LF9lbXNjcmlwdGVuX2dldF9oZWFwX3NpemU6ZnVuY3Rpb24oKXtyZXR1cm4gcC5sZW5ndGh9LF9lbXNjcmlwdGVuX21lbWNweV9iaWc6ZnVuY3Rpb24oQSxCLGcpe3Euc2V0KHEuc3ViYXJyYXkoQixCK2cpLEEpfSxfZW1zY3JpcHRlbl9yZXNpemVfaGVhcDpmdW5jdGlvbihBKXt0KCl9LGFib3J0T25DYW5ub3RHcm93TWVtb3J5OnQsZmx1c2hfTk9fRklMRVNZU1RFTTpmdW5jdGlvbigpe3ZhciBBPUYuX2ZmbHVzaDtBJiZBKDApO3ZhciBCPXYuYnVmZmVycztCWzFdLmxlbmd0aCYmdi5wcmludENoYXIoMSwxMCksQlsyXS5sZW5ndGgmJnYucHJpbnRDaGFyKDIsMTApfSx0ZW1wRG91YmxlUHRyOjczNDQsRFlOQU1JQ1RPUF9QVFI6NzMyOH0sWSk7Ri5hc209VyxGLl9fX2Vycm5vX2xvY2F0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIEYuYXNtLl9fX2Vycm5vX2xvY2F0aW9uLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRi5fZnJlZT1mdW5jdGlvbigpe3JldHVybiBGLmFzbS5fZnJlZS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEYuX21haW49ZnVuY3Rpb24oKXtyZXR1cm4gRi5hc20uX21haW4uYXBwbHkobnVsbCxhcmd1bWVudHMpfSxGLl9tYWxsb2M9ZnVuY3Rpb24oKXtyZXR1cm4gRi5hc20uX21hbGxvYy5hcHBseShudWxsLGFyZ3VtZW50cyl9LEYuX21lbWNweT1mdW5jdGlvbigpe3JldHVybiBGLmFzbS5fbWVtY3B5LmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRi5fbWVtc2V0PWZ1bmN0aW9uKCl7cmV0dXJuIEYuYXNtLl9tZW1zZXQuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxGLl9wcm9jZXNzX2RhdGE9ZnVuY3Rpb24oKXtyZXR1cm4gRi5hc20uX3Byb2Nlc3NfZGF0YS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEYuX3Nicms9ZnVuY3Rpb24oKXtyZXR1cm4gRi5hc20uX3NicmsuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxGLl9zZXRtb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEYuYXNtLl9zZXRtb2RlLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRi5lc3RhYmxpc2hTdGFja1NwYWNlPWZ1bmN0aW9uKCl7cmV0dXJuIEYuYXNtLmVzdGFibGlzaFN0YWNrU3BhY2UuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgVj1GLnN0YWNrQWxsb2M9ZnVuY3Rpb24oKXtyZXR1cm4gRi5hc20uc3RhY2tBbGxvYy5hcHBseShudWxsLGFyZ3VtZW50cyl9LGo9Ri5zdGFja1Jlc3RvcmU9ZnVuY3Rpb24oKXtyZXR1cm4gRi5hc20uc3RhY2tSZXN0b3JlLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sVD1GLnN0YWNrU2F2ZT1mdW5jdGlvbigpe3JldHVybiBGLmFzbS5zdGFja1NhdmUuYXBwbHkobnVsbCxhcmd1bWVudHMpfTtpZihGLmR5bkNhbGxfaWk9ZnVuY3Rpb24oKXtyZXR1cm4gRi5hc20uZHluQ2FsbF9paS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEYuZHluQ2FsbF9paWk9ZnVuY3Rpb24oKXtyZXR1cm4gRi5hc20uZHluQ2FsbF9paWkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxGLmR5bkNhbGxfaWlpaT1mdW5jdGlvbigpe3JldHVybiBGLmFzbS5keW5DYWxsX2lpaWkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxGLmR5bkNhbGxfaWlpaWlpaWk9ZnVuY3Rpb24oKXtyZXR1cm4gRi5hc20uZHluQ2FsbF9paWlpaWlpaS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEYuZHluQ2FsbF9paWlpaWlpaWk9ZnVuY3Rpb24oKXtyZXR1cm4gRi5hc20uZHluQ2FsbF9paWlpaWlpaWkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxGLmR5bkNhbGxfamlqaT1mdW5jdGlvbigpe3JldHVybiBGLmFzbS5keW5DYWxsX2ppamkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxGLmR5bkNhbGxfdj1mdW5jdGlvbigpe3JldHVybiBGLmFzbS5keW5DYWxsX3YuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxGLmR5bkNhbGxfdmk9ZnVuY3Rpb24oKXtyZXR1cm4gRi5hc20uZHluQ2FsbF92aS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEYuZHluQ2FsbF92aWlpaWlpaT1mdW5jdGlvbigpe3JldHVybiBGLmFzbS5keW5DYWxsX3ZpaWlpaWlpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRi5hc209VyxGLmNjYWxsPWcsRi5jd3JhcD1mdW5jdGlvbihBLEksUSxFKXt2YXIgQz0oUT1RfHxbXSkuZXZlcnkoKGZ1bmN0aW9uKEEpe3JldHVybiJudW1iZXIiPT09QX0pKTtyZXR1cm4ic3RyaW5nIiE9PUkmJkMmJiFFP0IoQSk6ZnVuY3Rpb24oKXtyZXR1cm4gZyhBLEksUSxhcmd1bWVudHMpfX0scy5wcm90b3R5cGU9bmV3IEVycm9yLHMucHJvdG90eXBlLmNvbnN0cnVjdG9yPXMsWj1mdW5jdGlvbiBBKCl7Ri5jYWxsZWRSdW58fHIoKSxGLmNhbGxlZFJ1bnx8KFo9QSl9LEYuY2FsbE1haW49ZnVuY3Rpb24oQSl7dmFyIEI9KEE9QXx8W10pLmxlbmd0aCsxLGc9Vig0KihCKzEpKTtIW2c+PjJdPWkoRi50aGlzUHJvZ3JhbSk7Zm9yKHZhciBJPTE7STxCO0krKylIWyhnPj4yKStJXT1pKEFbSS0xXSk7SFsoZz4+MikrQl09MDt0cnl7IWZ1bmN0aW9uKEEsQil7QiYmRi5ub0V4aXRSdW50aW1lJiYwPT09QXx8KEYubm9FeGl0UnVudGltZXx8KGs9ITAsRi5vbkV4aXQmJkYub25FeGl0KEEpKSxGLnF1aXQoQSxuZXcgcyhBKSkpfShGLl9tYWluKEIsZywwKSwhMCl9Y2F0Y2goQSl7aWYoQSBpbnN0YW5jZW9mIHMpcmV0dXJuO2lmKCJTaW11bGF0ZUluZmluaXRlTG9vcCI9PUEpcmV0dXJuIHZvaWQoRi5ub0V4aXRSdW50aW1lPSEwKTt2YXIgUT1BO0EmJiJvYmplY3QiPT10eXBlb2YgQSYmQS5zdGFjayYmKFE9W0EsQS5zdGFja10pLHkoImV4Y2VwdGlvbiB0aHJvd246ICIrUSksRi5xdWl0KDEsQSl9fSxGLnJ1bj1yLEYuYWJvcnQ9RCxGLnByZUluaXQpZm9yKCJmdW5jdGlvbiI9PXR5cGVvZiBGLnByZUluaXQmJihGLnByZUluaXQ9W0YucHJlSW5pdF0pOzA8Ri5wcmVJbml0Lmxlbmd0aDspRi5wcmVJbml0LnBvcCgpKCk7dmFyIFA9ITA7cmV0dXJuIEYubm9Jbml0aWFsUnVuJiYoUD0hMSksRi5ub0V4aXRSdW50aW1lPSEwLHIoKSxBLnJlYWR5fTtmdW5jdGlvbiBnKEEsZyl7dGhpcy52YWRNb2R1bGU9e30sdGhpcy5vcHRpb25zPUF8fHt9O3ZhciBJPXRoaXMub3B0aW9ucy5vbkluZm98fHRoaXMub3B0aW9ucy5vblByaW50fHxmdW5jdGlvbihBKXtjb25zb2xlLmxvZygiVkFEIHByaW50IixBKX0sUT10aGlzLm9wdGlvbnMub25FcnJvcnx8dGhpcy5vcHRpb25zLm9uUHJpbnRFcnJ8fGZ1bmN0aW9uKEEpe2NvbnNvbGUuZXJyb3IoIlZBRCBwcmludEVyciIsQSl9LEU9dGhpcy5vcHRpb25zLm9uU3RhdHVzTWVzc2FnZXx8dGhpcy5vcHRpb25zLm9uU2V0U3RhdHVzfHxmdW5jdGlvbihBKXtjb25zb2xlLmxvZygiVkFEIHNldFN0YXR1cyIsQSl9LEM9bnVsbCE9dGhpcy5vcHRpb25zLm1vZGU/dGhpcy5vcHRpb25zLm1vZGU6Mztjb25zdCBpPXRoaXM7Qih7cHJlUnVuOltdLHBvc3RSdW46W10scHJpbnQ6ZnVuY3Rpb24oQSl7YXJndW1lbnRzLmxlbmd0aD4xJiYoQT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLmpvaW4oIiAiKSksSShBKX0scHJpbnRFcnI6ZnVuY3Rpb24oQSl7YXJndW1lbnRzLmxlbmd0aD4xJiYoQT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLmpvaW4oIiAiKSksUShBKX0sc2V0U3RhdHVzOmZ1bmN0aW9uKEEpe2FyZ3VtZW50cy5sZW5ndGg+MSYmKEE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5qb2luKCIgIikpLEUoQSl9LHRvdGFsRGVwZW5kZW5jaWVzOjAsbW9uaXRvclJ1bkRlcGVuZGVuY2llczpmdW5jdGlvbihBKXt0aGlzLnRvdGFsRGVwZW5kZW5jaWVzPU1hdGgubWF4KHRoaXMudG90YWxEZXBlbmRlbmNpZXMsQSksdGhpcy5zZXRTdGF0dXMoQT8iUHJlcGFyaW5nLi4uICgiKyh0aGlzLnRvdGFsRGVwZW5kZW5jaWVzLUEpKyIvIit0aGlzLnRvdGFsRGVwZW5kZW5jaWVzKyIpIjoiQWxsIGRvd25sb2FkcyBjb21wbGV0ZS4iKX0sbm9Jbml0aWFsUnVuOiEwfSkudGhlbigoZnVuY3Rpb24oQSl7dmFyIEI9e3dhc21Nb2R1bGU6QX07aWYoMSE9QS5jd3JhcCgibWFpbiIpKCkpdGhyb3cgUSgiVkFEICdtYWluJyBlcnJvciIpLHtuYW1lOiJWYWRNb2R1bGVFcnJvciIsbWVzc2FnZToiRmFpbGVkIHRvIGluaXRpYWxpemUgdmlhICdtYWluKCknIn07aWYoQi5zZXRNb2RlPUEuY3dyYXAoInNldG1vZGUiLCJudW1iZXIiLFsibnVtYmVyIl0pLEIuZ2V0TW9kZT1mdW5jdGlvbigpe3JldHVybiBDfSwwIT1CLnNldE1vZGUoQykpdGhyb3cgUSgiVkFEICdzZXRNb2RlJyBlcnJvciIpLHtuYW1lOiJWYWRNb2R1bGVFcnJvciIsbWVzc2FnZToiRmFpbGVkIHRvIHNldCBtb2RlIn07cmV0dXJuIEkoIlZBRCBtb2RlOiAiK0MpLEIucHJvY2Vzcz1BLmN3cmFwKCJwcm9jZXNzX2RhdGEiLCJudW1iZXIiLFsibnVtYmVyIiwibnVtYmVyIiwibnVtYmVyIiwibnVtYmVyIiwibnVtYmVyIiwibnVtYmVyIl0pLEIuZ2V0Vm9pY2VBY3Rpdml0eT1mdW5jdGlvbihnLEkpe2xldCBRPUkubGVuZ3RoKkkuQllURVNfUEVSX0VMRU1FTlQsRT1BLl9tYWxsb2MoUSksQz1uZXcgVWludDhBcnJheShBLkhFQVBVOC5idWZmZXIsRSxRKTtDLnNldChuZXcgVWludDhBcnJheShJLmJ1ZmZlcikpO2xldCBpPUIucHJvY2VzcyhDLmJ5dGVPZmZzZXQsSS5sZW5ndGgsZyxJWzBdLElbMTAwXSxJWzJlM10pO3JldHVybiBBLl9mcmVlKEMuYnl0ZU9mZnNldCksaX0sQn0pKS50aGVuKChmdW5jdGlvbihBKXtpLnZhZE1vZHVsZT1BLGcmJmcoaS52YWRNb2R1bGUpfSkpfXZhciBJO29ubWVzc2FnZT1mdW5jdGlvbihBKXtpZihBLmRhdGEuY3RybClzd2l0Y2goQS5kYXRhLmN0cmwuYWN0aW9uKXtjYXNlImNvbnN0cnVjdCI6IWZ1bmN0aW9uKEEpe2lmKEwpcmV0dXJuIHZvaWQgY29uc29sZS5lcnJvcigiVmFkTW9kdWxlRXJyb3IgLSBDb25zdHJ1Y3RvciB3YXMgY2FsbGVkIHR3aWNlISAybmQgY2FsbCB3YXMgaWdub3JlZCBidXQgdGhpcyBzaG91bGQgYmUgZml4ZWQhIiwiLSIsSCk7TD0hMDtrPUEuc2V0dXAuZG9EZWJ1Z3x8ITEsUT1BLnNldHVwLmlucHV0U2FtcGxlUmF0ZXx8QS5zZXR1cC5jdHhJbmZvLnRhcmdldFNhbXBsZVJhdGV8fEEuc2V0dXAuY3R4SW5mby5zYW1wbGVSYXRlLEU9MSxDPUEuc2V0dXAuaW5wdXRTYW1wbGVTaXplfHw1MTIsaT1BLnNldHVwLmJ1ZmZlclNpemV8fFEvMWUzKjMwKjIsbz1udWxsIT1BLnNldHVwLnZhZE1vZGU/QS5zZXR1cC52YWRNb2RlOjMsYT1udWxsIT1BLnNldHVwLmlzRmxvYXQzMiYmQS5zZXR1cC5pc0Zsb2F0MzIsbnVsbCE9QS5zZXR1cC52b2ljZUVuZXJneUNhcCYmKG09QS5zZXR1cC52b2ljZUVuZXJneUNhcCk7QS5zZXR1cC52b2ljZUVuZXJneURyb3BSYXRlJiYoTT1BLnNldHVwLnZvaWNlRW5lcmd5RHJvcFJhdGUpO0Euc2V0dXAuc2VxdWVuY2U/KEo9ITAsRz1BLnNldHVwLnNlcXVlbmNlLnZvaWNlQWN0aXZhdGlvblRpbWV8fDI1MCx3PUEuc2V0dXAuc2VxdWVuY2Uudm9pY2VSZXNldFRpbWV8fDE1MDAsZj1BLnNldHVwLnNlcXVlbmNlLnNpbGVuY2VBY3RpdmF0aW9uVGltZXx8MjUwLGQ9QS5zZXR1cC5zZXF1ZW5jZS5tYXhTZXF1ZW5jZVRpbWV8fDZlMyxoPUEuc2V0dXAuc2VxdWVuY2UubWluU2VxdWVuY2VUaW1lfHw2MDApOko9ITE7dD1BLnNldHVwLm1leWRhQW5hbHl6ZXJ8fHt9O3ZhciBCPU9iamVjdC5rZXlzKHQpO2lmKEIubGVuZ3RoPjAmJihpbXBvcnRTY3JpcHRzKCIuL3NoYXJlZC9tZXlkYS5taW4uY29tcHJlc3NlZC5qcyIpLEIuZm9yRWFjaCgoZnVuY3Rpb24oQSxCKXsiZmVhdHVyZXMiPT1BP3RbQV06TWV5ZGFbQV09dFtBXX0pKSxNZXlkYS5zYW1wbGVSYXRlPXRhcmdldFNhbXBsZVJhdGUsTWV5ZGEuYnVmZmVyU2l6ZT1DLCFNZXlkYS5idWZmZXJTaXplfHxNZXlkYS5idWZmZXJTaXplJk1leWRhLmJ1ZmZlclNpemUtMSE9MCkpdGhyb3d7bmFtZToiVmFkTW9kdWxlTWV5ZGFFcnJvciIsbWVzc2FnZToiTWV5ZGEgYnVmZmVyLXNpemUgbXVzdCBiZSBwb3dlciBvZiAyLCBlLmcuIDEyOCwgMjU2LCA1MTIsIDEwMjQsIC4uLiJ9O2Z1bmN0aW9uIGUoQSl7ayYmY29uc29sZS5lcnJvcigiVmFkTW9kdWxlTG9nIC0iLEEpfWZ1bmN0aW9uIG4oQSl7dGhyb3cgY29uc29sZS5lcnJvcigiVmFkTW9kdWxlRXJyb3IgLSIsQSkse25hbWU6IlZhZE1vZHVsZUVycm9yIixtZXNzYWdlOkF9fXgoKSxJPyhlKCJXZWJSVEMgVkFEIG1vZHVsZSBhbHJlYWR5IGxvYWRlZCIpLGIoKSk6KGUoIkluaXQuIFdlYlJUQyBWQUQgV0FTTSBtb2R1bGUiKSxuZXcgZyh7b25JbmZvOmUsb25FcnJvcjpuLG9uU3RhdHVzTWVzc2FnZTplLG1vZGU6b30sKGZ1bmN0aW9uKEEpe2UoIldlYlJUQyBWQUQgcmVhZHkiKSxJPUEsYigpfSkpKX0oQS5kYXRhLmN0cmwub3B0aW9ucyk7YnJlYWs7Y2FzZSJwcm9jZXNzIjohZnVuY3Rpb24oQSl7aWYoQSYmQS5zYW1wbGVzKXtsZXQgQz1BLnNhbXBsZXM7aWYoQ1swXS5sZW5ndGgscSl7aWYocT0hMSxBLnNhbXBsZVJhdGUhPVEpe3ZhciBCPSJTYW1wbGUtcmF0ZSBtaXNtYXRjaCEgU2hvdWxkIGJlICciK1ErIicgaXMgJyIrQS5zYW1wbGVSYXRlKyInIjt0aHJvdyBjb25zb2xlLmVycm9yKCJBdWRpbyBXb3JrZXIgc2FtcGxlLXJhdGUgZXhjZXB0aW9uIC0gTXNnLjogIitCKSxKU09OLnN0cmluZ2lmeShuZXcgU2FtcGxlUmF0ZUV4Y2VwdGlvbihCKSl9bGV0IGc9QS50eXBlfHxBLnNhbXBsZXNbMF0uY29uc3RydWN0b3IubmFtZTtpZihnLmluZGV4T2YoIkZsb2F0MzIiKT49MCE9YSl7Qj0iQXJyYXkgdHlwZSBtaXNtYXRjaCEgSW5wdXQgc2FtcGxlcyBhcmUgb2YgdHlwZSAnIitnKyInIGJ1dCBleHBlY3RlZDogIisoYT8iRmxvYXQzMiI6IkludDE2Iik7dGhyb3cgY29uc29sZS5lcnJvcigiQXVkaW8gV29ya2VyIHR5cGUgZXhjZXB0aW9uIC0gTXNnLjogIitCKSxKU09OLnN0cmluZ2lmeShuZXcgQXJyYXlUeXBlRXhjZXB0aW9uKEIpKX19YT8oQ29tbW9uQ29udmVydGVycy5mbG9hdFRvMTZCaXRQQ00oUlswXSxDWzBdKSxzLnB1c2goW1JbMF1dKSk6cy5wdXNoKEMpO2Zvcih2YXIgZz1bXTtzLmZyYW1lc0F2YWlsYWJsZT49Yzspe3MucHVsbChGKTt2YXIgRT1JLmdldFZvaWNlQWN0aXZpdHkoUSxGWzBdKTtnLnB1c2goRSksRT8oZSsrLG0mJmU+bSYmKGU9bSkpOihlLT1NLGU8MCYmKGU9MCkpLEomJksoRSl9Zy5sZW5ndGg+MCYmcG9zdE1lc3NhZ2Uoe3ZvaWNlQWN0aXZpdHk6Zyx2b2ljZUVuZXJneTplfSl9fShBLmRhdGEuY3RybC5kYXRhKTticmVhaztjYXNlImhhbmRsZSI6QS5kYXRhLmN0cmwuZGF0YTticmVhaztjYXNlInN0YXJ0IjpBLmRhdGEuY3RybC5vcHRpb25zLFgoKTticmVhaztjYXNlInN0b3AiOkEuZGF0YS5jdHJsLm9wdGlvbnM7YnJlYWs7Y2FzZSJyZXNldCI6QS5kYXRhLmN0cmwub3B0aW9ucyx4KCk7YnJlYWs7Y2FzZSJyZWxlYXNlIjpjYXNlImNsb3NlIjpBLmRhdGEuY3RybC5vcHRpb25zLHM9bnVsbCxGPW51bGwsUj1udWxsLEk9bnVsbCxwb3N0TWVzc2FnZSh7bW9kdWxlU3RhdGU6OX0pO2JyZWFrO2RlZmF1bHQ6Y29uc29sZS5sb2coIlVua25vd24gY29udHJvbCBtZXNzYWdlOiIsQS5kYXRhKX19O2xldCBRLEUsQyxpLG8sYSxlLG4sdCxzLHIsRCxjLEYsUixHLHcsZixkLGgsbCx1LHksVSxOLFMsWSxwLHEsSD0id2VicnRjLXZhZC13b3JrZXItIitNYXRoLnJvdW5kKDFlNipNYXRoLnJhbmRvbSgpKSsiLSIrRGF0ZS5ub3coKSxrPSExLEw9ITEsbT01MCxNPTIsSj0hMTtmdW5jdGlvbiB4KCl7aWYoQz5pKXRocm93IEpTT04uc3RyaW5naWZ5KG5ldyBCdWZmZXJTaXplRXhjZXB0aW9uKCJQcm9jZXNzb3IgJ2J1ZmZlclNpemUnIGhhcyB0byBiZSBiaWdnZXIgdGhhbiAnaW5wdXRTYW1wbGVTaXplJyEgQ3VycmVudGx5OiAiK0MrIiA+ICIraSkpO2lmKCFbOGUzLDE2ZTMsMzJlMyw0OGUzXS5pbmNsdWRlcyhRKSl0aHJvdyBKU09OLnN0cmluZ2lmeShuZXcgU2FtcGxlUmF0ZUV4Y2VwdGlvbigiRm9yIHRoaXMgbW9kdWxlIHNhbXBsZS1yYXRlIGhhcyB0byBiZSBvbmUgb2Y6IDgwMDAsIDE2MDAwLCAzMjAwMCwgNDgwMDAiKSk7dmFyIEI9W1EvMWUzKjMwLFEvMWUzKjIwLFEvMWUzKjEwXTtjPTA7Zm9yKGxldCBBPTA7QTxCLmxlbmd0aDtBKyspaWYoaT09QltBXXx8aSVCW0FdPT0wKXtyPWkvQltBXSxjPUJbQV07YnJlYWt9aWYoMD09Yyl0aHJvdyBKU09OLnN0cmluZ2lmeShuZXcgQnVmZmVyU2l6ZUV4Y2VwdGlvbigiRm9yIHNhbXBsZS1yYXRlICciK1ErIicgdGhlICdidWZmZXJTaXplJyBoYXMgdG8gYmUgZXF1YWwgb3IgYSBtdWx0aXBsZSBvZjogIitCLmpvaW4oIiwgIikpKTtzPW5ldyBBKGkrQyxFLCJJbnQxNiIpLEY9W25ldyBJbnQxNkFycmF5KGMpXSxhJiYoUj1bbmV3IEludDE2QXJyYXkoQyldKSxuPTFlMy9RLEQ9TWF0aC5yb3VuZChjKm4pLFgoKSxxPSEwfWZ1bmN0aW9uIGIoKXtwb3N0TWVzc2FnZSh7bW9kdWxlU3RhdGU6MSxtb2R1bGVJbmZvOnttb2R1bGVJZDpILGlucHV0U2FtcGxlUmF0ZTpRLGNoYW5uZWxDb3VudDpFLGlucHV0U2FtcGxlU2l6ZTpDLGlucHV0SXNGbG9hdDMyOmEscHJvY2Vzc0J1ZmZlclNpemU6aSx2YWRNb2RlOkkuZ2V0TW9kZSgpLHZhZEZyYW1lc01heDpyLHZhZEJ1ZmZlclNpemU6Yyx2YWRGcmFtZVRpbWVNczpELHZvaWNlRW5lcmd5Q2FwOm0sdm9pY2VFbmVyZ3lEcm9wUmF0ZTpNLHVzZVNlcXVlbmNlQW5hbHl6ZXI6Sn19KX1mdW5jdGlvbiBLKEEpezA9PUE/eSYmKHUrPUQsdT53P1U9ITA6dT5mJiYobD0wKSk6KGwrPUQsIXkmJmw+Rz8oeT0hMCxaKDEsInZvaWNlX3N0YXJ0IikpOmw+RyYmKHU9MCkpLHkmJlU/Tj0hMDp5JiZsPmgmJihTfHwoUz0hMCxwPURhdGUubm93KCksWigyLCJzZXF1ZW5jZV9zdGFydGVkIikpKSxOPyhZPSEwLFooMywiZmluaXNoZWRfdm9pY2UiKSk6eSYmUyYmRGF0ZS5ub3coKS1wPmQmJihZPSEwLFooNCwiZmluaXNoZWRfdm9pY2VfbWF4dGltZSIpKSxZJiYoUyYmWig1LCJzZXF1ZW5jZV9jb21wbGV0ZSIpLFgoKSl9ZnVuY3Rpb24gWCgpe2U9MCx5PSExLE49ITEsVT0hMSxsPTAsdT0wLFM9ITEscD0wLFk9ITF9ZnVuY3Rpb24gWihBLEIsZyl7Qj17dmFkU2VxdWVuY2VDb2RlOkEsdmFkU2VxdWVuY2VNc2c6Qn07aWYoNT09PUEpQi52YWRTZXF1ZW5jZVN0YXJ0ZWQ9cCxCLnZhZFNlcXVlbmNlRW5kZWQ9RGF0ZS5ub3coKTtwb3N0TWVzc2FnZShCKX19KCk7Cgo=",null,!1),c=C("Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwohZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Y2xhc3MgZXtjb25zdHJ1Y3RvcihlLHQsbil7dGhpcy5fcmVhZEluZGV4PTAsdGhpcy5fd3JpdGVJbmRleD0wLHRoaXMuX2ZyYW1lc0F2YWlsYWJsZT0wLHRoaXMuX2NoYW5uZWxDb3VudD10LHRoaXMuX2xlbmd0aD1lLHRoaXMuX2NoYW5uZWxEYXRhPVtdO2ZvcihsZXQgdD0wO3Q8dGhpcy5fY2hhbm5lbENvdW50OysrdCl0aGlzLl9jaGFubmVsRGF0YVt0XT0iVWludDE2Ij09bj9uZXcgVWludDE2QXJyYXkoZSk6IkludDE2Ij09bj9uZXcgSW50MTZBcnJheShlKToiVWludDgiPT1uP25ldyBVaW50OEFycmF5KGUpOiJJbnQ4Ij09bj9uZXcgSW50OEFycmF5KGUpOm5ldyBGbG9hdDMyQXJyYXkoZSl9Z2V0IGZyYW1lc0F2YWlsYWJsZSgpe3JldHVybiB0aGlzLl9mcmFtZXNBdmFpbGFibGV9cHVzaChlLHQpe2xldCBuPWVbMF0ubGVuZ3RoLHM9dHx8ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlW3RdW25dfTtmb3IobGV0IHQ9MDt0PG47Kyt0KXtsZXQgbj0odGhpcy5fd3JpdGVJbmRleCt0KSV0aGlzLl9sZW5ndGg7Zm9yKGxldCBvPTA7bzx0aGlzLl9jaGFubmVsQ291bnQ7KytvKXRoaXMuX2NoYW5uZWxEYXRhW29dW25dPXMoZSxvLHQpfXRoaXMuX3dyaXRlSW5kZXgrPW4sdGhpcy5fd3JpdGVJbmRleD49dGhpcy5fbGVuZ3RoJiYodGhpcy5fd3JpdGVJbmRleD10aGlzLl93cml0ZUluZGV4LXRoaXMuX2xlbmd0aCksdGhpcy5fZnJhbWVzQXZhaWxhYmxlKz1uLHRoaXMuX2ZyYW1lc0F2YWlsYWJsZT50aGlzLl9sZW5ndGgmJih0aGlzLl9mcmFtZXNBdmFpbGFibGU9dGhpcy5fbGVuZ3RoKX1wdWxsKGUsdCl7aWYoMD09PXRoaXMuX2ZyYW1lc0F2YWlsYWJsZSlyZXR1cm47bGV0IG49ZVswXS5sZW5ndGgscz10fHxmdW5jdGlvbihlLHQsbil7cmV0dXJuIGVbdF1bbl19O2ZvcihsZXQgdD0wO3Q8bjsrK3Qpe2xldCBuPSh0aGlzLl9yZWFkSW5kZXgrdCkldGhpcy5fbGVuZ3RoO2ZvcihsZXQgbz0wO288dGhpcy5fY2hhbm5lbENvdW50OysrbyllW29dW3RdPXModGhpcy5fY2hhbm5lbERhdGEsbyxuKX10aGlzLl9yZWFkSW5kZXgrPW4sdGhpcy5fcmVhZEluZGV4Pj10aGlzLl9sZW5ndGgmJih0aGlzLl9yZWFkSW5kZXg9dGhpcy5fcmVhZEluZGV4LXRoaXMuX2xlbmd0aCksdGhpcy5fZnJhbWVzQXZhaWxhYmxlLT1uLHRoaXMuX2ZyYW1lc0F2YWlsYWJsZTwwJiYodGhpcy5fZnJhbWVzQXZhaWxhYmxlPTApfX1jbGFzcyB0e2NvbnN0cnVjdG9yKGUsdCxuLHMsbyl7dGhpcy5zZXJ2ZXJVcmw9KGV8fCJodHRwOi8vbG9jYWxob3N0OjIwNzQxIikucmVwbGFjZSgiLyQiLCIiKSx0aGlzLnNvY2tldEhvc3Q9dGhpcy5zZXJ2ZXJVcmwucmVwbGFjZSgvXihodHRwKS8sIndzIikrIi9zb2NrZXQiLHRoaXMuY2xpZW50SWQ9dHx8ImFueSIsdGhpcy5hY2Nlc3NUb2tlbj1ufHwidGVzdDEyMzQiLHN8fChzPXt9KSxvfHwobz17fSksdGhpcy5zZXJ2ZXJWZXJzaW9uPSIiLHRoaXMuYXNyRW5naW5lPSIiLHRoaXMuYXZhaWxhYmxlTGFuZ3VhZ2VzPVtdLHRoaXMuYXZhaWxhYmxlTW9kZWxzPVtdLHRoaXMuYXZhaWxhYmxlRmVhdHVyZXM9W10sdGhpcy5hY3RpdmVPcHRpb25zPU9iamVjdC5hc3NpZ24oe3NhbXBsZXJhdGU6MTZlMyxjb250aW51b3VzOiExLGxhbmd1YWdlOiIiLHRhc2s6IiIsbW9kZWw6IiJ9LHMpLHRoaXMuYWN0aXZlTGFuZ3VhZ2VDb2RlPXRoaXMuYWN0aXZlT3B0aW9ucy5sYW5ndWFnZXx8IiIsdGhpcy5hY3RpdmVBc3JUYXNrPXRoaXMuYWN0aXZlT3B0aW9ucy50YXNrfHwiIix0aGlzLmFjdGl2ZUFzck1vZGVsPXRoaXMuYWN0aXZlT3B0aW9ucy5tb2RlbHx8IiIsdGhpcy5waHJhc2VzPXRoaXMuYWN0aXZlT3B0aW9ucy5waHJhc2VzfHxbXSx0aGlzLmhvdFdvcmRzPXRoaXMuYWN0aXZlT3B0aW9ucy5ob3RXb3Jkc3x8W10sdGhpcy5fbXNnSWQ9MCx0aGlzLndlYnNvY2tldD12b2lkIDAsdGhpcy5fY29ubmVjdGlvbklkPTAsdGhpcy5hdXRvQ2xvc2VPbkxhc3RGaW5hbD0hMCx0aGlzLmNvbm5lY3Rpb25Jc09wZW49ITEsdGhpcy5pc1JlYWR5Rm9yU3RyZWFtPSExLHRoaXMuX29uT3Blbj1vLm9uT3Blbnx8ZnVuY3Rpb24oKXt9LHRoaXMuX29uUmVhZHk9by5vblJlYWR5fHxmdW5jdGlvbihlKXt9LHRoaXMuX29uQ2xvc2U9by5vbkNsb3NlfHxmdW5jdGlvbihlKXt9LHRoaXMuX29uUmVzdWx0PW8ub25SZXN1bHR8fGZ1bmN0aW9uKGUpe30sdGhpcy5fb25FcnJvcj1vLm9uRXJyb3J8fGZ1bmN0aW9uKGUpe2NvbnNvbGUuZXJyb3IoIlNlcGlhU3R0U29ja2V0Q2xpZW50IEVSUk9SIixlKX0sdGhpcy5fc2tpcEF1dG9XZWxjb21lPW8uc2tpcEF1dG9XZWxjb21lLHRoaXMuX2RvRGVidWc9by5kb0RlYnVnfWxvZyhlKXt0aGlzLl9kb0RlYnVnJiZjb25zb2xlLmxvZygiU2VwaWFTdHRTb2NrZXRDbGllbnQiLGUpfXBpbmdTZXJ2ZXIoZSx0KXtjb25zdCBuPW5ldyBBYm9ydENvbnRyb2xsZXI7c2V0VGltZW91dCgoZnVuY3Rpb24oKXtuLmFib3J0KCl9KSw4ZTMpLGZldGNoKHRoaXMuc2VydmVyVXJsKyIvcGluZyIse3NpZ25hbDpuLnNpZ25hbH0pLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiBlLmpzb24oKX0pKS50aGVuKChmdW5jdGlvbih0KXtlJiZlKHQpfSkpLmNhdGNoKChmdW5jdGlvbihlKXt0JiZ0KGUpfSkpfWxvYWRTZXJ2ZXJJbmZvKGUsdCl7Y29uc3Qgbj1uZXcgQWJvcnRDb250cm9sbGVyO3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7bi5hYm9ydCgpfSksOGUzKSxmZXRjaCh0aGlzLnNlcnZlclVybCsiL3NldHRpbmdzIix7bWV0aG9kOiJHRVQiLHNpZ25hbDpuLnNpZ25hbH0pLnRoZW4oKGZ1bmN0aW9uKGUpe2lmKGUub2spcmV0dXJuIGUuanNvbigpO3QmJnQoe25hbWU6IkZldGNoRXJyb3IiLG1lc3NhZ2U6ZS5zdGF0dXNUZXh0LGNvZGU6ZS5zdGF0dXN9KX0pKS50aGVuKChmdW5jdGlvbih0KXt0JiZ0LnNldHRpbmdzPyh0aGlzLl9oYW5kbGVTZXJ2ZXJTZXR0aW5ncyh0LnNldHRpbmdzKSxlJiZlKHQuc2V0dGluZ3MpKTplJiZlKHt9KX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7dCYmdChlKX0pKX1faGFuZGxlU2VydmVyU2V0dGluZ3MoZSl7dGhpcy5zZXJ2ZXJWZXJzaW9uPWUudmVyc2lvbix0aGlzLmFzckVuZ2luZT1lLmVuZ2luZXx8IiIsdGhpcy5hdmFpbGFibGVMYW5ndWFnZXM9ZS5sYW5ndWFnZXN8fFtdLHRoaXMuYXZhaWxhYmxlTW9kZWxzPWUubW9kZWxzfHxbXSx0aGlzLmF2YWlsYWJsZUZlYXR1cmVzPWUuZmVhdHVyZXN8fFtdfW5ld01lc3NhZ2VJZCgpe3ZhciBlPSsrdGhpcy5fbXNnSWQ7cmV0dXJuIGU+OTk5OTk5JiYoZT0xKSxlfW9wZW5Db25uZWN0aW9uKCl7aWYodGhpcy53ZWJzb2NrZXQmJnRoaXMud2Vic29ja2V0LnJlYWR5U3RhdGU9PXRoaXMud2Vic29ja2V0Lk9QRU4pcmV0dXJuIHRoaXMuX29uRXJyb3Ioe25hbWU6IlNvY2tldENvbm5lY3Rpb25FcnJvciIsbWVzc2FnZToiQ29ubmVjdGlvbiB3YXMgYWxyZWFkeSBPUEVOIn0pLCExO3ZhciBlLHQ9dGhpcztyZXR1cm4gdGhpcy53ZWJzb2NrZXQ9bmV3IFdlYlNvY2tldCh0aGlzLnNvY2tldEhvc3QpLHRoaXMud2Vic29ja2V0Lm9ub3Blbj1mdW5jdGlvbigpe3QubG9nKCJDb25uZWN0aW9uIE9QRU4iKSx0LmNvbm5lY3Rpb25Jc09wZW49ITAsdC5fY29ubmVjdGlvbklkKyssZT10Ll9jb25uZWN0aW9uSWQsdC5fb25PcGVuKCksdC5fc2tpcEF1dG9XZWxjb21lfHx0LnNlbmRXZWxjb21lKCl9LHRoaXMud2Vic29ja2V0Lm9uY2xvc2U9ZnVuY3Rpb24oZSl7dC5sb2coIkNvbm5lY3Rpb24gQ0xPU0VEIiksdC5jb25uZWN0aW9uSXNPcGVuPSExLHQuaXNSZWFkeUZvclN0cmVhbT0hMSx0Ll9vbkNsb3NlKGUpfSx0aGlzLndlYnNvY2tldC5vbm1lc3NhZ2U9ZnVuY3Rpb24oZSl7aWYoZSYmZS5kYXRhJiYic3RyaW5nIj09dHlwZW9mIGUuZGF0YSl7dC5sb2coIkNvbm5lY3Rpb24gTUVTU0FHRTogIitlLmRhdGEpO3RyeXt0LmhhbmRsZVNvY2tldE1lc3NhZ2UoSlNPTi5wYXJzZShlLmRhdGEpKX1jYXRjaChlKXtjb25zb2xlLmVycm9yKCJTZXBpYVN0dFNvY2tldENsaWVudCAtIE1lc3NhZ2VQYXJzZXJFcnJvciIsZSksdC5oYW5kbGVTb2NrZXRFcnJvcih7bmFtZToiU29ja2V0TWVzc2FnZVBhcnNlckVycm9yIixtZXNzYWdlOiJNZXNzYWdlIGhhbmRsZXIgc2F3IGludmxhaWQgSlNPTj8hIn0pfX19LHRoaXMud2Vic29ja2V0Lm9uZXJyb3I9ZnVuY3Rpb24obil7ZT90LmhhbmRsZVNvY2tldEVycm9yKG4pOnQuX29uRXJyb3Ioe25hbWU6IlNvY2tldENvbm5lY3Rpb25FcnJvciIsbWVzc2FnZToiRmFpbGVkIHRvIGNvbm5lY3QifSl9LCEwfWNsb3NlQ29ubmVjdGlvbigpe3JldHVybiEoIXRoaXMud2Vic29ja2V0fHx0aGlzLndlYnNvY2tldC5yZWFkeVN0YXRlIT10aGlzLndlYnNvY2tldC5PUEVOKSYmKHRoaXMud2Vic29ja2V0LmNsb3NlKCksITApfWhhbmRsZVNvY2tldE1lc3NhZ2UoZSl7ImVycm9yIj09ZS50eXBlP3RoaXMuaGFuZGxlU29ja2V0RXJyb3IoZSk6InBpbmciPT1lLnR5cGU/dGhpcy5zZW5kSnNvbih7dHlwZToicG9uZyIsbXNnX2lkOmUubXNnX2lkfSk6IndlbGNvbWUiPT1lLnR5cGU/KHRoaXMubG9nKCJDb25uZWN0aW9uIFdFTENPTUUiKSx0aGlzLmFjdGl2ZU9wdGlvbnM9ZS5pbmZvP2UuaW5mby5vcHRpb25zOnt9LHRoaXMuYWN0aXZlTGFuZ3VhZ2VDb2RlPXRoaXMuYWN0aXZlT3B0aW9ucy5sYW5ndWFnZXx8IiIsdGhpcy5hY3RpdmVBc3JUYXNrPXRoaXMuYWN0aXZlT3B0aW9ucy50YXNrfHwiIix0aGlzLmFjdGl2ZUFzck1vZGVsPXRoaXMuYWN0aXZlT3B0aW9ucy5tb2RlbHx8IiIsdGhpcy5pc1JlYWR5Rm9yU3RyZWFtPSEwLHRoaXMuX29uUmVhZHkodGhpcy5hY3RpdmVPcHRpb25zKSk6InJlc3VsdCI9PWUudHlwZT8odGhpcy5fb25SZXN1bHQoZSksZS5pc0ZpbmFsJiYhdGhpcy5hY3RpdmVPcHRpb25zLmNvbnRpbnVvdXMmJnRoaXMuYXV0b0Nsb3NlT25MYXN0RmluYWwmJnRoaXMuY2xvc2VDb25uZWN0aW9uKCkpOmUudHlwZX1oYW5kbGVTb2NrZXRFcnJvcihlKXt2YXIgdD17fTt0PWU/InN0cmluZyI9PXR5cGVvZiBlP3tuYW1lOiJTb2NrZXRNZXNzYWdlRXJyb3IiLG1lc3NhZ2U6ZX06e25hbWU6ZS5uYW1lfHwiU29ja2V0TWVzc2FnZUVycm9yIixtZXNzYWdlOmUubWVzc2FnZXx8InVua25vd24iLGRldGFpbHM6ZX06e25hbWU6IlNvY2tldE1lc3NhZ2VFcnJvciIsbWVzc2FnZToidW5rbm93biJ9LHRoaXMuX29uRXJyb3IodCksdGhpcy5jbG9zZUNvbm5lY3Rpb24oKX1zZW5kSnNvbihlKXtyZXR1cm4gdGhpcy53ZWJzb2NrZXQmJnRoaXMud2Vic29ja2V0LnJlYWR5U3RhdGU9PXRoaXMud2Vic29ja2V0Lk9QRU4/KHRoaXMud2Vic29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoZSkpLCEwKToodGhpcy5fb25FcnJvcih7bmFtZToiU29ja2V0Q29ubmVjdGlvbkVycm9yIixtZXNzYWdlOiJDb25uZWN0aW9uIGlzIGNsb3NlZC4gQ2Fubm90IHNlbmQgbWVzc2FnZS4ifSksITEpfXNlbmRCeXRlcyhlKXtyZXR1cm4gdGhpcy53ZWJzb2NrZXQmJnRoaXMud2Vic29ja2V0LnJlYWR5U3RhdGU9PXRoaXMud2Vic29ja2V0Lk9QRU4/KHRoaXMud2Vic29ja2V0LnNlbmQoZSksITApOih0aGlzLl9vbkVycm9yKHtuYW1lOiJTb2NrZXRDb25uZWN0aW9uRXJyb3IiLG1lc3NhZ2U6IkNvbm5lY3Rpb24gaXMgY2xvc2VkLiBDYW5ub3Qgc2VuZCBtZXNzYWdlLiJ9KSwhMSl9c2VuZE1lc3NhZ2UoZSl7cmV0dXJuIHRoaXMuc2VuZEpzb24oe3R5cGU6ImNoYXQiLGRhdGE6e3RleHQ6ZX0sbXNnX2lkOnRoaXMubmV3TWVzc2FnZUlkKCl9KX1zZW5kV2VsY29tZShlKXt2YXIgdD1lfHx0aGlzLmFjdGl2ZU9wdGlvbnM7cmV0dXJuIHRoaXMuc2VuZEpzb24oe3R5cGU6IndlbGNvbWUiLGRhdGE6dCxjbGllbnRfaWQ6dGhpcy5jbGllbnRJZCxhY2Nlc3NfdG9rZW46dGhpcy5hY2Nlc3NUb2tlbixtc2dfaWQ6dGhpcy5uZXdNZXNzYWdlSWQoKX0pfXNlbmRBdWRpb0VuZChlLHQpe3JldHVybiB0aGlzLnNlbmRKc29uKHt0eXBlOiJhdWRpb2VuZCIsZGF0YTp7Ynl0ZUxlbmd0aDplLGJ1ZmZlck9yVGltZUxpbWl0OnR9LG1zZ19pZDp0aGlzLm5ld01lc3NhZ2VJZCgpfSl9fW9ubWVzc2FnZT1mdW5jdGlvbihlKXtpZihlLmRhdGEuY3RybClzd2l0Y2goZS5kYXRhLmN0cmwuYWN0aW9uKXtjYXNlImNvbnN0cnVjdCI6IWZ1bmN0aW9uKGUpe2lmKHkpcmV0dXJuIHZvaWQgY29uc29sZS5lcnJvcigiU3R0U29ja2V0V29ya2VyIC0gQ29uc3RydWN0b3Igd2FzIGNhbGxlZCB0d2ljZSEgMm5kIGNhbGwgd2FzIGlnbm9yZWQgYnV0IHRoaXMgc2hvdWxkIGJlIGZpeGVkISIsIi0iLHcpO3k9ITA7Yj1lLnNldHVwLmRvRGVidWd8fCExLF89ZS5zZXR1cC5yZXR1cm5BdWRpb0ZpbGV8fCExLHI9ZS5zZXR1cC5pbnB1dFNhbXBsZVJhdGV8fGUuc2V0dXAuY3R4SW5mby50YXJnZXRTYW1wbGVSYXRlfHxlLnNldHVwLmN0eEluZm8uc2FtcGxlUmF0ZSxjPWUuc2V0dXAuaW5wdXRTYW1wbGVTaXplfHw1MTIsbD0xLHU9bnVsbCE9ZS5zZXR1cC5sb29rYmFja0J1ZmZlck1zP2Uuc2V0dXAubG9va2JhY2tCdWZmZXJNczowLGg9bnVsbCE9ZS5zZXR1cC5pc0Zsb2F0MzImJmUuc2V0dXAuaXNGbG9hdDMyLFM9bnVsbCE9ZS5zZXR1cC5yZWNvcmRCdWZmZXJMaW1pdE1zP3IqZS5zZXR1cC5yZWNvcmRCdWZmZXJMaW1pdE1zLzFlMy9jOm51bGwhPWUuc2V0dXAucmVjb3JkQnVmZmVyTGltaXRLYj8xMDI0KmUuc2V0dXAucmVjb3JkQnVmZmVyTGltaXRLYi8oMipjKTo1MjQyODgwLygyKmMpO1M9TWF0aC5jZWlsKFMpLFM8MCYmKFM9MCk7aWYodj1udWxsIT1lLnNldHVwLmNvbnRpbnVvdXMmJmUuc2V0dXAuY29udGludW91cyxuPWUuc2V0dXAuc29ja2V0VXJsfHxlLnNldHVwLnNlcnZlclVybHx8Imh0dHA6Ly9sb2NhbGhvc3Q6MjA3NDEiLHM9ZS5zZXR1cC5jbGllbnRJZHx8ImFueSIsbz1lLnNldHVwLmFjY2Vzc1Rva2VufHwidGVzdDEyMzQiLGE9ZS5zZXR1cC5tZXNzYWdlRm9ybWF0fHwiZGVmYXVsdCIsImRlYnVnIj09bilFPSEwLF89ITA7ZWxzZXt2YXIgZD1lLnNldHVwLmVuZ2luZU9wdGlvbnN8fHt9O2Quc2FtcGxlcmF0ZT1yLGQuY29udGludW91cz12LGUuc2V0dXAubGFuZ3VhZ2UmJihkLmxhbmd1YWdlPWUuc2V0dXAubGFuZ3VhZ2UpLGUuc2V0dXAudGFzayYmKGQudGFzaz1lLnNldHVwLnRhc2spLGUuc2V0dXAubW9kZWwmJihkLm1vZGVsPWUuc2V0dXAubW9kZWwpLG51bGwhPWUuc2V0dXAub3B0aW1pemVGaW5hbFJlc3VsdCYmKGQub3B0aW1pemVGaW5hbFJlc3VsdD1lLnNldHVwLm9wdGltaXplRmluYWxSZXN1bHQpLGQuZG9EZWJ1Zz1iO3ZhciBnPXtvbk9wZW46ZnVuY3Rpb24oKXtiJiZjb25zb2xlLmVycm9yKCJTdHRTb2NrZXRXb3JrZXIgLSBERUJVRyAtIENPTk5FQ1RJT04gT1BFTiIpLFcoIm9wZW4iKX0sb25SZWFkeTpmdW5jdGlvbihlKXtiJiZjb25zb2xlLmVycm9yKCJTdHRTb2NrZXRXb3JrZXIgLSBERUJVRyAtIENPTk5FQ1RJT04gUkVBRFkiLGUpLFcoInJlYWR5IixlKSxSKCl9LG9uQ2xvc2U6ZnVuY3Rpb24oKXtiJiZjb25zb2xlLmVycm9yKCJTdHRTb2NrZXRXb3JrZXIgLSBERUJVRyAtIENPTk5FQ1RJT04gQ0xPU0VEIiksVygiY2xvc2VkIil9LG9uUmVzdWx0OmZ1bmN0aW9uKGUpe2ImJmNvbnNvbGUuZXJyb3IoIlN0dFNvY2tldFdvcmtlciAtIERFQlVHIC0gQ09OTkVDVElPTiBSRVNVTFQiLGUpLCJ3ZWJTcGVlY2hBcGkiPT1hP3goZS5pc0ZpbmFsLGUudHJhbnNjcmlwdCk6TChlKSxlLmlzRmluYWwmJiFPJiZpJiZpLmNvbm5lY3Rpb25Jc09wZW4mJmkuY2xvc2VDb25uZWN0aW9uKCl9LG9uRXJyb3I6ZnVuY3Rpb24oZSl7aWYoZXx8KGU9e25hbWU6IlVua25vd25FcnJvciIsbWVzc2FnZToiVW5rbm93biBlcnJvciJ9KSxjb25zb2xlLmVycm9yKCJTdHRTb2NrZXRXb3JrZXIgLSBDT05ORUNUSU9OIEVSUk9SIixlKSwid2ViU3BlZWNoQXBpIj09YSl7dmFyIHQ9InVua25vd24iOyJTb2NrZXRDb25uZWN0aW9uRXJyb3IiPT1lLm5hbWU/dD0ibmV0d29yayI6IlVuYXV0aG9yaXplZCI9PWUubmFtZSYmKHQ9InNlcnZpY2Utbm90LWFsbG93ZWQiKSxCKHQsZS5tZXNzYWdlfHxlLm5hbWV8fCIiKX1lbHNlIWZ1bmN0aW9uKGUpe2UmJiFlLnR5cGUmJihlLnR5cGU9ImVycm9yIik7cG9zdE1lc3NhZ2Uoe3JlY29nbml0aW9uRXZlbnQ6ZSxldmVudEZvcm1hdDoiZGVmYXVsdCJ9KX0oZSk7TyYmRighMSx7fSwhMCl9fTtpPW5ldyB0KG4scyxvLGQsZyl9TSgpLHBvc3RNZXNzYWdlKHttb2R1bGVTdGF0ZToxLG1vZHVsZUluZm86e21vZHVsZUlkOncsaW5wdXRTYW1wbGVSYXRlOnIsaW5wdXRTYW1wbGVTaXplOmMsaW5wdXRJc0Zsb2F0MzI6aCxjaGFubmVsQ291bnQ6bCxsb29rYmFja0J1ZmZlclNpemVLYjpNYXRoLmNlaWwoMipwLzEwMjQpLGxvb2tiYWNrTGltaXRNczp1LHJlY29yZExpbWl0TXM6TWF0aC5jZWlsKFMqYyoxZTMvciksc3R0U2VydmVyVXJsOm4sc3R0U2VydmVyT3B0aW9uczppP2kuYWN0aXZlT3B0aW9uczp7fX19KX0oZS5kYXRhLmN0cmwub3B0aW9ucyk7YnJlYWs7Y2FzZSJwcm9jZXNzIjohZnVuY3Rpb24oZSl7aWYoZSYmZS5zYW1wbGVzKXtpZihBKXtpZihBPSExLGUuc2FtcGxlUmF0ZSE9cil7dmFyIHQ9IlNhbXBsZS1yYXRlIG1pc21hdGNoISBTaG91bGQgYmUgJyIrcisiJyBpcyAnIitlLnNhbXBsZVJhdGUrIiciO3Rocm93IGNvbnNvbGUuZXJyb3IoIkF1ZGlvIFdvcmtlciBzYW1wbGUtcmF0ZSBleGNlcHRpb24gLSBNc2cuOiAiK3QpLEpTT04uc3RyaW5naWZ5KG5ldyBUKHQpKX12YXIgbj1lLnR5cGV8fGUuc2FtcGxlc1swXS5jb25zdHJ1Y3Rvci5uYW1lO2lmKG4uaW5kZXhPZigiRmxvYXQzMiIpPj0wIT1oKXt0PSJBcnJheSB0eXBlIG1pc21hdGNoISBJbnB1dCBzYW1wbGVzIGFyZSBvZiB0eXBlICciK24rIicgYnV0IGV4cGVjdGVkOiAiKyhoPyJGbG9hdDMyIjoiSW50MTYiKTt0aHJvdyBjb25zb2xlLmVycm9yKCJBdWRpbyBXb3JrZXIgdHlwZSBleGNlcHRpb24gLSBNc2cuOiAiK3QpLEpTT04uc3RyaW5naWZ5KG5ldyBKKHQpKX19Tz9mdW5jdGlvbihlKXtpZigwPT1mLmxlbmd0aCl7dmFyIHQ7aWYoZi5wdXNoKChzPXIsbz1sLHU9MTYscD0yLG09KG49dm9pZCAwKT9uZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDQ0K24ubGVuZ3RoKnApKTpuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDQ0KSksdz1uP24ubGVuZ3RoOlMqYyxQKG0sMCwiUklGRiIpLG0uc2V0VWludDMyKDQsMzYrdypvKnAsITApLFAobSw4LCJXQVZFIiksUChtLDEyLCJmbXQgIiksbS5zZXRVaW50MzIoMTYsMTYsITApLG0uc2V0VWludDE2KDIwLDEsITApLG0uc2V0VWludDE2KDIyLG8sITApLG0uc2V0VWludDMyKDI0LHMsITApLG0uc2V0VWludDMyKDI4LHMqcCpvLCEwKSxtLnNldFVpbnQxNigzMixvKnAsITApLG0uc2V0VWludDE2KDM0LHUsITApLFAobSwzNiwiZGF0YSIpLG0uc2V0VWludDMyKDQwLHcqbypwLCEwKSxtKSksZyYmZy5mcmFtZXNBdmFpbGFibGUpdD1oP1tuZXcgRmxvYXQzMkFycmF5KGcuZnJhbWVzQXZhaWxhYmxlKV06W25ldyBJbnQxNkFycmF5KGcuZnJhbWVzQXZhaWxhYmxlKV0sZy5wdWxsKHQpLGYucHVzaChHKHZvaWQgMCx0WzBdLHIsbCxoKSk7YiYmY29uc29sZS5lcnJvcigiU3R0U29ja2V0V29ya2VyIC0gREVCVUcgLSBIZWFkZXIgYW5kIExvb2tiYWNrIEJ1ZmZlciAob3B0aW9uYWwpIixmKX12YXIgbixzLG8sdSxwLG0sdztlJiZmLnB1c2goRyh2b2lkIDAsZS5zYW1wbGVzWzBdLHIsbCxoKSk7RT9mLmxlbmd0aD09TWF0aC5jZWlsKFMvNCkmJihiJiZjb25zb2xlLmVycm9yKCJTdHRTb2NrZXRXb3JrZXIgLSBERUJVRyAtIFJlYWNoZWQgYSBxdWFydGVyIG9mIG1heC4gdGltZSIsZi5sZW5ndGgpLCJ3ZWJTcGVlY2hBcGkiPT1hP3goITEsIkVuZCBvZiAuLi4iKTpMKHt0eXBlOiJyZXN1bHQiLG1zZ19pZDpEYXRlLm5vdygpLGNvZGU6MjAwLHRyYW5zY3JpcHQ6IkVuZCBvZiAuLi4iLGlzRmluYWw6ITF9KSk6aSYmaS5jb25uZWN0aW9uSXNPcGVuJiZpLmlzUmVhZHlGb3JTdHJlYW0mJlIoKTtTJiZmLmxlbmd0aD49UyYmZnVuY3Rpb24oKXtpZih2KXt2YXIgZT1mLmxlbmd0aC1TO2srPWUsZi5zcGxpY2UoMCxlKX1lbHNlIE8mJkYoITEpfSgpO2R8fChkPSEwKX0oZSk6dSYmIWQmJmcucHVzaChlLnNhbXBsZXMpfX0oZS5kYXRhLmN0cmwuZGF0YSk7YnJlYWs7Y2FzZSJoYW5kbGUiOmUuZGF0YS5jdHJsLmRhdGE7YnJlYWs7Y2FzZSJzdGFydCI6ZS5kYXRhLmN0cmwub3B0aW9uczticmVhaztjYXNlInN0b3AiOmUuZGF0YS5jdHJsLm9wdGlvbnMsTyYmRighMSk7YnJlYWs7Y2FzZSJyZXNldCI6IWZ1bmN0aW9uKGUpe2kmJmkuY29ubmVjdGlvbklzT3BlbiYmaS5jbG9zZUNvbm5lY3Rpb24oKTtNKCl9KGUuZGF0YS5jdHJsLm9wdGlvbnMpO2JyZWFrO2Nhc2UicmVsZWFzZSI6Y2FzZSJjbG9zZSI6IWZ1bmN0aW9uKGUpe2kmJmkuY29ubmVjdGlvbklzT3BlbiYmaS5jbG9zZUNvbm5lY3Rpb24oKTtnPW51bGwsZj1udWxsLG09dm9pZCAwLGs9dm9pZCAwLE89ITEsQz0wLEk9MCxwb3N0TWVzc2FnZSh7bW9kdWxlU3RhdGU6OX0pfShlLmRhdGEuY3RybC5vcHRpb25zKTticmVhaztkZWZhdWx0OmNvbnNvbGUuZXJyb3IoIlN0dFNvY2tldFdvcmtlciAtIFVua25vd24gY29udHJvbCBtZXNzYWdlOiIsZS5kYXRhKX1udWxsIT1lLmRhdGEuZ2F0ZSYmKGImJmNvbnNvbGUuZXJyb3IoIlN0dFNvY2tldFdvcmtlciAtIERFQlVHIC0gTWVzc2FnZSIsZS5kYXRhKSxGKGUuZGF0YS5nYXRlJiYib3BlbiI9PWUuZGF0YS5nYXRlLGUuZGF0YS5nYXRlT3B0aW9ucykpfTtsZXQgbixzLG8saSxhLHIsYyxsLGgsdSxkLHAsZyxmLG0sayxTLHYsdz0ic3R0LXNvY2tldC13b3JrZXItIitNYXRoLnJvdW5kKDFlNipNYXRoLnJhbmRvbSgpKSsiLSIrRGF0ZS5ub3coKSxiPSExLEU9ITEsXz0hMSx5PSExLE89ITEsQz0wLEk9MCxBPSEwO2Z1bmN0aW9uIE0oKXtmPW51bGwsZz1udWxsLGQ9ITEsdT8ocD1NYXRoLnJvdW5kKHUvMWUzKnIpLGc9bmV3IGUocCxsLGg/IkZsb2F0MzIiOiJJbnQxNiIpKTpwPTAsZj1bXSxtPTAsaz0wLEE9ITAsTz0hMSxDPTAsST0wfWZ1bmN0aW9uIEYoZSx0LG4pe3ZhciBzPXttb2R1bGVFdmVudDohMCxnYXRlOnt9fTtpZihlKWY9W10sbT0wLGs9MCxDPURhdGUubm93KCksTz0hMCxzLmdhdGUuaXNPcGVuPSEwLHMuZ2F0ZS5vcGVuZWRBdD1DLGkmJmkub3BlbkNvbm5lY3Rpb24oKTtlbHNle2lmKEk9RGF0ZS5ub3coKSxPPSExLHMuZ2F0ZS5pc09wZW49ITEscy5nYXRlLm9wZW5lZEF0PUMscy5nYXRlLmNsb3NlZEF0PUksRSYmZi5sZW5ndGgmJmYubGVuZ3RoPlMvMylzZXRUaW1lb3V0KChmdW5jdGlvbigpeyJ3ZWJTcGVlY2hBcGkiPT1hP3goITAsIkVuZCBvZiB0ZXN0IG1lc3NhZ2UiKTpMKHt0eXBlOiJyZXN1bHQiLG1zZ19pZDpEYXRlLm5vdygpLGNvZGU6MjAwLHRyYW5zY3JpcHQ6IkVuZCBvZiB0ZXN0IG1lc3NhZ2UiLGlzRmluYWw6ITB9KX0pLDJlMyk7ZWxzZSBpZihpJiZpLmNvbm5lY3Rpb25Jc09wZW4mJmkuaXNSZWFkeUZvclN0cmVhbSl7dmFyIG89TigpO28mJihzLmdhdGUuYnVmZmVyT3JUaW1lTGltaXQ9ITApLEQobyl9IW4mJl8mJmYubGVuZ3RoJiZzZXRUaW1lb3V0KChmdW5jdGlvbigpe3ZhciBlO2U9ZnVuY3Rpb24oKXt2YXIgZSx0PTA7aWYoZi5mb3JFYWNoKChmdW5jdGlvbihlKXt0Kz1lLmJ5dGVMZW5ndGh9KSksdCl7ZT1uZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKHQpKTt2YXIgbj0wO2YuZm9yRWFjaCgoZnVuY3Rpb24odCl7Zm9yKGxldCBzPTA7czx0LmJ5dGVMZW5ndGg7cysrKWUuc2V0VWludDgobix0LmdldFVpbnQ4KHMpKSxuKyt9KSl9cmV0dXJuIGV9KCkscG9zdE1lc3NhZ2Uoe21vZHVsZVJlc3BvbnNlOiEwLG91dHB1dDp7d2F2OmUsc2FtcGxlUmF0ZTpyLHRvdGFsU2FtcGxlczooZS5ieXRlTGVuZ3RoLTQ0KS8yLGNoYW5uZWxzOmx9fSl9KSwxMDApfXBvc3RNZXNzYWdlKHMpfWZ1bmN0aW9uIFIoKXtpZighbSYmZi5sZW5ndGgpe3ZhciBlPW5ldyBCbG9iKGYpO209Zi5sZW5ndGgsVShlKX1lbHNlIGlmKG0mJmYubGVuZ3RoKXt2YXIgdD1mLmxlbmd0aCtrO2lmKG09PXQtMSl7ZT1mW2YubGVuZ3RoLTFdO20rKyxVKGUpfWVsc2UgaWYobTx0KXt2YXIgbj10LW07ZT1uZXcgQmxvYihmLnNsaWNlKC0xKm4pKTttKz1uLFUoZSl9fUkmJkQoTigpKX1mdW5jdGlvbiBVKGUpe2kuc2VuZEJ5dGVzKGUpfWZ1bmN0aW9uIEQoZSl7dmFyIHQ9MDtmLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QrPWUuYnl0ZUxlbmd0aH0pKSxpLnNlbmRBdWRpb0VuZCh0LGUpfWZ1bmN0aW9uIE4oKXtyZXR1cm4hdiYmZiYmUyYmZi5sZW5ndGgmJmYubGVuZ3RoPj1TfWZ1bmN0aW9uIHgoZSx0KXtlJiYhdD9CKCJuby1zcGVlY2giLCJGaW5hbCByZXN1bHQgd2FzIGVtcHR5Iik6cG9zdE1lc3NhZ2Uoe3JlY29nbml0aW9uRXZlbnQ6e3R5cGU6InJlc3VsdCIscmVzdWx0SW5kZXg6MCxyZXN1bHRzOlt7aXNGaW5hbDplLDA6e3RyYW5zY3JpcHQ6dH19XSx0aW1lU3RhbXA6RGF0ZS5ub3coKX0sZXZlbnRGb3JtYXQ6IndlYlNwZWVjaEFwaSJ9KX1mdW5jdGlvbiBMKGUpe2UmJiFlLnR5cGUmJihlLnR5cGU9InJlc3VsdCIpLHBvc3RNZXNzYWdlKHtyZWNvZ25pdGlvbkV2ZW50OmUsZXZlbnRGb3JtYXQ6ImRlZmF1bHQifSl9ZnVuY3Rpb24gVyhlLHQpe3Bvc3RNZXNzYWdlKHtjb25uZWN0aW9uRXZlbnQ6e3R5cGU6ZSxkYXRhOnR9fSl9ZnVuY3Rpb24gQihlLHQpe3Bvc3RNZXNzYWdlKHtyZWNvZ25pdGlvbkV2ZW50Ont0eXBlOiJlcnJvciIsZXJyb3I6ZSxtZXNzYWdlOnQsdGltZVN0YW1wOkRhdGUubm93KCl9LGV2ZW50Rm9ybWF0OiJ3ZWJTcGVlY2hBcGkifSl9ZnVuY3Rpb24gVChlKXt0aGlzLm1lc3NhZ2U9ZSx0aGlzLm5hbWU9IlNhbXBsZVJhdGVFeGNlcHRpb24ifWZ1bmN0aW9uIEooZSl7dGhpcy5tZXNzYWdlPWUsdGhpcy5uYW1lPSJBcnJheVR5cGVFeGNlcHRpb24ifWZ1bmN0aW9uIEcoZSx0LG4scyxvKXt2YXIgaSxhO2lmKHQmJm4mJnMpcmV0dXJuIGU/KGk9ZSxhPTQ0KTooaT1uZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDIqdC5sZW5ndGgpKSxhPTApLG8/ZnVuY3Rpb24oZSx0LG4pe2ZvcihsZXQgcz0wO3M8bi5sZW5ndGg7cysrLHQrPTIpe2xldCBvPU1hdGgubWF4KC0xLE1hdGgubWluKDEsbltzXSkpO2Uuc2V0SW50MTYodCxvPDA/MzI3NjgqbzozMjc2NypvLCEwKX19KGksYSx0KTpmdW5jdGlvbihlLHQsbil7Zm9yKGxldCBzPTA7czxuLmxlbmd0aDtzKyssdCs9MillLnNldEludDE2KHQsbltzXSwhMCl9KGksYSx0KSxpO2NvbnNvbGUuZXJyb3IoIlN0dFNvY2tldFdvcmtlciAtIGVuY29kZVdBViAtIE1pc3NpbmcgcGFyYW1ldGVycyIpfWZ1bmN0aW9uIFAoZSx0LG4pe2ZvcihsZXQgcz0wO3M8bi5sZW5ndGg7cysrKWUuc2V0VWludDgodCtzLG4uY2hhckNvZGVBdChzKSl9fSgpOwoK",null,!1);if("object"!=typeof s){var s={};window.SepiaFW=s}!function(A){var Q=A.webAudio||{};Q.version="0.9.11";var U=window.AudioContext||window.webkitAudioContext;Q.isStreamRecorderSupported=!!(!!U&&navigator.mediaDevices&&navigator.mediaDevices.getUserMedia)||void 0,Q.isNativeStreamResamplingSupported=!0,Q.tryNativeStreamResampling=!0,Q.contentFetchTimeout=8e3,Q.defaultProcessorOptions={moduleFolder:"modules",initSuccessCallback:console.log,initErrorCallback:console.error,onerror:console.error};var t={};function F(A,Q){if(A&&A.size)if("function"==typeof A.arrayBuffer)A.arrayBuffer().then((function(A){Q(A)})).catch((function(A){console.error("blobToArray '.arrayBuffer' ERROR",A),Q()}));else{var U=new FileReader;U.onload=function(){Q(U.result)},U.onerror=function(A){console.error("blobToArray 'FileReader' ERROR",reader.error,A),Q()},U.readAsArrayBuffer(A)}else Q()}function e(A,U,t,F){var e=new XMLHttpRequest;e.open("GET",U),e.responseType=A,e.timeout=Q.contentFetchTimeout,e.onload=function(A){e.status>=200&&e.status<300?t(e.response):F({status:e.status,message:e.statusText})},e.onerror=function(A){F(A)},e.ontimeout=function(A){F(A)},e.send()}function n(A){try{for(var Q=atob(A),U=new Uint8Array(Q.length),t=0;t<Q.length;++t)U[t]=Q.charCodeAt(t);return U}catch(A){throw new Error("Converting base64 string to Uint8Array bytes array failed.")}}function B(){}Q.clearPreLoadCache=function(){t={}},Q.getSupportedAudioConstraints=function(){var A=navigator.mediaDevices.getSupportedConstraints(),U={},t=Q.overwriteSupportedAudioConstraints;return A.deviceId&&(U.deviceId=null!=t.deviceId?t.deviceId:void 0),A.channelCount&&(U.channelCount=null!=t.channelCount?t.channelCount:1),A.noiseSuppression&&(U.noiseSuppression=null==t.noiseSuppression||t.noiseSuppression),A.autoGainControl&&(U.autoGainControl=null!=t.autoGainControl&&t.autoGainControl),A.echoCancellation&&(U.echoCancellation=null!=t.echoCancellation&&t.echoCancellation),A.sampleRate&&(U.sampleRate=null!=t.sampleRate?t.sampleRate:48e3),U},Q.overwriteSupportedAudioConstraints={},Q.defaultMimeTypesForCodecs={ogg:"audio/ogg",ogg_opus:"audio/ogg;codecs=opus",ogg_vorbis:"audio/ogg;codecs=vorbis",ogg_speex:"audio/ogg;codecs=speex",opus:"audio/opus",vorbis:"audio/vorbis",speex:"audio/speex",wav:"audio/wav",raw:"audio/wav",webm_ogg_opus:"audio/webm;codecs=opus",webm_ogg_vorbis:"audio/webm;codecs=vorbis",webm_mkv_pcm:"audio/webm;codecs=pcm",mp3:"audio/mpeg",mp4:"audio/mp4",flac:"audio/flac",mpeg:"audio/mpeg"},Q.getSupportedMediaRecorderCodecs=function(){var A={};return window.MediaRecorder&&Object.keys(Q.defaultMimeTypesForCodecs).forEach((function(U){var t=Q.defaultMimeTypesForCodecs[U];window.MediaRecorder.isTypeSupported(t)&&(A[U]=t)})),A},Q.createAudioContext=function(A,Q){var t={};return!Q&&A.targetSampleRate&&(t.sampleRate=A.targetSampleRate),new U(t)},Q.Processor=function(A,U,F){var e=this;F||(F=Q.defaultProcessorOptions.initErrorCallback),U||(U=Q.defaultProcessorOptions.initSuccessCallback),A||(A={});var l,a,o,R,d,i,C=A.onerror||Q.defaultProcessorOptions.onerror,s=(A.moduleFolder||Q.defaultProcessorOptions.moduleFolder).replace(/\/$/,"")+"/",I=0,r=!1,g=!1,E=!1,Z=A.initializerTimeout||3e3,J={},W={},S=[];function u(Q){A.debugLog&&A.debugLog("Started init. condition: "+Q),J[Q]=1}function m(Q){J[Q]&&(delete J[Q],A.debugLog&&A.debugLog("Completed init. condition: "+Q),0==Object.keys(J).length&&(g||(clearTimeout(i),g=!0,E=!1,U({name:"ProcessorReady",message:"Processor is ready for action",inputSampleRate:l,targetSampleRate:A.targetSampleRate||l,sourceInfo:W,modulesInfo:S}))))}function h(){clearTimeout(i),g=!1,E=!1,J={},u("sourceSetup"),u("modulesSetup")}function N(A){h(),F(A)}async function p(){if(A.modules)for(let Q=0;Q<A.modules.length;Q++){let U=k(A.modules[Q]),t=U.moduleType,F=U.moduleName;if(1==t){let Q=s+F+".js";A.debugLog&&A.debugLog("Adding audioWorklet module: "+Q);try{await a.audioWorklet.addModule(`data:application/javascript;charset=utf8,${encodeURIComponent('//TODO: \'import\' not yet supported by FF :-( (Dec 2020)\r\n//import { SampleRateException, SampleSizeException } from \'./shared/common.js\';\r\n//import { RingBuffer } from \'./shared/ring-buffer.js\';\r\n//import { SpeexResampler } from \'./speex/speex-resampler-interface.min.js\';\r\n//import { Speex } from \'./speex/speex-resampler-wasm.js\';\r\nclass RingBuffer{constructor(a,b,c){this._readIndex=0,this._writeIndex=0,this._framesAvailable=0,this._channelCount=b,this._length=a,this._channelData=[];for(let d=0;d<this._channelCount;++d)this._channelData[d]="Uint16"==c?new Uint16Array(a):"Int16"==c?new Int16Array(a):"Uint8"==c?new Uint8Array(a):"Int8"==c?new Int8Array(a):new Float32Array(a)}get framesAvailable(){return this._framesAvailable}push(a,b){let c=a[0].length,d=b||function(a,b,c){return a[b][c]};for(let e,f=0;f<c;++f){e=(this._writeIndex+f)%this._length;for(let b=0;b<this._channelCount;++b)this._channelData[b][e]=d(a,b,f)}this._writeIndex+=c,this._writeIndex>=this._length&&(this._writeIndex-=this._length),this._framesAvailable+=c,this._framesAvailable>this._length&&(this._framesAvailable=this._length)}pull(a,b){if(0===this._framesAvailable)return;let c=a[0].length,d=this,e=b||function(a,b,c){return a[b][c]};for(let d,f=0;f<c;++f){d=(this._readIndex+f)%this._length;for(let b=0;b<this._channelCount;++b)a[b][f]=e(this._channelData,b,d)}this._readIndex+=c,this._readIndex>=this._length&&(this._readIndex-=this._length),this._framesAvailable-=c,0>this._framesAvailable&&(this._framesAvailable=0)}};\r\nclass SpeexResampler{constructor(a,b,c,d=7){this.channels=a,this.inRate=b,this.outRate=c,this.quality=d,this._inBufferPtr=-1,this._inBufferSize=-1,this._outBufferPtr=-1,this._outBufferSize=-1,this._inLengthPtr=-1,this._outLengthPtr=-1}processChunk(a){if(!speexModule)throw new Error("You need to wait for SpeexResampler.initPromise before calling this method");if(0!=a.constructor.name.indexOf("Int16Array"))throw new Error("Chunk format has to be \'Int16Array\'");else a=new Uint8Array(a.buffer);if(0!=a.length%(this.channels*Uint16Array.BYTES_PER_ELEMENT))throw new Error("Chunk length should be a multiple of channels * 2 bytes");if(!this._resamplerPtr){const a=speexModule._malloc(4);this._resamplerPtr=speexModule._speex_resampler_init(this.channels,this.inRate,this.outRate,this.quality,a);const b=speexModule.getValue(a,"i32");if(0!==b)throw new Error(speexModule.AsciiToString(speexModule._speex_resampler_strerror(b)));this._inLengthPtr=speexModule._malloc(Uint32Array.BYTES_PER_ELEMENT),this._outLengthPtr=speexModule._malloc(Uint32Array.BYTES_PER_ELEMENT)}this._inBufferSize<a.length&&(-1!==this._inBufferPtr&&speexModule._free(this._inBufferPtr),this._inBufferPtr=speexModule._malloc(a.length),this._inBufferSize=a.length);const b=Math.ceil(a.length*this.outRate/this.inRate);this._outBufferSize<b&&(-1!==this._outBufferPtr&&speexModule._free(this._outBufferPtr),this._outBufferPtr=speexModule._malloc(b),this._outBufferSize=b),speexModule.setValue(this._inLengthPtr,a.length/this.channels/Uint16Array.BYTES_PER_ELEMENT,"i32"),speexModule.HEAPU8.set(a,this._inBufferPtr),speexModule.setValue(this._outLengthPtr,this._outBufferSize/this.channels/Uint16Array.BYTES_PER_ELEMENT,"i32");const c=speexModule._speex_resampler_process_interleaved_int(this._resamplerPtr,this._inBufferPtr,this._inLengthPtr,this._outBufferPtr,this._outLengthPtr);if(0!==c)throw new Error(speexModule.AsciiToString(speexModule._speex_resampler_strerror(c)));const d=speexModule.getValue(this._outLengthPtr,"i32");return new Int16Array(speexModule.HEAPU8.slice(this._outBufferPtr,this._outBufferPtr+d*this.channels*Uint16Array.BYTES_PER_ELEMENT).buffer)}}\r\n\r\nvar speexModule;\r\n\r\nclass SpeexResampleProcessor extends AudioWorkletProcessor {\r\n\t\r\n\tget SampleRateException() {\r\n\t\treturn function(message){\r\n\t\t\tthis.message = message;\r\n\t\t\tthis.name = "SampleRateException";\r\n\t\t}\r\n\t}\r\n\tget SampleSizeException() {\r\n\t\treturn function(message){\r\n\t\t\tthis.message = message;\r\n\t\t\tthis.name = "SampleSizeException";\r\n\t\t};\r\n\t}\r\n\t\r\n\tget Speex() {\r\n\t\treturn function(){return function(a){function b(a,b,c){c=c||"i8","*"===c.charAt(c.length-1)&&(c="i32"),"i1"===c?Q[a>>0]=b:"i8"===c?Q[a>>0]=b:"i16"===c?S[a>>1]=b:"i32"===c?U[a>>2]=b:"i64"===c?(oa=[b>>>0,(na=b,1<=+ga(na)?0<na?(0|ja(+ia(na/4294967296),4294967295))>>>0:~~+ha((na-+(~~na>>>0))/4294967296)>>>0:0)],U[a>>2]=oa[0],U[a+4>>2]=oa[1]):"float"===c?W[a>>2]=b:"double"===c?X[a>>3]=b:p("invalid type for setValue: "+c)}function c(a,b){switch(b=b||"i8","*"===b.charAt(b.length-1)&&(b="i32"),b){case"i1":return Q[a>>0];case"i8":return Q[a>>0];case"i16":return S[a>>1];case"i32":return U[a>>2];case"i64":return U[a>>2];case"float":return W[a>>2];case"double":return X[a>>3];default:p("invalid type for getValue: "+b);}return null}function d(a){for(var b,c="";;){if(b=R[a++>>0],!b)return c;c+=String.fromCharCode(b)}}function e(a,b){return 0<a%b&&(a+=b-a%b),a}function f(a){P=a,A.HEAP8=Q=new Int8Array(a),A.HEAP16=S=new Int16Array(a),A.HEAP32=U=new Int32Array(a),A.HEAPU8=R=new Uint8Array(a),A.HEAPU16=T=new Uint16Array(a),A.HEAPU32=V=new Uint32Array(a),A.HEAPF32=W=new Float32Array(a),A.HEAPF64=X=new Float64Array(a)}function g(a){for(;0<a.length;){var b=a.shift();if("function"==typeof b){b(A);continue}var c=b.func;"number"==typeof c?void 0===b.arg?A.dynCall_v(c):A.dynCall_vi(c,b.arg):c(void 0===b.arg?null:b.arg)}}function h(){if(A.preRun)for("function"==typeof A.preRun&&(A.preRun=[A.preRun]);A.preRun.length;)l(A.preRun.shift());g(ba)}function i(){fa=!0,g(ca)}function j(){g(da)}function k(){if(A.postRun)for("function"==typeof A.postRun&&(A.postRun=[A.postRun]);A.postRun.length;)m(A.postRun.shift());g(ea)}function l(a){ba.unshift(a)}function m(a){ea.unshift(a)}function n(){ka++,A.monitorRunDependencies&&A.monitorRunDependencies(ka)}function o(){if(ka--,A.monitorRunDependencies&&A.monitorRunDependencies(ka),0==ka&&(null!==la&&(clearInterval(la),la=null),ma)){var a=ma;ma=null,a()}}function p(a){throw A.onAbort&&A.onAbort(a),a+="",K(a),L(a),Z=!0,$=1,a="abort("+a+"). Build with -s ASSERTIONS=1 for more info.",new WebAssembly.RuntimeError(a)}function q(a){return 0===a.indexOf(pa)}function r(a,b,c){R.copyWithin(a,b,b+c)}function s(){return R.length}function t(a){try{return O.grow(a-P.byteLength+65535>>>16),f(O.buffer),1}catch(a){}}function u(a){if("boolean"==typeof I&&I){var b;try{b=Buffer.from(a,"base64")}catch(c){b=new Buffer(a,"base64")}return new Uint8Array(b.buffer,b.byteOffset,b.byteLength)}try{for(var c=qa(a),d=new Uint8Array(c.length),e=0;e<c.length;++e)d[e]=c.charCodeAt(e);return d}catch(a){throw new Error("Converting base64 string to bytes failed.")}}function v(a){return q(a)?u(a.slice(37)):void 0}function w(a){this.name="ExitStatus",this.message="Program terminated with exit("+a+")",this.status=a}function x(a){function b(){Ba||(Ba=!0,A.calledRun=!0,Z||(i(),j(),y(A),A.onRuntimeInitialized&&A.onRuntimeInitialized(),k()))}(a=a||D,!(0<ka))&&(h(),0<ka||(A.setStatus?(A.setStatus("Running..."),setTimeout(function(){setTimeout(function(){A.setStatus("")},1),b()},1)):b()))}a=a||{};var y,z,A="undefined"==typeof a?{}:a;A.ready=new Promise(function(a,b){y=a,z=b});var B,C={};for(B in A)A.hasOwnProperty(B)&&(C[B]=A[B]);var D=[],E="./this.program",F=function(a,b){throw b},G=!1,H=!1,I=!1;G="object"==typeof window,H="function"==typeof importScripts,I="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node;var J;I?(1<process.argv.length&&(E=process.argv[1].replace(/\\\\/g,"/")),D=process.argv.slice(2),process.on("uncaughtException",function(a){if(!(a instanceof w))throw a}),process.on("unhandledRejection",p),F=function(a){process.exit(a)},A.inspect=function(){return"[Emscripten Module object]"}):(G||H)&&(J=function(a){document.title=a});var K=A.print||console.log.bind(console),L=A.printErr||console.warn.bind(console);for(B in C)C.hasOwnProperty(B)&&(A[B]=C[B]);C=null,A.arguments&&(D=A.arguments),A.thisProgram&&(E=A.thisProgram),A.quit&&(F=A.quit);var M;A.wasmBinary&&(M=A.wasmBinary);var N;A.noExitRuntime&&(N=A.noExitRuntime),"object"!=typeof WebAssembly&&p("no native wasm support detected");var O,P,Q,R,S,T,U,V,W,X,Y=new WebAssembly.Table({initial:6,maximum:6,element:"anyfunc"}),Z=!1,$=0,_=65536,aa=A.INITIAL_MEMORY||20971520;O=A.wasmMemory?A.wasmMemory:new WebAssembly.Memory({initial:aa/_,maximum:2147483648/_}),O&&(P=O.buffer),aa=P.byteLength,f(P),U[6256>>2]=5249296;var ba=[],ca=[],da=[],ea=[],fa=!1,ga=Math.abs,ha=Math.ceil,ia=Math.floor,ja=Math.min,ka=0,la=null,ma=null;A.preloadedImages={},A.preloadedAudios={};var na,oa,pa="data:application/octet-stream;base64,";ca.push({func:function(){ta()}});var qa="function"==typeof atob?atob:function(a){var b,c,d,e,f,g,h,j="",k=0;a=a.replace(/[^A-Za-z0-9\\+\\/\\=]/g,"");do e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(k++)),f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(k++)),g="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(k++)),h="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(k++)),b=e<<2|f>>4,c=(15&f)<<4|g>>2,d=(3&g)<<6|h,j+=String.fromCharCode(b),64!==g&&(j+=String.fromCharCode(c)),64!==h&&(j+=String.fromCharCode(d));while(k<a.length);return j},ra={a:r,b:function(a){a>>>=0;var b=s(),c=2147483648;if(a>c)return!1;for(var d,f=1;4>=f;f*=2){d=b*(1+.2/f),d=Math.min(d,a+100663296);var g=Math.min(c,e(Math.max(16777216,a,d),65536)),h=t(g);if(h)return!0}return!1},memory:O,table:Y},sa=function(){function a(a){var b=a.exports;A.asm=b,o("wasm-instantiate")}var b={a:ra};if(n("wasm-instantiate"),A.instantiateWasm)try{var c=A.instantiateWasm(b,a);return c}catch(a){return L("Module.instantiateWasm callback failed with error: "+a),!1}return function(a){var c=v("data:application/octet-stream;base64,");return WebAssembly.instantiate(c,b).then(a,function(a){L("failed to asynchronously prepare wasm: "+a),p(a)})}(function(b){a(b.instance)}),{}}(),ta=A.___wasm_call_ctors=function(){return(ta=A.___wasm_call_ctors=A.asm.c).apply(null,arguments)},ua=A._speex_resampler_init=function(){return(ua=A._speex_resampler_init=A.asm.d).apply(null,arguments)},va=A._free=function(){return(va=A._free=A.asm.e).apply(null,arguments)},wa=A._speex_resampler_destroy=function(){return(wa=A._speex_resampler_destroy=A.asm.f).apply(null,arguments)},xa=A._speex_resampler_process_interleaved_int=function(){return(xa=A._speex_resampler_process_interleaved_int=A.asm.g).apply(null,arguments)},ya=A._speex_resampler_get_rate=function(){return(ya=A._speex_resampler_get_rate=A.asm.h).apply(null,arguments)},za=A._speex_resampler_strerror=function(){return(za=A._speex_resampler_strerror=A.asm.i).apply(null,arguments)},Aa=A._malloc=function(){return(Aa=A._malloc=A.asm.j).apply(null,arguments)};A.setValue=b,A.getValue=c,A.AsciiToString=d;var Ba;if(ma=function a(){Ba||x(),Ba||(ma=a)},A.run=x,A.preInit)for("function"==typeof A.preInit&&(A.preInit=[A.preInit]);0<A.preInit.length;)A.preInit.pop()();return N=!0,x(),a.ready}}();\r\n\t}\r\n\tget SpeexResampler() {\r\n\t\treturn function(cc, is, os, q){return new SpeexResampler(cc, is, os, q);}\r\n\t}\r\n\t\r\n\tget emitterRms() {\r\n\t\tif (this.calculateRmsVolume){\r\n\t\t\tlet rms = Math.sqrt(this._emitterSqrSum / this._emitterSamples);\r\n\t\t\tthis._emitterSqrSum = 0;\r\n\t\t\tthis._emitterSamples = 0;\r\n\t\t\treturn rms;\r\n\t\t}else{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n  \r\n\tconstructor(options) {\r\n\t\tsuper();\r\n\t\t\r\n\t\tlet that = this;\r\n\t\tthis.moduleId = "speex-resample-switch-" + Math.round(Math.random() * 1000000) + "-" + Date.now();\r\n\t\tthis.doDebug = options.processorOptions.doDebug || false;\r\n\t\tthis.isReadyForProcessing = false;\r\n\t\tthis.EXPECTED_SAMPLE_SIZE = 128;\t//currently 128, but might change in future ... and even become variable! (I hope not)\r\n\r\n\t\tthis.sourceSamplerate = options.processorOptions.ctxInfo.sampleRate;\t//INFO: should be same as global scope \'sampleRate\'\r\n\r\n\t\tthis.targetSampleRate = options.processorOptions.targetSampleRate || options.processorOptions.ctxInfo.targetSampleRate || 16000;\r\n\t\tthis.resampleQuality = (options.processorOptions.resampleQuality != undefined)? options.processorOptions.resampleQuality : 7;\t//number from 1 to 10, 1 is fast but of bad quality, 10 is slow but best quality (less noise/aliasing, a higher complexity and a higher latency)\r\n\t\tthis.emitterBufferSize = options.processorOptions.bufferSize || 512;\t//TODO: there is probably a mismatch (we should pull go back to the idea of making the buffer bigger but pull less)\r\n\t\tthis.channelCount = 1; //options.processorOptions.channels || 1;\t\t//TODO: supports ONLY MONO atm\r\n\t\tthis._bytesPerSample = 2;\t\t\t//for buffer (aka Xint8 Array) length is in bytes (8bit), so *2 to get 16bit length;\r\n\t\tthis.resampler;\r\n\t\t\r\n\t\tthis.passThroughMode = (options.processorOptions.passThroughMode != undefined)? options.processorOptions.passThroughMode : 1;\t//0: nothing, 1: original, 2: 16bit PCM\r\n\t\tthis.calculateRmsVolume = (options.processorOptions.calculateRmsVolume != undefined)? options.processorOptions.calculateRmsVolume : true;\r\n\t\tthis.gain = options.processorOptions.gain || 1.0;\r\n\t\t\t\t\r\n\t\t//resampling - modes 0: no change, -1: downsampling, 1: upsampling\r\n\t\tthis.resamplingMode = (this.targetSampleRate < this.sourceSamplerate? -1 : (this.targetSampleRate > this.sourceSamplerate? 1 : 0));\r\n\t\tthis.resampleRatio = this.targetSampleRate/this.sourceSamplerate;\r\n\t\t\r\n\t\tfunction init(){\r\n\t\t\tvar expectedSizeAfterResampling = Math.ceil(that.EXPECTED_SAMPLE_SIZE * that.resampleRatio);\r\n\t\t\tif (expectedSizeAfterResampling > that.emitterBufferSize){\r\n\t\t\t\t//TODO: if we don\'t use a string this shows up as "Uncaught [object ...]" in worker.onerror ?! :-/\r\n\t\t\t\tthrow {name: "BufferSizeException", message: ("Output buffer has to be bigger than (resampleRatio*inputSampleSize)! Currently: " + expectedSizeAfterResampling + " > " + that.emitterBufferSize)};\r\n\t\t\t}\r\n\t\t\tvar ringBufferSize = expectedSizeAfterResampling + that.emitterBufferSize;\t\t\t//this should be a safe size\r\n\t\t\t\r\n\t\t\t//RingBuffers - alloc. space for emitter\r\n\t\t\t//that._inputRingBuffer = new RingBuffer(that.collectorBufferSize + that.EXPECTED_SAMPLE_SIZE, that.channelCount);\r\n\t\t\tthat._outputRingBuffer = new RingBuffer(ringBufferSize, that.channelCount, "Int16");\r\n\r\n\t\t\t//Input and output (for each channel) - TODO: set size, one for each channel\r\n\t\t\t//that._newInputBuffer = [new Float32Array(that.collectorBufferSize)];\r\n\t\t\tthat._newInputBuffer = [new Int16Array(that.EXPECTED_SAMPLE_SIZE)];\t\t\r\n\t\t\t//TODO: for interleaved STEREO we need [new Uint8Array(that.EXPECTED_SAMPLE_SIZE * that.channelCount * that._bytesPerSample)];\r\n\t\t\t\t//... or do we?\r\n\t\t\t\t//NOTE: we could use DataView instead\r\n\t\t\t\t//let buffer = new ArrayBuffer(that.EXPECTED_SAMPLE_SIZE * that.channelCount * that._bytesPerSample);\r\n\t\t\t\t//let that._inputDataView = new DataView(buffer);\r\n\t\t\tthat._newOutputBuffer = [new Int16Array(that.emitterBufferSize)];\r\n\t\t\t\r\n\t\t\tthat._isFirstValidProcess = true;\r\n\t\t\t//that._lastEmit = 0;\r\n\t\t\t\r\n\t\t\tthat._emitterSqrSum = 0;\r\n\t\t\tthat._emitterSamples = 0;\r\n\t\t\tthat._hasGain = (that.gain < 1 || that.gain > 1);\r\n\t\t}\r\n\t\tinit();\r\n\t\t\r\n\t\tthis.floatTo16BitInterleavedPCM = function(inFloat32, outInt16, i){\r\n\t\t\t//TODO: if not MONO interleave channels - requires: UInt8Array !!! (or does it?)\r\n\t\t\t/*\r\n\t\t\tfor (let channel = 0; channel < that.channelCount; channel++){\r\n\t\t\t\t//pass through original\r\n\t\t\t\toutput[channel][i] = inFloat32[channel][i];\r\n\t\t\t\t//clip and floatTo16BitPCM\r\n\t\t\t\tlet sampleVal = Math.max(-1, Math.min(1, inFloat32[channel][i])) * 32767.5 - 0.5;\r\n\t\t\t\t//assign\r\n\t\t\t\tlet outputIndex = (i * that.channelCount + channel) * that._bytesPerSample;\r\n\t\t\t\tthat._newInputBuffer[channel][outputIndex] = sampleVal;\r\n\t\t\t\tthat._newInputBuffer[channel][outputIndex + 1] = sampleVal >> 8;\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t\t\r\n\t\t\tlet sampleVal = Math.max(-1, Math.min(1, inFloat32[0][i]));\t\t//we need -1 to 1 - If this is the first processor we could skip clipping\r\n\t\t\t//that._inputDataView.setInt16(i * 2, sampleVal < 0 ? sampleVal * 0x8000 : sampleVal * 0x7FFF, true);\t// 16-bit signed range is -32768 to 32767, littleEndian byte order.\r\n\t\t\toutInt16[0][i] = sampleVal < 0 ? sampleVal * 0x8000 : sampleVal * 0x7FFF;\r\n\t\t}\r\n\t\t\r\n\t\tfunction ready(skipResampler){\r\n\t\t\tif (!skipResampler){\r\n\t\t\t\t//use new resampler for every instance - it keeps data from previous calls to improve the resampling\r\n\t\t\t\tthat.resampler = that.SpeexResampler(\r\n\t\t\t\t\tthat.channelCount, that.sourceSamplerate, that.targetSampleRate, that.resampleQuality\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tthat.isReadyForProcessing = true;\r\n\t\t\tthat.port.postMessage({\r\n\t\t\t\tmoduleState: 1,\r\n\t\t\t\tmoduleInfo: {\r\n\t\t\t\t\tmoduleId: that.moduleId,\r\n\t\t\t\t\tsourceSamplerate: that.sourceSamplerate,\r\n\t\t\t\t\ttargetSampleRate: that.targetSampleRate,\r\n\t\t\t\t\temitterBufferSize: that.emitterBufferSize,\r\n\t\t\t\t\tcalculateRmsVolume: that.calculateRmsVolume,\r\n\t\t\t\t\tchannelCount: that.channelCount,\r\n\t\t\t\t\tresamplingMode: that.resamplingMode,\r\n\t\t\t\t\tgain: that.gain,\r\n\t\t\t\t\tpassThroughMode: that.passThroughMode\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t//start\r\n\t\tfunction start(options){\r\n\t\t\t//TODO: anything?\r\n\t\t\t//NOTE: timing of this signal is not very well defined\r\n\t\t}\r\n\t\t//stop\r\n\t\tfunction stop(options){\r\n\t\t\t//NOTE: timing of this signal is not very well defined\r\n\t\t\t//send out the remaining buffer data here\r\n\t\t\tif (that._outputRingBuffer.framesAvailable){\r\n\t\t\t\t//pull last samples\r\n\t\t\t\tvar lastSamples = [new Int16Array(that._outputRingBuffer.framesAvailable)];\r\n\t\t\t\tthat._outputRingBuffer.pull(lastSamples);\r\n\r\n\t\t\t\t//Send info\r\n\t\t\t\tthat.port.postMessage({\r\n\t\t\t\t\trms: that.emitterRms,\r\n\t\t\t\t\tsamples: lastSamples,\r\n\t\t\t\t\tsampleRate: that.targetSampleRate,\r\n\t\t\t\t\tchannels: that.channelCount,\r\n\t\t\t\t\ttype: lastSamples[0].constructor.name,\r\n\t\t\t\t\tisLast: true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\tfunction reset(options){\r\n\t\t\t//TODO: implement\r\n\t\t\tinit();\r\n\t\t}\r\n\t\tfunction release(options){\r\n\t\t\t//destroy\r\n\t\t\tthat._outputRingBuffer = null;\r\n\t\t\tthat._newInputBuffer = null;\r\n\t\t\tthat._newOutputBuffer = null;\r\n\t\t\tthat.resampler = null;\r\n\t\t\tspeexModule = null;\r\n\t\t\t//notify processor that we can terminate now\r\n\t\t\tthat.port.postMessage({\r\n\t\t\t\tmoduleState: 9\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t//on-request resampling\r\n\t\tfunction resampleRequest(req){\r\n\t\t\tvar samples = req.samples;\r\n\t\t\tvar int16Buffer;\r\n\t\t\tif (req.isInt16){\r\n\t\t\t\tint16Buffer = samples;\r\n\t\t\t}else{\r\n\t\t\t\tvar sampleSize = samples[0].length;\r\n\t\t\t\tint16Buffer = [new Int16Array(sampleSize)];\t\t//TODO: MONO\r\n\t\t\t\tfor (let i = 0; i < sampleSize; ++i){\r\n\t\t\t\t\tthat.floatTo16BitInterleavedPCM(samples, int16Buffer, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (that.resamplingMode){\r\n\t\t\t\tvar processed = that.resampler.processChunk(int16Buffer[0]);\r\n\t\t\t\tthat.port.postMessage({\r\n\t\t\t\t\tmoduleResponse: true,\r\n\t\t\t\t\tresampleResult: {\r\n\t\t\t\t\t\t//test: int16Buffer,\t\t//DEBUG\r\n\t\t\t\t\t\tsamples: [processed],\r\n\t\t\t\t\t\tsampleRate: that.targetSampleRate,\r\n\t\t\t\t\t\tchannels: that.channelCount\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}else{\r\n\t\t\t\tthat.port.postMessage({\r\n\t\t\t\t\terror: "No resampling required. Skipped process!",\r\n\t\t\t\t\tmoduleResponse: true,\r\n\t\t\t\t\tresampleResult: {}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//Control messages\r\n\t\tthis.port.onmessage = function(e){\r\n\t\t\tif (e.data.ctrl){\r\n\t\t\t\tif (that.doDebug) console.error("SpeexResampleSwitch - Controls", e.data.ctrl);\t\t\t//DEBUG\r\n\t\t\t\tswitch (e.data.ctrl.action) {\r\n\t\t\t\t\t//common interface\r\n\t\t\t\t\tcase "start":\r\n\t\t\t\t\t\tstart(e.data.ctrl.options);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase "stop":\r\n\t\t\t\t\t\tstop(e.data.ctrl.options);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase "reset":\r\n\t\t\t\t\t\treset(e.data.ctrl.options);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase "release":\r\n\t\t\t\t\tcase "close":\r\n\t\t\t\t\t\trelease(e.data.ctrl.options);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase "process":\r\n\t\t\t\t\t\t//customProcess(e.data.ctrl.data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase "handle":\r\n\t\t\t\t\t\t//handleEvent(e.data.ctrl.data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.error("SpeexResampleSwitch - Unknown control message:", e.data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}else if (e.data.resample){\r\n\t\t\t\t//custom interface\r\n\t\t\t\tresampleRequest(e.data.resample);\r\n\t\t\t}\r\n        }\r\n\t\t\r\n\t\tfunction onSpeexLog(msg){\r\n\t\t\tif (that.doDebug) console.error("SpeexResampleSwitch - SpeexModuleLog -", msg, "-", that.moduleId);\t\t\t//DEBUG (use postMessage?)\r\n\t\t}\r\n\t\t//function onSpeexError(msg){}\t\t//TODO: we could wrap the \'resampler.processChunk\' function in try-catch and log the error here\r\n\t\t\r\n\t\t//prepare\r\n\t\tif (this.resamplingMode){\r\n\t\t\tif (!speexModule){\r\n\t\t\t\tonSpeexLog("Init. Speex WASM module");\r\n\t\t\t\tSpeexResampler.initPromise = this.Speex().then(function(s){\r\n\t\t\t\t\tonSpeexLog("Speex WASM module ready");\r\n\t\t\t\t\tspeexModule = s;\t//NOTE: used inside Speex\r\n\t\t\t\t\tready(false);\r\n\t\t\t\t});\r\n\t\t\t}else{\r\n\t\t\t\tonSpeexLog("Speex WASM moduel already loaded");\r\n\t\t\t\tready(false);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tonSpeexLog("Speex WASM module not needed");\r\n\t\t\tready(true);\r\n\t\t}\r\n\t}\r\n\r\n\tprocess(inputs, outputs, parameters) {\r\n\t\tif (!this.isReadyForProcessing){\r\n\t\t\tconsole.error("SpeexResampleSwitch - Module wasn\'t ready for processing! Input was ignored!", "-", this.moduleId);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//Use 1st input and output only\r\n\t\tlet input = inputs[0];\r\n\t\tlet output = outputs[0];\r\n\r\n\t\t//NOTE: AudioWorkletProcessor always gets input[0].length frames (typically 128, might change in future)\r\n\t\tif (input.length > 0){\r\n\t\t\tlet inputSampleSize = input[0].length;\r\n\t\t\t\r\n\t\t\tif (this._isFirstValidProcess){\r\n\t\t\t\tthis._isFirstValidProcess = false;\r\n\t\t\t\t//check inputSampleSize\r\n\t\t\t\tif (inputSampleSize != this.EXPECTED_SAMPLE_SIZE){\r\n\t\t\t\t\tlet msg = "Sample size is: " + inputSampleSize + ", expected: " + this.EXPECTED_SAMPLE_SIZE + ". Need code adjustments!";\r\n\t\t\t\t\tconsole.error("AudioWorkletProcessor sample size exception - Msg.: " + msg);\r\n\t\t\t\t\tthrow new this.SampleSizeException(msg);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//transfer input to 16bit signed, interleaved (channels) PCM output - TODO: ONLY MONO so far!\r\n\t\t\tlet sqrSum = 0;\r\n\t\t\tfor (let i = 0; i < inputSampleSize; ++i){\r\n\t\t\t\t//gain\r\n\t\t\t\tif (this._hasGain) input[0][i] = input[0][i] * this.gain;\r\n\t\t\t\t\r\n\t\t\t\t//float to 16Bit interleaved PCM\r\n\t\t\t\tthis.floatTo16BitInterleavedPCM(input, this._newInputBuffer, i);\r\n\t\t\t\t\r\n\t\t\t\t//pass through\r\n\t\t\t\tif (this.passThroughMode == 2){\r\n\t\t\t\t\toutput[0][i] = this._newInputBuffer[0][i];\t//16Bit PCM\r\n\t\t\t\t}else if (this.passThroughMode == 1){\r\n\t\t\t\t\toutput[0][i] = input[0][i];\t\t\t\t\t//original (float32)\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//calc. sum for RMS\r\n\t\t\t\tif (this.calculateRmsVolume){\r\n\t\t\t\t\tthis._emitterSqrSum += (input[0][i] ** 2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._emitterSamples += inputSampleSize;\r\n\t\t\t\r\n\t\t\tif (this.resamplingMode != 0){\r\n\t\t\t\t//let interleaved16bitPcmAudioChunk = new Int16Array(this._inputDataView);\r\n\t\t\t\t//let processed = this.resampler.processChunk(interleaved16bitPcmAudioChunk);\r\n\t\t\t\tlet processed = this.resampler.processChunk(this._newInputBuffer[0]);\r\n\t\t\t\tthis._outputRingBuffer.push([processed]);\t\t\t\t//TODO: is MONO\r\n\t\t\t}else{\r\n\t\t\t\tthis._outputRingBuffer.push([this._newInputBuffer[0]]);\t//TODO: is MONO\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Process if we have enough frames for the kernel.\r\n\t\t\tif (this._outputRingBuffer.framesAvailable >= this.emitterBufferSize) {\r\n\t\t\t\t//pull samples\r\n\t\t\t\tthis._outputRingBuffer.pull(this._newOutputBuffer);\r\n\r\n\t\t\t\t//Send info\r\n\t\t\t\tthis.port.postMessage({\r\n\t\t\t\t\trms: this.emitterRms,\r\n\t\t\t\t\tsamples: this._newOutputBuffer,\r\n\t\t\t\t\tsampleRate: this.targetSampleRate,\r\n\t\t\t\t\tchannels: this.channelCount,\r\n\t\t\t\t\ttype: this._newOutputBuffer[0].constructor.name\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nregisterProcessor(\'speex-resample-switch\', SpeexResampleProcessor);')}`)}catch(U){console.error(U),A.debugLog&&A.debugLog("FAILED to add audioWorklet module: "+Q+" - Msg.: "+U.name+", "+U.message)}}else{if(2!=t)throw 3==t?{name:"CreateModuleError",message:"ScriptProcessor nodes are currently not supported as modules (only source)."}:4==t?{name:"CreateModuleError",message:"AudioNodes are currently not supported as modules (you can use them as custom source)."}:{name:"CreateModuleError",message:"Module type unknown."};{let Q=s+F.replace(/-worker$/,"")+"-worker.js";A.debugLog&&A.debugLog("Adding worker module: "+Q)}}}}function k(A){var Q,U,t,F;return"object"==typeof A?(Q=A.type&&"worker"==A.type||A.isWorker?2:A.type&&"scriptProcessor"==A.type?3:A.type&&"audioNode"==A.type?4:1,U=A.name,t=A.setup||A.settings,F=A.preLoad||{}):(Q=1,U=A,t={},F={}),{moduleType:Q,moduleName:U,moduleSetup:t,modulePreLoads:F}}if(h(),E=!0,i=setTimeout((function(){N({message:"Initialization took too long! If you expect long running init. process use option 'initializerTimeout' (ms).",name:"ProcessorInitTimeout"})}),Z),Q.isStreamRecorderSupported||A.customSourceTest||A.customSource){if(A.customSourceTest){let U;Q.createWhiteNoiseGeneratorNode(.1,{targetSampleRate:A.targetSampleRate}).then((function(A){return U=A,a=A.context,p()})).then((function(){G(U,{},{type:"whiteNoiseGenerator"})})).catch((function(A){N(A)}))}else if(A.customSource){let Q=A.customSource.node;a=Q.context,p().then((function(){G(Q,{onBeforeStart:A.customSource.beforeStart,onAfterStart:A.customSource.start||A.customSource.afterStart,onBeforeStop:A.customSource.stop||A.customSource.beforeStop,onAfterStop:A.customSource.afterStop,onBeforeRelease:A.customSource.beforeRelease,onAfterRelease:A.customSource.release||A.customSource.afterRelease},{type:A.customSource.type||"custom",typeData:A.customSource.typeData,hasWorkletSupport:null==A.customSource.hasWorkletSupport||A.customSource.hasWorkletSupport})})).catch((function(A){N(A)}))}else{let U;Q.getMicrophone(A,(async function(U,t){if(a&&U&&("closed"!=a.state&&await a.close(),a=null),!a||"closed"==a.state)if(a=Q.createAudioContext(A,t),null==A.startSuspended||A.startSuspended){try{await a.resume()}catch(A){}await a.suspend()}else await a.resume();return a})).then((function(A){return U=A,p()})).then((function(){G(U.source,U.controls||{},U.info)})).catch((function(A){N("string"==typeof A?{message:A,name:"ProcessorInitError"}:{message:A.message,name:A.name,ref:A})}))}e.start=function(Q,U,t){g&&!r?o((function(){var U=(new Date).getTime();r=!0,A.onaudiostart&&A.onaudiostart({startTime:U}),Q&&Q()}),t):U&&U()},e.stop=function(Q,U,t){r?R((function(){var U=(new Date).getTime();r=!1,A.onaudioend&&A.onaudioend({endTime:U}),Q&&Q()}),t):U&&U()},e.release=function(Q,U,t){g&&d?d((function(){h(),A.onrelease&&A.onrelease(),Q&&Q()}),t):E?N({message:"Release was called before initialization was complete.",name:"ProcessorInitError"}):U&&U()},e.isInitialized=function(){return g},e.isInitPending=function(){return E},e.isProcessing=function(){return r}}else{N({name:"NotSupportedError",message:"Cannot create audio stream recorder because there are no compatible interfaces!"})}function b(U,F,e){var B=U.length;if(A.modules&&A.modules.length){var l=new Array(A.modules.length),o=A.modules.length;A.modules.forEach((async function(R,d){if(E){u("module-"+d);var i=k(R),s=i.moduleType,I=i.moduleName,Z=i.moduleSetup,J={},W=Object.keys(i.modulePreLoads);try{await Promise.all(W.map((async function(A,U){var F=i.modulePreLoads[A],e=1,B=void 0;"object"==typeof F?(e=!F.type||2!=F.type&&"arraybuffer"!=F.type.toLowerCase()?1:2,F=F.path||F.url):0==A.indexOf("wasmFile")?e=2:0==A.indexOf("wasmBase64")&&(e=1,B=n);var l,a=A+"_"+F;if(t[a])J[A]=t[a];else try{var o;if(!F||e>2)throw{name:"PreLoadError",message:"Missing 'path' (url) or unsupported type (use 1=text or 2=arraybuffer)"};1==e?o=await(l=F,new Promise((function(A,U){Q.readFileAsText(l,(function(Q){A(Q)}),(function(A){U(A)}))}))):2==e&&(o=await function(A){return new Promise((function(U,t){Q.readFileAsBuffer(A,(function(A){U(A)}),(function(A){t(A)}))}))}(F)),"function"==typeof B&&(o=B(o)),J[A]=o,t[a]=o}catch(Q){throw{name:"AddModuleError",message:"Failed to pre-load data: "+A+" - name: "+I,info:Q}}})))}catch(A){return void N(A)}var S,h=Z.options||{};if(h.preLoadResults=J,1==s){if(!F)return void N({name:"AddModuleError",message:"Source does not support 'AudioWorkletProcessor' (use only workers instead) - name: "+I});h.processorOptions||(h.processorOptions=h.setup||{}),h.processorOptions.ctxInfo||(h.processorOptions.ctxInfo={sampleRate:a.sampleRate,targetSampleRate:A.targetSampleRate}),(S=new AudioWorkletNode(a,I,h)).isReady=!1,S.moduleName=I,S.port.onmessage=b,S.onprocessorerror=G,S.sendToModule=function(A){S.isReady?S.port.postMessage(A):C({name:"AudioModuleProcessorException",message:"'sendToModule' was called before module was actually ready. Consider 'startSuspended' option maybe.'",module:S.moduleName})}}else{if(2!=s)return 3==s?void N({name:"AddModuleError",message:"ScriptProcessor nodes are currently not supported as modules (only source)."}):4==s?void N({name:"AddModuleError",message:"AudioNodes are currently not supported as modules (you can use them as custom source)."}):void N({name:"AddModuleError",message:"Unknown module type."});h.setup||(h.setup={}),h.setup.ctxInfo||(h.setup.ctxInfo={sampleRate:a.sampleRate,targetSampleRate:A.targetSampleRate}),I.includes("webrtc-vad")?S=V():I.includes("stt-socket")&&(S=c()),S.isReady=!1,S.moduleName=I,S.onmessage=b,S.onerror=G,S.sendToModule=function(A){S.isReady||A&&A.ctrl&&"construct"==A.ctrl.action?S.postMessage(A):C({name:"AudioModuleProcessorException",message:"'sendToModule' was called before module was actually ready. Consider 'startSuspended' option maybe.",module:S.moduleName})},S.sendToModule({ctrl:{action:"construct",options:h}})}if(S.moduleType=s,S.ignoreSendToModules=!1,S.deactivate=function(){S.ignoreSendToModules=!0,r&&(S.sendToModule({ctrl:{action:"stop"}}),S.sendToModule({ctrl:{action:"reset"}}))},S.activate=function(){S.ignoreSendToModules=!1,r&&S.sendToModule({ctrl:{action:"start"}})},R.handle=S,!F&&0==d){var p=U[0];if(!p.onmessage)return void N({name:"AddModuleError",message:"If source is not compatible to 'AudioWorklet' it has to have a 'onmessage' event to get the processed data."});p.onmessage=function(A){A&&null!=A.data&&(A.data.moduleEvent||A.data.sourceEvent?S.sendToModule({ctrl:{action:"handle",data:A.data}}):S.sendToModule({ctrl:{action:"process",data:A.data}}))}}U[B+d]=S}function b(A){if(A&&null!=A.data){if(1==A.data.moduleState)S.isReady=!0,m("module-"+d),A.data.moduleInfo&&(S.moduleInfo=A.data.moduleInfo),l[d]={moduleName:S.moduleName,moduleInfo:S.moduleInfo},0==--o&&e(l);else if(9!=A.data.moduleState||S.isTerminated)10==A.data.moduleState?(A.data.error.target=A.target,G(A.data.error)):A.data.moduleResponse||Z.sendToModules&&(A.data.moduleEvent?Z.sendToModules.forEach((function(Q){U[Q]&&!U[Q].ignoreSendToModules&&U[Q].sendToModule({ctrl:{action:"handle",data:A.data}})})):Z.sendToModules.forEach((function(Q){U[Q]&&!U[Q].ignoreSendToModules&&U[Q].sendToModule({ctrl:{action:"process",data:A.data}})})));else if("function"==typeof S.terminate)try{S.isTerminated=!0,S.terminate()}catch(A){S.isTerminated=!0,G({name:"TerminateError",message:"Failed to terminate module",info:A})}}else;Z.onmessage&&Z.onmessage(A.data,U)}function G(A){var Q;A.message&&0==A.message.indexOf("Uncaught {")?(A.preventDefault(),Q=JSON.parse(A.message.replace(/^Uncaught /,"")),A.message=Q):Q=A,C({name:"AudioModuleProcessorException",message:"Error in module: "+A.target.moduleName+" - "+(Q&&Q.message?Q.message:"Check console for details."),module:A.target.moduleName,info:Q}),E&&!g&&N({message:"Error during setup of module: "+S.moduleName,name:"ProcessorInitError",info:Q}),Z.onerror&&Z.onerror(A)}}))}else e([])}function G(U,t,F){l=a.sampleRate,F||(F={}),A.targetSampleRate&&A.targetSampleRate!=l&&(Q.isNativeStreamResamplingSupported=!1,I=l-A.targetSampleRate);var n=[U],i=[],V=!0;null!=F.hasWorkletSupport?V=F.hasWorkletSupport:"scriptProcessor"==F.type&&(V=!1),b(n,V,(function(A){S=A,m("modulesSetup"),e.processNodes=n;let Q=!1;n.forEach((function(A,U){!V||A.moduleType&&1!=A.moduleType||i.push(A),A.moduleInfo&&A.moduleInfo.resamplingMode&&(Q=!0)})),!I||Q||N({message:"Samplerate mismatch and no resampler found!",name:"ProcessorInitError"})}));var c=A.destinationNode||a.destination;e.mainAudioContext=a,e.source=U,e.sourceInfo=F,W=F,t||(t={}),o=function(A,Q){Promise.resolve((t.onBeforeStart||B)()).then((function(){return a.resume()})).then((function(){if(i.length>1){for(var A=1;A<i.length;A++)i[A-1].connect(i[A]);i[A-1].connect(c)}else 1==i.length?i[0].connect(c):n[0].connect&&n[0].connect(c);if(n.forEach((function(A){A.sendToModule&&A.sendToModule({ctrl:{action:"start",options:{}}})})),t.onAfterStart)return Promise.resolve(t.onAfterStart())})).then(A).catch((function(A){C({name:"ProcessorStartError",message:A.name+" - Message: "+(A.message||A)}),Q&&Q(A)}))},R=function(A,Q){Promise.resolve((t.onBeforeStop||B)()).then((function(){return n.forEach((function(A,Q){A.disconnect&&A.disconnect(),A.sendToModule&&A.sendToModule({ctrl:{action:"stop",options:{}}})})),a.suspend()})).then((function(){if(t.onAfterStop)return Promise.resolve(t.onAfterStop())})).then(A).catch((function(A){C({name:"ProcessorStopError",message:A.name+" - Message: "+(A.message||A)}),Q&&Q(A)}))},d=function(A,Q){Promise.resolve((t.onBeforeRelease||B)()).then((function(){return n.forEach((function(A,Q){A.sendToModule&&A.sendToModule({ctrl:{action:"release",options:{}}}),n[Q]=null})),e.processNodes=null,e.source=null,a.close()})).then((function(){if(t.onAfterRelease)return Promise.resolve(t.onAfterRelease())})).then(A).catch((function(A){C({name:"ProcessorReleaseError",message:A.name+" - Message: "+(A.message||A)}),Q&&Q(A)}))},m("sourceSetup")}},Q.getAudioDevices=function(A){return new Promise((function(Q,U){!async function(){if(!navigator.mediaDevices.enumerateDevices)return U({message:"MediaDevices 'enumerateDevices' is not available! Check if context is secure (SSL, HTTPS, etc.).",name:"NotSupportedError"});var t=!1,F=void 0;navigator.mediaDevices.enumerateDevices().then((function(A){if(!t){clearTimeout(F);var U={},e={};return A.forEach((function(A){"audioinput"==A.kind?U[A.label]=A.deviceId:"audiooutput"==A.kind&&(e[A.label]=A.deviceId)})),Q({input:U,output:e})}})).catch((function(A){return U(A)})),F=setTimeout((function(){return t=!0,U({message:"Media device enumeration timeout. Permission might require user interaction.",name:"TimeoutError"})}),A||5e3)}()}))},Q.getMicrophone=function(A,U,t){return A||(A={}),U||(U=async function(U,t){var F=Q.createAudioContext(A,t);if(null==A.startSuspended||A.startSuspended){try{await F.resume()}catch(A){}await F.suspend()}else await F.resume();return F}),new Promise((function(F,e){!async function(){var n=JSON.parse(JSON.stringify(Q.getSupportedAudioConstraints()));n.sampleRate&&A.targetSampleRate&&(n.sampleRate=A.targetSampleRate);var B={video:!1,audio:!Object.keys(n).length||n};if(!navigator.mediaDevices.getUserMedia)return e({message:"MediaDevices 'getUserMedia' is not available! Check if context is secure (SSL, HTTPS, etc.).",name:"NotSupportedError"});var l=!1,a=void 0;navigator.mediaDevices.getUserMedia(B).then((async function(t){if(!l){var e,n;clearTimeout(a),e=Q.tryNativeStreamResampling&&Q.isNativeStreamResamplingSupported?await U(!1,!1):await U(!1,!0);try{n=e.createMediaStreamSource(t)}catch(F){n=(e=await U(!0,!0)).createMediaStreamSource(t),F&&F.name&&"NotSupportedError"==F.name&&(Q.isNativeStreamResamplingSupported=!1,A.debugLog&&A.debugLog("Native stream resampling has been deactivated - Info: "+F.message))}A.destinationNode||(A.destinationNode=e.createMediaStreamDestination());var B,o={type:"mic"};if(n.mediaStream&&n.mediaStream.getAudioTracks)try{B=n.mediaStream.getAudioTracks()[0],o.label=B.label,B.getSettings?o.settings=B.getSettings():o.settings={},o.settings.sampleRate=e.sampleRate}catch(A){}return F({source:n,controls:{onBeforeStart:function(){},onAfterStop:function(){},onAfterRelease:function(){B&&"function"==typeof B.stop&&"live"==B.readyState&&B.stop()}},info:o})}})).catch((function(A){return e(A)})),a=setTimeout((function(){return l=!0,e({message:"Media 'getUserMedia' timeout. Permission might require user interaction.",name:"TimeoutError"})}),t||5e3)}()}))},Q.createAudioRecorder=function(A,U,t){return t||(t={}),t.codec||(t.codec="webm_ogg_opus"),new Promise((function(F,e){!async function(){try{var n=U.settings.sampleRate;if(!n)return e({message:"Sample-rate unknown! Please add correct 'sourceInfo'.",name:"AudioRecorderError"});var B=U.settings.channelCount;if(B>1)return e({message:"Sorry, but this recorder only supports MONO audio at the moment.",name:"NotSupportedError"});var l=t.mimeType||Q.defaultMimeTypesForCodecs[t.codec]||Q.defaultMimeTypesForCodecs.webm_ogg_opus,a=t.sampleTime||(t.chunkSize?Math.floor(1e3/n*t.chunkSize):0);if(a&&t.decodeToAudioBuffer&&console.error("WARNING: Partial decoding is not supported at the moment! It is possible but requires adding custom headers for each blob!"),window.MediaRecorder){if(MediaRecorder.isTypeSupported(l)){var o,R=new MediaRecorder(A,{mimeType:l,bitsPerSecond:2*n*B}),d=!1;R.onerror=t.onerror||console.error,t.onstart&&(R.onstart=t.onstart),t.onpause&&(R.onpause=t.onpause),t.onresume&&(R.onresume=t.onresume);var i=t.onstop;R.onstop=function(A){i&&!t.decodeToAudioBuffer&&i()};var C,V=t.ondataavailable||t.onprocess;t.decodeToAudioBuffer?V&&(R.ondataavailable=function(A){if("inactive"==R.state&&(d=!0),A&&A.data){let U=Date.now();Q.offlineAudioContextBlobDecoder(n,B,A.data,(function(A){A&&V({data:A.getChannelData(0),decodeTime:Date.now()-U}),!d&&t.recordLimitMs&&Date.now()-o>=t.recordLimitMs?c():d&&i&&i()}))}}):V&&(R.ondataavailable=function(A){V(A),t.recordLimitMs&&Date.now()-o>=t.recordLimitMs&&c()});var c=function(){C&&clearTimeout(C),Date.now(),"inactive"!=R.state&&R.stop()};return F({getMediaRecorder:function(){return R},mimeType:l,sourceInfo:U,sampleTime:a,start:function(){o=Date.now(),void 0,d=!1,a?R.start(a):(R.start(),t.recordLimitMs&&(C=setTimeout(c,t.recordLimitMs)))},stop:c})}return e({message:"MIME-Type '"+l+"' is not supported!",name:"NotSupportedError"})}e({message:"'MediaRecorder' is not available!",name:"NotSupportedError"})}catch(A){return console.error("AudioRecorder",A),e(A)}}()}))},Q.offlineAudioContextBlobDecoder=function(A,Q,U,t){F(U,(function(U){U?new OfflineAudioContext(Q,U.byteLength,A).decodeAudioData(U,(function(A){t(A)}),(function(A){console.error("offlineAudioContext.decodeAudioData ERROR",A),t()})):t()}))},Q.blobToArray=F,Q.createLegacyMicrophoneScriptProcessor=function(A){return A||(A={}),Q.getMicrophone(A,void 0).then((function(Q){var U=Q.source,t=U.context,F=t.sampleRate,e=A.bufferSize||2048,n=t.createScriptProcessor(e,1,1);U.connect(n);var B={node:n,type:"scriptProcessor",typeData:Q.info,hasWorkletSupport:!1,start:function(){Q.controls.onAfterStart&&Q.controls.onAfterStart()},stop:function(){Q.controls.onBeforeStop&&Q.controls.onBeforeStop()},release:function(){Q.controls.onAfterRelease&&Q.controls.onAfterRelease()}};if(Q.controls&&(Q.controls.onBeforeStart&&(B.beforeStart=Q.controls.onBeforeStart),Q.controls.onAfterStop&&(B.afterStop=Q.controls.onAfterStop),Q.controls.onBeforeRelease&&(B.beforeRelease=Q.controls.onBeforeRelease)),A.onaudioprocess)n.onaudioprocess=A.onaudioprocess;else{n.onaudioprocess=function(A){!function(A){if(A&&A.inputBuffer){var Q=[A.inputBuffer.getChannelData(0)];n.onmessage({data:{samples:Q,sampleRate:F,channels:1,type:Q[0].constructor.name}})}}(A)},n.onmessage=A.onmessage||function(A){}}return B}))},Q.createWhiteNoiseGeneratorNode=function(A,U,t){U||(U={});var F=Q.defaultProcessorOptions.moduleFolder.replace(/\/$/,"")+"/";return new Promise((function(e,n){!async function(){try{var B=Q.createAudioContext(U);try{await B.resume()}catch(A){}await B.suspend();var l=F+"white-noise-generator.js";await B.audioWorklet.addModule(l);var a=new AudioWorkletNode(B,"white-noise-generator",{processorOptions:{gain:A||.1}});t&&(a.port.onmessage=t),e(a)}catch(A){return n(A)}}()}))},Q.createFileSource=function(A,U,t,F){return U||(U={}),new Promise((function(e,n){try{function B(A){n(A)}Q.readFileAsBuffer(A,(function(n){Q.createAudioBufferSource(n,U,t,F).then((function(Q){Q.typeData={fileUrl:A},e(Q)})).catch(B)}),B)}catch(l){n(l)}}))},Q.createAudioBufferSource=function(A,U,t,F){return U||(U={}),new Promise((function(e,n){!async function(){try{var B=Q.createAudioContext(U);try{await B.resume()}catch(A){}await B.suspend();var l=B.createBufferSource();B.decodeAudioData(A,(function(A){return l.buffer=A,l.loop=null==t||t,F&&(l.onended=F),e({node:l,type:"fileAudioBuffer",typeData:{},start:function(){l.start()},stop:function(){l.stop()},release:function(){}})}),(function(A){return n(A)}))}catch(A){return n(A)}}()}))},Q.createSourceAudioPlayer=function(A,U,t,F,e){return U||(U={}),U.modules=t||[],U.customSource=A,null==U.startSuspended&&(U.startSuspended=!0),new Q.Processor(U,F,e)},Q.encodeWaveBuffer=function(A,U,t,F,e,n){var B=Q.defaultProcessorOptions.moduleFolder.replace(/\/$/,"")+"/",l=new Worker(B+"wave-encoder-worker.js");e||(e=console.log),n||(n=console.error);var a={setup:{inputSampleRate:U,inputSampleSize:A.length,lookbackBufferMs:0}};l.onmessage=function(Q){1==Q.data.moduleState?l.postMessage({encode:{format:"wave",data:{samples:[A],sampleRate:U,channels:t,isFloat32:F}}}):Q.data.encoderResult&&(l.terminate(),Q.data.error?n({name:"EncoderError",message:Q.data.error}):e(Q.data.encoderResult))},l.onerror=function(A){l.terminate(),n(A)},l.postMessage({ctrl:{action:"construct",options:a}})},Q.decodeAudioFile=function(A,U,t,F,e){Q.readFileAsBuffer(A,(function(A){new OfflineAudioContext(t,A.byteLength,U).decodeAudioData(A,(function(A){F(A)}),(function(A){e(A)}))}),(function(A){e(A)}))},Q.decodeAudioFileToInt16Mono=function(A,U,t,F){Q.decodeAudioFile(A,U,1,(function(A){Q.encodeWaveBuffer(A.getChannelData(0),U,1,!0,(function(A){try{var Q=new Int16Array(A.wav.buffer);t(Q)}catch(A){F(A)}}),F)}),F)},Q.resampleBufferViaSpeex=function(A,U,t,F,e,n,B){n||(n=console.log),B||(B=console.error);try{var l=new OfflineAudioContext(F,A.length,U),a=Q.defaultProcessorOptions.moduleFolder.replace(/\/$/,"")+"/",o="speex-resample-switch";l.audioWorklet.addModule(a+o+".js").then((function(){var Q={processorOptions:{ctxInfo:{sampleRate:U},targetSampleRate:t,resampleQuality:e,bufferSize:A.length}},F=new AudioWorkletNode(l,o,Q);F.port.onmessage=function(Q){1==Q.data.moduleState?F.port.postMessage({resample:{samples:[A],isInt16:!0}}):Q.data.resampleResult&&(l=null,Q.data.error?B({name:"ResampleError",message:Q.data.error}):n(Q.data.resampleResult))},F.onprocessorerror=function(A){l=null,B(A)}}))}catch(A){B(A)}},Q.readFileAsBuffer=function(A,U,t){s&&s.files?s.files.fetch(A,U,t,"arraybuffer",Q.contentFetchTimeout):e("arraybuffer",A,U,t)},Q.readFileAsText=function(A,U,t){s&&s.files?s.files.fetch(A,U,t,void 0,Q.contentFetchTimeout):e("text",A,U,t)},Q.base64={base64StringToUint8Array:n,uint8ArrayToBase64String:function(A){try{return btoa(A.reduce((function(A,Q){return A+String.fromCharCode(Q)}),""))}catch(A){throw new Error("Converting Uint8Array to base64 string failed.")}}},Q.addAudioElementToPage=function(A,Q,U){var t=document.createElement("audio");t.src=window.URL.createObjectURL("Blob"==Q.constructor.name?Q:new Blob([Q],{type:U||"audio/wav"})),t.setAttribute("controls","controls");var F=document.createElement("div");return F.appendChild(t),A||(A=document.body),A.appendChild(F),t},A.webAudio=Q}(s),function(){var A={};function Q(Q){Q.output&&Q.output.wav?A.onWaveEncoderAudioData(Q.output.wav):Q.output&&Q.output.buffer,Q.gate&&(A.onWaveEncoderStateChange(Q.gate),!0===Q.gate.isOpen?U=!0:!1===Q.gate.isOpen&&(U&&e&&A.waveEncoder&&A.waveEncoder.handle.sendToModule({request:{get:"wave"}}),U=!1))}A.onProcessorReady=function(A){console.log("SepiaVoiceRecorder -  onProcessorReady",A)},A.onProcessorInitError=function(A){console.error("SepiaVoiceRecorder -  onProcessorInitError",A)},A.onConnected=function(A){console.log("SepiaVoiceRecorder -  onConnected",A)},A.onDisconnected=function(A){console.log("SepiaVoiceRecorder -  onDisconnected",A)},A.onAudioStart=function(A){console.log("SepiaVoiceRecorder -  onAudioStart")},A.onAudioEnd=function(A){console.log("SepiaVoiceRecorder -  onAudioEnd")},A.onProcessorError=function(A){console.error("SepiaVoiceRecorder -  onProcessorError",A)},A.onProcessorRelease=function(A){console.log("SepiaVoiceRecorder -  onProcessorRelease")},A.onDebugLog=function(A){console.log("debugLog",A)},A.onResamplerData=function(A){console.log("SepiaVoiceRecorder -  onResamplerData",A)},A.onWaveEncoderStateChange=function(A){console.log("SepiaVoiceRecorder -  onWaveEncoderStateChange",A)},A.onWaveEncoderAudioData=function(A){console.log("SepiaVoiceRecorder -  onWaveEncoderAudioData",A)};var U=!1;function t(Q){Q.voiceActivity,Q.voiceEnergy,null!=Q.vadSequenceCode&&(1==Q.vadSequenceCode?A.onVadStateChange("vaup",1):2==Q.vadSequenceCode?A.onVadStateChange("speechstart",2):3==Q.vadSequenceCode?A.onVadStateChange("vadown",3):4==Q.vadSequenceCode?A.onVadStateChange("speechend",4):5==Q.vadSequenceCode&&A.onVadStateChange("speechend",5))}function F(Q){Q&&(Q.gate&&(0==Q.gate.isOpen&&n?(n=!1,A.onSpeechRecognitionStateChange({state:"onStreamEnd",bufferOrTimeLimit:Q.gate.bufferOrTimeLimit})):1!=Q.gate.isOpen||n||(A.onSpeechRecognitionStateChange({state:"onStreamStart"}),n=!0)),Q.recognitionEvent&&A.onSpeechRecognitionEvent(Q.recognitionEvent),Q.connectionEvent&&("ready"==Q.connectionEvent.type?A.onConnected(Q.connectionEvent.data):"closed"==Q.connectionEvent.type&&A.onDisconnected(Q.connectionEvent.data)),Q.output&&Q.output.wav&&A.onWaveEncoderAudioData(Q.output.wav))}A.onSpeechRecognitionStateChange=function(A){console.log("SepiaVoiceRecorder -  onSpeechRecognitionStateChange",A)},A.onSpeechRecognitionEvent=function(A){console.log("SepiaVoiceRecorder -  onSpeechRecognitionEvent",A)};var e,n=!1,B=16e3,l=512;function a(Q){e&&A.waveEncoder&&A.waveEncoder.handle.sendToModule({gate:Q})}function o(Q){e&&A.sttServerModule&&A.sttServerModule.handle.sendToModule({gate:Q})}A.create=function(U){e?A.onProcessorInitError({name:"ProcessorInitError",message:"SepiaVoiceRecorder already exists. Release old one before creating new."}):(U||(U={}),async function(U){U?(U.targetSampleRate&&(B=U.targetSampleRate),U.resamplerBufferSize&&(l=U.resamplerBufferSize)):U={};var n=!!U.asr;"object"!=typeof U.asr&&(U.asr={});var a=!!U.vad;"object"!=typeof U.vad&&(U.vad={});var o=void 0;if(U.fileUrl)try{o=await SepiaFW.webAudio.createFileSource(U.fileUrl,{targetSampleRate:B})}catch(Q){return void A.onProcessorInitError(Q)}var R,d,i,C={name:"speex-resample-switch",settings:{onmessage:A.onResamplerData,sendToModules:[],options:{processorOptions:{targetSampleRate:B,resampleQuality:U.resampleQuality||4,bufferSize:l,passThroughMode:0,calculateRmsVolume:!0,gain:U.gain||1}}}},V={name:"wave-encoder",type:"worker",handle:{},settings:{onmessage:Q,options:{setup:{inputSampleRate:B,inputSampleSize:l,lookbackBufferMs:0,recordBufferLimitKb:500,recordBufferLimitMs:U.recordingLimitMs,doDebug:!1}}}},c={name:"webrtc-vad-worker",type:"worker",settings:{onmessage:t,options:{setup:{inputSampleRate:B,inputSampleSize:l,bufferSize:U.vad.bufferSize||960,vadMode:U.vad.mode||3,sequence:{silenceActivationTime:450,maxSequenceTime:U.vad.maxSequenceTime||1e4,minSequenceTime:U.vad.minSequenceTime||600}}}}},s={name:"stt-socket",type:"worker",handle:{},settings:{onmessage:F,options:{setup:{inputSampleRate:B,inputSampleSize:l,lookbackBufferMs:0,recordBufferLimitKb:500,recordBufferLimitMs:U.recordingLimitMs,serverUrl:U.asr.serverUrl,clientId:U.asr.clientId,accessToken:U.asr.accessToken,messageFormat:U.asr.messageFormat||"webSpeechApi",language:U.asr.language||"",task:U.asr.task||"",model:U.asr.model||"",continuous:null!=U.asr.continuous&&U.asr.continuous,optimizeFinalResult:U.asr.optimizeFinalResult,engineOptions:U.asr.engineOptions||{},returnAudioFile:U.asr.returnAudioFile||!1,doDebug:!1}}}},I=[];I.push(C),I.length,a&&(I.push(c),d=I.length,A.vadModule=c,C.settings.sendToModules.push(d)),n?(I.push(s),i=I.length,A.sttServerModule=s,C.settings.sendToModules.push(i)):(I.push(V),R=I.length,A.waveEncoder=V,C.settings.sendToModules.push(R)),e=new SepiaFW.webAudio.Processor({onaudiostart:A.onAudioStart,onaudioend:A.onAudioEnd,onrelease:A.onProcessorRelease,onerror:A.onProcessorError,targetSampleRate:B,modules:I,destinationNode:void 0,startSuspended:!0,debugLog:A.onDebugLog,customSource:o},(function(Q){A.onProcessorReady(Q)}),(function(Q){A.onProcessorInitError(Q)}))}(U))},A.isReady=function(){return!!e&&e.isInitialized()},A.isActive=function(){return!!e&&e.isInitialized()&&e.isProcessing()},A.start=function(A,Q,U){e?e.start((function(){a("open"),o("open"),A&&A()}),Q,U):U&&U({name:"ProcessorInitError",message:"SepiaVoiceRecorder doesn't exist yet."})},A.stop=function(A,Q,U){e?e.stop((function(Q){a("close"),o("close"),A&&A(Q)}),Q,U):Q&&Q()},A.release=function(A,Q,U){e?e.release((function(){e=void 0,A&&A()}),(function(){e=void 0,Q&&Q()}),(function(A){e=void 0,U&&U(A)})):Q&&Q()},A.stopIfActive=function(Q){A.isActive()?A.stop(Q,Q,void 0):Q&&Q()},A.stopAndReleaseIfActive=function(Q){A.stopIfActive((function(){A.isReady()?A.release(Q,Q,void 0):(e=void 0,Q&&Q())}))},A.decodeAudioFileToInt16Mono=function(A,Q,U,t,F){Q||(Q=16e3),U&&U>1&&console.error("SepiaVoiceRecorder.decodeAudioFileToInt16Mono - Channels > 1 not supported. Result will only contain data of channel 0."),t||(t=console.log),F||(F=console.error),SepiaFW.webAudio.decodeAudioFileToInt16Mono(A,Q,t,F)},A.addAudioElementToPage=function(A,Q,U){return SepiaFW.webAudio.addAudioElementToPage(A,Q,U)},window.SepiaVoiceRecorder=A}();class I{volumeThresholds=[.05,10];gain=1;isLoading=!1;isRecording=!1;isWaitingForFinalResult=!1;waitingForFinalResultTimer=void 0;waitingForFinalResultDelay=4e3;asrStreaming=!1;sourceInfo="-?-";constructor(A,Q){if(window.SepiaFW&&(SepiaFW.webAudio.defaultProcessorOptions.moduleFolder="lib"),window.SepiaVoiceRecorder){this.sepiaSpeechRecognition=A,this.sepiaSpeechRecognitionConfig=Q;const U=this;SepiaVoiceRecorder.onProcessorReady=function(A){console.log("SepiaVoiceRecorder -  onProcessorReady",A),this.sourceInfo="Sample-rate: "+A.targetSampleRate+"Hz (factor: "+A.inputSampleRate/A.targetSampleRate+")\nDevice Label:\n"+(A.sourceInfo?A.sourceInfo.label:""),console.log(this.sourceInfo),U.isLoading=!1,U.isRecording=!1,U.isWaitingForFinalResult=!1,SepiaVoiceRecorder.start()},SepiaVoiceRecorder.onConnected=function(Q){Q&&Q.model&&(console.log("INFO - connected - ASR active model: "+Q.model),A._dispatchEvent(new Event("start")))},SepiaVoiceRecorder.onDisconnected=function(){A._dispatchEvent(new Event("end"))},SepiaVoiceRecorder.onProcessorInitError=function(Q){U.onMicError();const t=new d;if(t.message=Q.message,"NotAllowedError"===Q.name)t.error=R.NOTALLOWED,t._dispatch(A);else console.log(Q);"http:"==location.protocol&&0==!location.origin.indexOf("http://localhost")&&console.error("Init. ERROR - Likely because of insecure origin (no HTTPS or localhost)")},SepiaVoiceRecorder.onProcessorError=function(A){console.error("SepiaVoiceRecorder -  onProcessorError",A),U.onMicError(),console.log("ERROR - onProcessorError: "+A.name)},SepiaVoiceRecorder.onAudioStart=function(Q){A._dispatchEvent(new Event("audiostart")),U.isRecording=!0},SepiaVoiceRecorder.onAudioEnd=function(Q){A._dispatchEvent(new Event("audioend")),U.isRecording=!1,U.isWaitingForFinalResult&&(clearTimeout(U.waitingForFinalResultTimer),U.waitingForFinalResultTimer=setTimeout((function(){U.isWaitingForFinalResult=!1}),U.waitingForFinalResultDelay)),console.log("Microphone is CLOSED")},SepiaVoiceRecorder.onProcessorRelease=function(A){console.log("SepiaVoiceRecorder -  onProcessorRelease"),U.isRecording=!1,U.isLoading=!1,U.isWaitingForFinalResult=!1},SepiaVoiceRecorder.onDebugLog=function(A){},SepiaVoiceRecorder.onResamplerData=function(A){},SepiaVoiceRecorder.onSpeechRecognitionStateChange=function(A){"onStreamStart"==A.state?(U.asrStreaming,U.asrStreaming=!0):"onStreamEnd"==A.state&&(U.asrStreaming&&(!0===A.bufferOrTimeLimit&&console.log("Speech Recognition - Stopped streaming due to buffer- or time-limit"),U.isRecording?SepiaVoiceRecorder.stop():U.isWaitingForFinalResult&&(clearTimeout(U.waitingForFinalResultTimer),U.waitingForFinalResultTimer=setTimeout((function(){U.isWaitingForFinalResult=!1}),U.waitingForFinalResultDelay))),U.asrStreaming=!1)},SepiaVoiceRecorder.onSpeechRecognitionEvent=function(Q){if("result"==Q.type){if(!U.isRecording&&!U.isWaitingForFinalResult)return;const t=new a;t.transcript=Q.transcript,t.confidence=Q.confidence;const F=new o([t]);if(Q.isFinal){U.isWaitingForFinalResult&&!U.isRecording&&clearTimeout(U.waitingForFinalResultTimer),F.isFinal=!0;const t=new B([F]),e=new l(t);if(Q.transcript)e._dispatch(A,"result");else{const Q=new d;Q.error=R.NOSPEECH,Q.message="No speech was detected.",Q._dispatch(A)}U.isWaitingForFinalResult=!1}else{F.isFinal=!1;const t=new B([F]),e=new l(t);Q.transcript?e._dispatch(A,"result"):e._dispatch(A,"nomatch"),U.isWaitingForFinalResult=!0}}else if("error"==Q.type){const U=new d;if(U.message=Q.message,Q.name&&Q.message)switch(Q.name){case"SocketConnectionError":U.error=R.NETWORK,U._dispatch(A);break;case"Error":"ChunkProcessorError failed to load."===Q.message&&(U.error=R.SERVICENOTALLOWED,U.message="You are likely unauthorized to access this SEPIA STT server.",U._dispatch(A));break;default:console.log(Q)}else console.error("Speech Recognition Error:",Q)}else console.log("Speech Recognition - Event: "+Q.type)},SepiaVoiceRecorder.onWaveEncoderAudioData=function(A){},SepiaVoiceRecorder.onVadStateChange=function(Q,U){switch(Q){case"vaup":A._dispatchEvent(new Event("soundstart"));break;case"vadown":A._dispatchEvent(new Event("soundend"));break;case"speechstart":A._dispatchEvent(new Event("speechstart"));break;case"speechend":A._dispatchEvent(new Event("speechend"))}}}else SepiaVoiceRecorder={notSupported:!0},console.error("SEPIA Web Audio Library not found or not supported (IE11?)!")}toggleMic(){const A=this.sepiaSpeechRecognition.lang.split("-")[0];if(U.language!=this.sepiaSpeechRecognition.lang&&U.language!=A){const A=new d;return A.error=R.LANGUAGENOTSUPPORTED,A.message="The specified SEPIA STT server does not support the language specified by the user agent.",void A._dispatch(this.sepiaSpeechRecognition)}const Q=this;this.isLoading||this.isRecording||this.isWaitingForFinalResult?this.isRecording?SepiaVoiceRecorder.stop():(this.isLoading||this.isWaitingForFinalResult)&&SepiaVoiceRecorder.stopAndReleaseIfActive((function(){Q.isLoading=!1,Q.isRecording=!1,Q.isWaitingForFinalResult=!1})):(this.isLoading=!0,SepiaVoiceRecorder.stopAndReleaseIfActive((function(){SepiaFW.webAudio.tryNativeStreamResampling=!1;const A={language:Q.sepiaSpeechRecognition.lang,continuous:Q.sepiaSpeechRecognition.continuous,messageFormat:"default"};var U=Object.assign(Q.sepiaSpeechRecognitionConfig,A);console.log(U),SepiaVoiceRecorder.create({gain:Q.gain,asr:U,vad:!0})})))}releaseMic(A){SepiaVoiceRecorder.stopAndReleaseIfActive((function(){this.isLoading=!1,this.isRecording=!1,this.isWaitingForFinalResult=!1,A&&A()}))}onMicError(){this.isRecording=!1,this.isWaitingForFinalResult=!1,this.isLoading=!1}}class r{src="";weight=1}class g{#U=[];#t(A){return this.#U[A]}length=0;constructor(){return new Proxy(this,{get:(A,Q)=>"addFromString"===Q||"addFromURI"===Q?function(){return A[Q].apply(A,arguments)}:"number"==typeof+Q?A.#t(Q):"length"===Q?A.#U.length:void 0})}addFromURI=(A,Q=1)=>{const U=new r;fetch(A).then((A=>{A.text().then((A=>{U.src=A,U.weight=Q,this.#U.push(U)}))})).catch((A=>{console.log("Failed to add SpeechGrammar from URI: ",A)}))};addFromString=(A,Q=1)=>{const U=new r;U.src=A,U.weight=Q,this.#U.push(U)}}let E={};const Z=A=>(E=A,J);class J{#F=new I(this,E);grammars=new g;lang=document.documentElement.lang||navigator.language;continuous=!1;interimResults=!1;maxAlternatives=1;constructor(){n(E)}start=()=>{this.#F.toggleMic()};stop=()=>{this.#F.toggleMic()};abort=()=>{this.#F.toggleMic()};onaudiostart=A=>{};onsoundstart=A=>{};onspeechstart=A=>{};onspeechend=A=>{};onsoundend=A=>{};onaudioend=A=>{};onresult=A=>{};onnomatch=A=>{};onerror=A=>{};onstart=A=>{};onend=A=>{};_eventCallbacks=new Map;_dispatchEvent=A=>{const Q=this._eventCallbacks.get(A.type);Q&&Q.forEach((Q=>Q(A))),this[`on${A.type}`](A)};addEventListener=(A,Q)=>{this._eventCallbacks.has(A)?this._eventCallbacks.get(A).push(Q):this._eventCallbacks.set(A,[Q])};removeEventListener=(A,Q)=>{if(this._eventCallbacks.has(A)){const U=this._eventCallbacks.get(A);U.includes(Q)&&U.splice(U.indexOf(Q),1)}else;}}class W{serverUrl="http://localhost:20741";clientId="any";accessToken="test1234";task="assistant";model="";optimizeFinalResult=!0;engineOptions={}}export{W as SepiaSpeechRecognitionConfig,Z as sepiaSpeechRecognitionInit};
