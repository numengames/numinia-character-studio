//--- Server ---

var serverSettings = {
  serverUrl: "http://localhost:20741",
  clientId: "any",
  accessToken: "test1234"
};
var asrOptions = {
  //common options (usually supported by all engines):
  language: "en-US",
  task: "",
  model: "",
  continuous: true,
  optimizeFinalResult: true,
  messageFormat: "default", 	// Current API is built around "default", "webSpeechApi" not needed for now
  //engine specific options:
  engineOptions: {}
};

var asrEngine = "";
var availableFeatures = {};
var availableModels = {};

var suggestedSettings;

function handleServerSettings(settings) {
  console.log("INFO - Server version: " + settings.version);
  console.log("INFO - Active engine: " + settings.engine);
  asrEngine = settings.engine;
  console.log("INFO - Available ASR languages: " + JSON.stringify(settings.languages, null, 2));
  asrOptions.language = settings.languages[0];
  settings.languages;
  console.log("INFO - Available ASR models: " + JSON.stringify(settings.models, null, 2));
  asrOptions.model = settings.models[0];
  console.log("INFO - ASR model properties: " + JSON.stringify(settings.modelProperties, null, 2));
  settings.models.forEach(function(m, i) {
    availableModels[m] = settings.modelProperties[i];
    availableModels[m].language = settings.languages[i];
    if (!availableModels[m].engine) availableModels[m].engine = asrEngine; //if it's not dynamic it has to be default
  });
  console.log("INFO - Available ASR features: " + JSON.stringify(settings.features, null, 2));
  if (Array.isArray(settings.features)) {
    availableFeatures[asrEngine] = settings.features;	//fixed engine
  } else {
    availableFeatures = settings.features;	//dynamic engine
  }
  if (!suggestedSettings) {
    suggestedSettings = {};
    //find the best language fit
    let lang = navigator.language;
    let foundI;
    if (lang && settings.languages && settings.models) {
      let li = settings.languages.indexOf(lang);
      if (li >= 0) {
        foundI = li;
      } else {
        let langShort = lang.substring(0, 2);
        for (let i=0; i<settings.languages.length; i++) {
          if (settings.languages[i].indexOf(langShort) == 0) {
            foundI = i;
            break;
          }
        }
      }	
    }
    if (foundI != undefined) {
      asrOptions.language = settings.languages[foundI];
      asrOptions.model = settings.models[foundI];
    }
    console.log("INFO - Default language/model: " + asrOptions.language + "/" + asrOptions.model 
      + " - NOTE: If you set 'language' via settings make sure to remove 'model'!");
  }
}

function getServerInfo(config) {
  console.log("INFO - Loading server settings...");
  
  serverSettings.serverUrl = config.serverUrl;
  serverSettings.clientId = config.clientId;
  serverSettings.accessToken = config.accessToken;

  var controller = new AbortController();
  setTimeout(function() {controller.abort();}, 8000);
  fetch(serverSettings.serverUrl + "/settings", {
    method: "GET",
    signal: controller.signal
  }).then(function(res) {
    if (res.ok) {
      return res.json();
    } else {
      throw {"name": "FetchError", "message": res.statusText, "code": res.status};
    }
  }).then(function(json) {
    console.log("Server Info", json);
    if (json && json.settings) {
      handleServerSettings(json.settings);
    }
  }).catch(function(err) {
    console.error("Server Info Fetch ERROR", err);
  });
}

/**
 * Represents a list of SpeechRecognitionResult objects,
 * or a single one if results are being captured in continuous mode.
 */
 class SpeechRecognitionResultList {
  /** Internal list of SpeechRecognitionResult objects. */
  #results = [];

  /**
   * Returns the length of the "array" — the number of SpeechRecognitionResult objects in the list.
   */
  length = 0;

  constructor(results) {
    this.#results = results;
    
    // Use a Proxy to more closely match the interface of SpeechRecognitionResultList.
    return new Proxy(this, {
      get: (_, prop) => {
        if (prop === 'length') {
          return this.#results.length;
        } else if (typeof +prop === 'number') {
          return this.#results[prop];
        }
      }
    });
  }
}

/**
 * Represents the event object for the result and nomatch events, 
 * and contains all the data associated with an interim or final speech recognition result.
 */
 class SpeechRecognitionEvent {
  /**
   * Returns the lowest index value result in the SpeechRecognitionResultList "array" that has actually changed.
   */
  resultIndex = 0;
  
  /**
   * Returns a SpeechRecognitionResultList object representing 
   * all the speech recognition results for the current session.
   */
  results;

  constructor(results) {
    this.results = new SpeechRecognitionResultList(results);
  }
  
  /**
   * Internal function to dispatch either `result` or `nomatch` event.
   * @param {SpeechRecognition} el 
   * @param {"result" | "nomatch"} type 
   */
  _dispatch(el, type) {
    // This is probably a bit of a no-no (assigning custom properties on Event instead of using CustomEvent)
    // but it's necessary to exactly replicate the expected SpeechRecognitionEvent object.
    const event = Object.create(SpeechRecognitionEvent);
    event.resultIndex = this.resultIndex;
    event.results = this.results;
    event.type = type;
    el._dispatchEvent(event);
  }
}

/**
 * Represents a single word that has been recognized by the speech recognition service.
 */
class SpeechRecognitionAlternative {
  /** Returns a string containing the transcript of the recognized word. */
  transcript = '';
  /**
   * Returns a numeric estimate between 0 and 1 of how confident 
   * the speech recognition system is that the recognition is correct.
   */
  confidence = 1;
}

/**
 * Represents a single recognition match, which may contain multiple SpeechRecognitionAlternative objects.
 */
class SpeechRecognitionResult {
  /** Internal list of SpeechRecognitionAlternative objects. */
  #alternatives = [];
  
  /**
   * A boolean value that states whether this result is final (true) or not (false) — if so,
   * then this is the final time this result will be returned; if not, then this result is an interim result,
   * and may be updated later on.
   */
  isFinal = false;

  /**
   * Returns the length of the "array" — the number of SpeechRecognitionAlternative objects 
   * contained in the result (also referred to as "n-best alternatives").
   */
  length = 0;

  constructor(alternatives) {
    this.#alternatives = alternatives;
    
    // Use a Proxy to more closely match the interface of SpeechRecognitionResult.
    return new Proxy(this, {
      get: (_, prop) => {
        if (prop === 'isFinal') {
          return this.isFinal;
        } else if (prop === 'length') {
          return this.#alternatives.length;
        } else if (typeof +prop === 'number') {
          return this.#alternatives[prop];
        } 
      }
    });
  }
}

const SpeechRecognitionErrorCode = Object.freeze({
  /** 
   * No speech was detected in the final transcript.
   */
  NOSPEECH: 'no-speech',
  /**
   * Speech input was aborted somehow, maybe by some user-agent-specific behavior 
   * such as UI that lets the user cancel speech input.
   * 
   * **This is not currently used.**
   */
  ABORTED: 'aborted',
  /** 
   * Audio capture failed.
   * 
   * **This is not currently used.**
   */
  AUDIOCAPTURE: 'audio-capture',
  /** Some network communication that was required to complete the recognition failed. */
  NETWORK: 'network',
  /**
   * The user agent is not allowing any speech input to occur for reasons of security, privacy or user preference.
   */
  NOTALLOWED: 'not-allowed',
  /**
   * The user agent is not allowing the web application requested speech service, 
   * but would allow some speech service, to be used either because the user agent 
   * doesn’t support the selected one or because of reasons of security, privacy or user preference.
   * 
   * In the context of this polyfill, it likely means you are attempting to authenticate to the
   * SEPIA STT server with incorrect credentials.
   */
  SERVICENOTALLOWED: 'service-not-allowed',
  /** 
   * There was an error in the speech recognition grammar or semantic tags, 
   * or the grammar format or semantic tag format is unsupported.
   * 
   * **This is not yet implemented.** Future support for grammars is planned.
   */
  BADGRAMMAR: 'bad-grammar',
  /** 
   * The language was not supported.
   * 
   * In the context of this polyfill, this means the SEPIA STT server does not have a corresponding
   * model to the user's specified language.
   */
  LANGUAGENOTSUPPORTED: 'language-not-supported',
});

/**
 * Represents error messages from the recognition service.
 */
class SpeechRecognitionErrorEvent {
  /** Returns the type of error raised. */
  error = '';

  /** Returns a message describing the error in more detail. */
  message = '';
  
  /**
   * Internal function to dispatch `error` event.
   * @param {SpeechRecognition} el The main SpeechRecognition object.
   */
  _dispatch(el) {
    // This is probably a bit of a no-no (assigning custom properties on Event instead of using CustomEvent)
    // but it's necessary to exactly replicate the expected SpeechRecognitionErrorEvent object.
    const event = Object.create(SpeechRecognitionErrorEvent);
    event.error = this.error;
    event.message = this.message;
    event.type = 'error';
    el._dispatchEvent(event);
  }
}

function decodeBase64(base64, enableUnicode) {
    var binaryString = atob(base64);
    if (enableUnicode) {
        var binaryView = new Uint8Array(binaryString.length);
        for (var i = 0, n = binaryString.length; i < n; ++i) {
            binaryView[i] = binaryString.charCodeAt(i);
        }
        return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
    }
    return binaryString;
}

function createURL(base64, sourcemapArg, enableUnicodeArg) {
    var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
    var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
    var source = decodeBase64(base64, enableUnicode);
    var start = source.indexOf('\n', 10) + 1;
    var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
    var blob = new Blob([body], { type: 'application/javascript' });
    return URL.createObjectURL(blob);
}

function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
    var url;
    return function WorkerFactory(options) {
        url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
        return new Worker(url, options);
    };
}

var WorkerFactory$1 = createBase64WorkerFactory('', null, false);
/* eslint-enable */

var WorkerFactory = createBase64WorkerFactory('', null, false);
/* eslint-enable */

var SpeexResampleSwitch = "//TODO: 'import' not yet supported by FF :-( (Dec 2020)\r\n//import { SampleRateException, SampleSizeException } from './shared/common.js';\r\n//import { RingBuffer } from './shared/ring-buffer.js';\r\n//import { SpeexResampler } from './speex/speex-resampler-interface.min.js';\r\n//import { Speex } from './speex/speex-resampler-wasm.js';\r\nclass RingBuffer{constructor(a,b,c){this._readIndex=0,this._writeIndex=0,this._framesAvailable=0,this._channelCount=b,this._length=a,this._channelData=[];for(let d=0;d<this._channelCount;++d)this._channelData[d]=\"Uint16\"==c?new Uint16Array(a):\"Int16\"==c?new Int16Array(a):\"Uint8\"==c?new Uint8Array(a):\"Int8\"==c?new Int8Array(a):new Float32Array(a)}get framesAvailable(){return this._framesAvailable}push(a,b){let c=a[0].length,d=b||function(a,b,c){return a[b][c]};for(let e,f=0;f<c;++f){e=(this._writeIndex+f)%this._length;for(let b=0;b<this._channelCount;++b)this._channelData[b][e]=d(a,b,f)}this._writeIndex+=c,this._writeIndex>=this._length&&(this._writeIndex-=this._length),this._framesAvailable+=c,this._framesAvailable>this._length&&(this._framesAvailable=this._length)}pull(a,b){if(0===this._framesAvailable)return;let c=a[0].length,d=this,e=b||function(a,b,c){return a[b][c]};for(let d,f=0;f<c;++f){d=(this._readIndex+f)%this._length;for(let b=0;b<this._channelCount;++b)a[b][f]=e(this._channelData,b,d)}this._readIndex+=c,this._readIndex>=this._length&&(this._readIndex-=this._length),this._framesAvailable-=c,0>this._framesAvailable&&(this._framesAvailable=0)}};\r\nclass SpeexResampler{constructor(a,b,c,d=7){this.channels=a,this.inRate=b,this.outRate=c,this.quality=d,this._inBufferPtr=-1,this._inBufferSize=-1,this._outBufferPtr=-1,this._outBufferSize=-1,this._inLengthPtr=-1,this._outLengthPtr=-1}processChunk(a){if(!speexModule)throw new Error(\"You need to wait for SpeexResampler.initPromise before calling this method\");if(0!=a.constructor.name.indexOf(\"Int16Array\"))throw new Error(\"Chunk format has to be 'Int16Array'\");else a=new Uint8Array(a.buffer);if(0!=a.length%(this.channels*Uint16Array.BYTES_PER_ELEMENT))throw new Error(\"Chunk length should be a multiple of channels * 2 bytes\");if(!this._resamplerPtr){const a=speexModule._malloc(4);this._resamplerPtr=speexModule._speex_resampler_init(this.channels,this.inRate,this.outRate,this.quality,a);const b=speexModule.getValue(a,\"i32\");if(0!==b)throw new Error(speexModule.AsciiToString(speexModule._speex_resampler_strerror(b)));this._inLengthPtr=speexModule._malloc(Uint32Array.BYTES_PER_ELEMENT),this._outLengthPtr=speexModule._malloc(Uint32Array.BYTES_PER_ELEMENT)}this._inBufferSize<a.length&&(-1!==this._inBufferPtr&&speexModule._free(this._inBufferPtr),this._inBufferPtr=speexModule._malloc(a.length),this._inBufferSize=a.length);const b=Math.ceil(a.length*this.outRate/this.inRate);this._outBufferSize<b&&(-1!==this._outBufferPtr&&speexModule._free(this._outBufferPtr),this._outBufferPtr=speexModule._malloc(b),this._outBufferSize=b),speexModule.setValue(this._inLengthPtr,a.length/this.channels/Uint16Array.BYTES_PER_ELEMENT,\"i32\"),speexModule.HEAPU8.set(a,this._inBufferPtr),speexModule.setValue(this._outLengthPtr,this._outBufferSize/this.channels/Uint16Array.BYTES_PER_ELEMENT,\"i32\");const c=speexModule._speex_resampler_process_interleaved_int(this._resamplerPtr,this._inBufferPtr,this._inLengthPtr,this._outBufferPtr,this._outLengthPtr);if(0!==c)throw new Error(speexModule.AsciiToString(speexModule._speex_resampler_strerror(c)));const d=speexModule.getValue(this._outLengthPtr,\"i32\");return new Int16Array(speexModule.HEAPU8.slice(this._outBufferPtr,this._outBufferPtr+d*this.channels*Uint16Array.BYTES_PER_ELEMENT).buffer)}}\r\n\r\nvar speexModule;\r\n\r\nclass SpeexResampleProcessor extends AudioWorkletProcessor {\r\n\t\r\n\tget SampleRateException() {\r\n\t\treturn function(message){\r\n\t\t\tthis.message = message;\r\n\t\t\tthis.name = \"SampleRateException\";\r\n\t\t}\r\n\t}\r\n\tget SampleSizeException() {\r\n\t\treturn function(message){\r\n\t\t\tthis.message = message;\r\n\t\t\tthis.name = \"SampleSizeException\";\r\n\t\t};\r\n\t}\r\n\t\r\n\tget Speex() {\r\n\t\treturn function(){return function(a){function b(a,b,c){c=c||\"i8\",\"*\"===c.charAt(c.length-1)&&(c=\"i32\"),\"i1\"===c?Q[a>>0]=b:\"i8\"===c?Q[a>>0]=b:\"i16\"===c?S[a>>1]=b:\"i32\"===c?U[a>>2]=b:\"i64\"===c?(oa=[b>>>0,(na=b,1<=+ga(na)?0<na?(0|ja(+ia(na/4294967296),4294967295))>>>0:~~+ha((na-+(~~na>>>0))/4294967296)>>>0:0)],U[a>>2]=oa[0],U[a+4>>2]=oa[1]):\"float\"===c?W[a>>2]=b:\"double\"===c?X[a>>3]=b:p(\"invalid type for setValue: \"+c)}function c(a,b){switch(b=b||\"i8\",\"*\"===b.charAt(b.length-1)&&(b=\"i32\"),b){case\"i1\":return Q[a>>0];case\"i8\":return Q[a>>0];case\"i16\":return S[a>>1];case\"i32\":return U[a>>2];case\"i64\":return U[a>>2];case\"float\":return W[a>>2];case\"double\":return X[a>>3];default:p(\"invalid type for getValue: \"+b);}return null}function d(a){for(var b,c=\"\";;){if(b=R[a++>>0],!b)return c;c+=String.fromCharCode(b)}}function e(a,b){return 0<a%b&&(a+=b-a%b),a}function f(a){P=a,A.HEAP8=Q=new Int8Array(a),A.HEAP16=S=new Int16Array(a),A.HEAP32=U=new Int32Array(a),A.HEAPU8=R=new Uint8Array(a),A.HEAPU16=T=new Uint16Array(a),A.HEAPU32=V=new Uint32Array(a),A.HEAPF32=W=new Float32Array(a),A.HEAPF64=X=new Float64Array(a)}function g(a){for(;0<a.length;){var b=a.shift();if(\"function\"==typeof b){b(A);continue}var c=b.func;\"number\"==typeof c?void 0===b.arg?A.dynCall_v(c):A.dynCall_vi(c,b.arg):c(void 0===b.arg?null:b.arg)}}function h(){if(A.preRun)for(\"function\"==typeof A.preRun&&(A.preRun=[A.preRun]);A.preRun.length;)l(A.preRun.shift());g(ba)}function i(){fa=!0,g(ca)}function j(){g(da)}function k(){if(A.postRun)for(\"function\"==typeof A.postRun&&(A.postRun=[A.postRun]);A.postRun.length;)m(A.postRun.shift());g(ea)}function l(a){ba.unshift(a)}function m(a){ea.unshift(a)}function n(){ka++,A.monitorRunDependencies&&A.monitorRunDependencies(ka)}function o(){if(ka--,A.monitorRunDependencies&&A.monitorRunDependencies(ka),0==ka&&(null!==la&&(clearInterval(la),la=null),ma)){var a=ma;ma=null,a()}}function p(a){throw A.onAbort&&A.onAbort(a),a+=\"\",K(a),L(a),Z=!0,$=1,a=\"abort(\"+a+\"). Build with -s ASSERTIONS=1 for more info.\",new WebAssembly.RuntimeError(a)}function q(a){return 0===a.indexOf(pa)}function r(a,b,c){R.copyWithin(a,b,b+c)}function s(){return R.length}function t(a){try{return O.grow(a-P.byteLength+65535>>>16),f(O.buffer),1}catch(a){}}function u(a){if(\"boolean\"==typeof I&&I){var b;try{b=Buffer.from(a,\"base64\")}catch(c){b=new Buffer(a,\"base64\")}return new Uint8Array(b.buffer,b.byteOffset,b.byteLength)}try{for(var c=qa(a),d=new Uint8Array(c.length),e=0;e<c.length;++e)d[e]=c.charCodeAt(e);return d}catch(a){throw new Error(\"Converting base64 string to bytes failed.\")}}function v(a){return q(a)?u(a.slice(37)):void 0}function w(a){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+a+\")\",this.status=a}function x(a){function b(){Ba||(Ba=!0,A.calledRun=!0,Z||(i(),j(),y(A),A.onRuntimeInitialized&&A.onRuntimeInitialized(),k()))}(a=a||D,!(0<ka))&&(h(),0<ka||(A.setStatus?(A.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){A.setStatus(\"\")},1),b()},1)):b()))}a=a||{};var y,z,A=\"undefined\"==typeof a?{}:a;A.ready=new Promise(function(a,b){y=a,z=b});var B,C={};for(B in A)A.hasOwnProperty(B)&&(C[B]=A[B]);var D=[],E=\"./this.program\",F=function(a,b){throw b},G=!1,H=!1,I=!1;G=\"object\"==typeof window,H=\"function\"==typeof importScripts,I=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var J;I?(1<process.argv.length&&(E=process.argv[1].replace(/\\\\/g,\"/\")),D=process.argv.slice(2),process.on(\"uncaughtException\",function(a){if(!(a instanceof w))throw a}),process.on(\"unhandledRejection\",p),F=function(a){process.exit(a)},A.inspect=function(){return\"[Emscripten Module object]\"}):(G||H)&&(J=function(a){document.title=a});var K=A.print||console.log.bind(console),L=A.printErr||console.warn.bind(console);for(B in C)C.hasOwnProperty(B)&&(A[B]=C[B]);C=null,A.arguments&&(D=A.arguments),A.thisProgram&&(E=A.thisProgram),A.quit&&(F=A.quit);var M;A.wasmBinary&&(M=A.wasmBinary);var N;A.noExitRuntime&&(N=A.noExitRuntime),\"object\"!=typeof WebAssembly&&p(\"no native wasm support detected\");var O,P,Q,R,S,T,U,V,W,X,Y=new WebAssembly.Table({initial:6,maximum:6,element:\"anyfunc\"}),Z=!1,$=0,_=65536,aa=A.INITIAL_MEMORY||20971520;O=A.wasmMemory?A.wasmMemory:new WebAssembly.Memory({initial:aa/_,maximum:2147483648/_}),O&&(P=O.buffer),aa=P.byteLength,f(P),U[6256>>2]=5249296;var ba=[],ca=[],da=[],ea=[],fa=!1,ga=Math.abs,ha=Math.ceil,ia=Math.floor,ja=Math.min,ka=0,la=null,ma=null;A.preloadedImages={},A.preloadedAudios={};var na,oa,pa=\"data:application/octet-stream;base64,\";ca.push({func:function(){ta()}});var qa=\"function\"==typeof atob?atob:function(a){var b,c,d,e,f,g,h,j=\"\",k=0;a=a.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");do e=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(k++)),f=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(k++)),g=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(k++)),h=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(k++)),b=e<<2|f>>4,c=(15&f)<<4|g>>2,d=(3&g)<<6|h,j+=String.fromCharCode(b),64!==g&&(j+=String.fromCharCode(c)),64!==h&&(j+=String.fromCharCode(d));while(k<a.length);return j},ra={a:r,b:function(a){a>>>=0;var b=s(),c=2147483648;if(a>c)return!1;for(var d,f=1;4>=f;f*=2){d=b*(1+.2/f),d=Math.min(d,a+100663296);var g=Math.min(c,e(Math.max(16777216,a,d),65536)),h=t(g);if(h)return!0}return!1},memory:O,table:Y},sa=function(){function a(a){var b=a.exports;A.asm=b,o(\"wasm-instantiate\")}var b={a:ra};if(n(\"wasm-instantiate\"),A.instantiateWasm)try{var c=A.instantiateWasm(b,a);return c}catch(a){return L(\"Module.instantiateWasm callback failed with error: \"+a),!1}return function(a){var c=v(\"data:application/octet-stream;base64,\");return WebAssembly.instantiate(c,b).then(a,function(a){L(\"failed to asynchronously prepare wasm: \"+a),p(a)})}(function(b){a(b.instance)}),{}}(),ta=A.___wasm_call_ctors=function(){return(ta=A.___wasm_call_ctors=A.asm.c).apply(null,arguments)},ua=A._speex_resampler_init=function(){return(ua=A._speex_resampler_init=A.asm.d).apply(null,arguments)},va=A._free=function(){return(va=A._free=A.asm.e).apply(null,arguments)},wa=A._speex_resampler_destroy=function(){return(wa=A._speex_resampler_destroy=A.asm.f).apply(null,arguments)},xa=A._speex_resampler_process_interleaved_int=function(){return(xa=A._speex_resampler_process_interleaved_int=A.asm.g).apply(null,arguments)},ya=A._speex_resampler_get_rate=function(){return(ya=A._speex_resampler_get_rate=A.asm.h).apply(null,arguments)},za=A._speex_resampler_strerror=function(){return(za=A._speex_resampler_strerror=A.asm.i).apply(null,arguments)},Aa=A._malloc=function(){return(Aa=A._malloc=A.asm.j).apply(null,arguments)};A.setValue=b,A.getValue=c,A.AsciiToString=d;var Ba;if(ma=function a(){Ba||x(),Ba||(ma=a)},A.run=x,A.preInit)for(\"function\"==typeof A.preInit&&(A.preInit=[A.preInit]);0<A.preInit.length;)A.preInit.pop()();return N=!0,x(),a.ready}}();\r\n\t}\r\n\tget SpeexResampler() {\r\n\t\treturn function(cc, is, os, q){return new SpeexResampler(cc, is, os, q);}\r\n\t}\r\n\t\r\n\tget emitterRms() {\r\n\t\tif (this.calculateRmsVolume){\r\n\t\t\tlet rms = Math.sqrt(this._emitterSqrSum / this._emitterSamples);\r\n\t\t\tthis._emitterSqrSum = 0;\r\n\t\t\tthis._emitterSamples = 0;\r\n\t\t\treturn rms;\r\n\t\t}else{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n  \r\n\tconstructor(options) {\r\n\t\tsuper();\r\n\t\t\r\n\t\tlet that = this;\r\n\t\tthis.moduleId = \"speex-resample-switch-\" + Math.round(Math.random() * 1000000) + \"-\" + Date.now();\r\n\t\tthis.doDebug = options.processorOptions.doDebug || false;\r\n\t\tthis.isReadyForProcessing = false;\r\n\t\tthis.EXPECTED_SAMPLE_SIZE = 128;\t//currently 128, but might change in future ... and even become variable! (I hope not)\r\n\r\n\t\tthis.sourceSamplerate = options.processorOptions.ctxInfo.sampleRate;\t//INFO: should be same as global scope 'sampleRate'\r\n\r\n\t\tthis.targetSampleRate = options.processorOptions.targetSampleRate || options.processorOptions.ctxInfo.targetSampleRate || 16000;\r\n\t\tthis.resampleQuality = (options.processorOptions.resampleQuality != undefined)? options.processorOptions.resampleQuality : 7;\t//number from 1 to 10, 1 is fast but of bad quality, 10 is slow but best quality (less noise/aliasing, a higher complexity and a higher latency)\r\n\t\tthis.emitterBufferSize = options.processorOptions.bufferSize || 512;\t//TODO: there is probably a mismatch (we should pull go back to the idea of making the buffer bigger but pull less)\r\n\t\tthis.channelCount = 1; //options.processorOptions.channels || 1;\t\t//TODO: supports ONLY MONO atm\r\n\t\tthis._bytesPerSample = 2;\t\t\t//for buffer (aka Xint8 Array) length is in bytes (8bit), so *2 to get 16bit length;\r\n\t\tthis.resampler;\r\n\t\t\r\n\t\tthis.passThroughMode = (options.processorOptions.passThroughMode != undefined)? options.processorOptions.passThroughMode : 1;\t//0: nothing, 1: original, 2: 16bit PCM\r\n\t\tthis.calculateRmsVolume = (options.processorOptions.calculateRmsVolume != undefined)? options.processorOptions.calculateRmsVolume : true;\r\n\t\tthis.gain = options.processorOptions.gain || 1.0;\r\n\t\t\t\t\r\n\t\t//resampling - modes 0: no change, -1: downsampling, 1: upsampling\r\n\t\tthis.resamplingMode = (this.targetSampleRate < this.sourceSamplerate? -1 : (this.targetSampleRate > this.sourceSamplerate? 1 : 0));\r\n\t\tthis.resampleRatio = this.targetSampleRate/this.sourceSamplerate;\r\n\t\t\r\n\t\tfunction init(){\r\n\t\t\tvar expectedSizeAfterResampling = Math.ceil(that.EXPECTED_SAMPLE_SIZE * that.resampleRatio);\r\n\t\t\tif (expectedSizeAfterResampling > that.emitterBufferSize){\r\n\t\t\t\t//TODO: if we don't use a string this shows up as \"Uncaught [object ...]\" in worker.onerror ?! :-/\r\n\t\t\t\tthrow {name: \"BufferSizeException\", message: (\"Output buffer has to be bigger than (resampleRatio*inputSampleSize)! Currently: \" + expectedSizeAfterResampling + \" > \" + that.emitterBufferSize)};\r\n\t\t\t}\r\n\t\t\tvar ringBufferSize = expectedSizeAfterResampling + that.emitterBufferSize;\t\t\t//this should be a safe size\r\n\t\t\t\r\n\t\t\t//RingBuffers - alloc. space for emitter\r\n\t\t\t//that._inputRingBuffer = new RingBuffer(that.collectorBufferSize + that.EXPECTED_SAMPLE_SIZE, that.channelCount);\r\n\t\t\tthat._outputRingBuffer = new RingBuffer(ringBufferSize, that.channelCount, \"Int16\");\r\n\r\n\t\t\t//Input and output (for each channel) - TODO: set size, one for each channel\r\n\t\t\t//that._newInputBuffer = [new Float32Array(that.collectorBufferSize)];\r\n\t\t\tthat._newInputBuffer = [new Int16Array(that.EXPECTED_SAMPLE_SIZE)];\t\t\r\n\t\t\t//TODO: for interleaved STEREO we need [new Uint8Array(that.EXPECTED_SAMPLE_SIZE * that.channelCount * that._bytesPerSample)];\r\n\t\t\t\t//... or do we?\r\n\t\t\t\t//NOTE: we could use DataView instead\r\n\t\t\t\t//let buffer = new ArrayBuffer(that.EXPECTED_SAMPLE_SIZE * that.channelCount * that._bytesPerSample);\r\n\t\t\t\t//let that._inputDataView = new DataView(buffer);\r\n\t\t\tthat._newOutputBuffer = [new Int16Array(that.emitterBufferSize)];\r\n\t\t\t\r\n\t\t\tthat._isFirstValidProcess = true;\r\n\t\t\t//that._lastEmit = 0;\r\n\t\t\t\r\n\t\t\tthat._emitterSqrSum = 0;\r\n\t\t\tthat._emitterSamples = 0;\r\n\t\t\tthat._hasGain = (that.gain < 1 || that.gain > 1);\r\n\t\t}\r\n\t\tinit();\r\n\t\t\r\n\t\tthis.floatTo16BitInterleavedPCM = function(inFloat32, outInt16, i){\r\n\t\t\t//TODO: if not MONO interleave channels - requires: UInt8Array !!! (or does it?)\r\n\t\t\t/*\r\n\t\t\tfor (let channel = 0; channel < that.channelCount; channel++){\r\n\t\t\t\t//pass through original\r\n\t\t\t\toutput[channel][i] = inFloat32[channel][i];\r\n\t\t\t\t//clip and floatTo16BitPCM\r\n\t\t\t\tlet sampleVal = Math.max(-1, Math.min(1, inFloat32[channel][i])) * 32767.5 - 0.5;\r\n\t\t\t\t//assign\r\n\t\t\t\tlet outputIndex = (i * that.channelCount + channel) * that._bytesPerSample;\r\n\t\t\t\tthat._newInputBuffer[channel][outputIndex] = sampleVal;\r\n\t\t\t\tthat._newInputBuffer[channel][outputIndex + 1] = sampleVal >> 8;\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t\t\r\n\t\t\tlet sampleVal = Math.max(-1, Math.min(1, inFloat32[0][i]));\t\t//we need -1 to 1 - If this is the first processor we could skip clipping\r\n\t\t\t//that._inputDataView.setInt16(i * 2, sampleVal < 0 ? sampleVal * 0x8000 : sampleVal * 0x7FFF, true);\t// 16-bit signed range is -32768 to 32767, littleEndian byte order.\r\n\t\t\toutInt16[0][i] = sampleVal < 0 ? sampleVal * 0x8000 : sampleVal * 0x7FFF;\r\n\t\t}\r\n\t\t\r\n\t\tfunction ready(skipResampler){\r\n\t\t\tif (!skipResampler){\r\n\t\t\t\t//use new resampler for every instance - it keeps data from previous calls to improve the resampling\r\n\t\t\t\tthat.resampler = that.SpeexResampler(\r\n\t\t\t\t\tthat.channelCount, that.sourceSamplerate, that.targetSampleRate, that.resampleQuality\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tthat.isReadyForProcessing = true;\r\n\t\t\tthat.port.postMessage({\r\n\t\t\t\tmoduleState: 1,\r\n\t\t\t\tmoduleInfo: {\r\n\t\t\t\t\tmoduleId: that.moduleId,\r\n\t\t\t\t\tsourceSamplerate: that.sourceSamplerate,\r\n\t\t\t\t\ttargetSampleRate: that.targetSampleRate,\r\n\t\t\t\t\temitterBufferSize: that.emitterBufferSize,\r\n\t\t\t\t\tcalculateRmsVolume: that.calculateRmsVolume,\r\n\t\t\t\t\tchannelCount: that.channelCount,\r\n\t\t\t\t\tresamplingMode: that.resamplingMode,\r\n\t\t\t\t\tgain: that.gain,\r\n\t\t\t\t\tpassThroughMode: that.passThroughMode\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t//start\r\n\t\tfunction start(options){\r\n\t\t\t//TODO: anything?\r\n\t\t\t//NOTE: timing of this signal is not very well defined\r\n\t\t}\r\n\t\t//stop\r\n\t\tfunction stop(options){\r\n\t\t\t//NOTE: timing of this signal is not very well defined\r\n\t\t\t//send out the remaining buffer data here\r\n\t\t\tif (that._outputRingBuffer.framesAvailable){\r\n\t\t\t\t//pull last samples\r\n\t\t\t\tvar lastSamples = [new Int16Array(that._outputRingBuffer.framesAvailable)];\r\n\t\t\t\tthat._outputRingBuffer.pull(lastSamples);\r\n\r\n\t\t\t\t//Send info\r\n\t\t\t\tthat.port.postMessage({\r\n\t\t\t\t\trms: that.emitterRms,\r\n\t\t\t\t\tsamples: lastSamples,\r\n\t\t\t\t\tsampleRate: that.targetSampleRate,\r\n\t\t\t\t\tchannels: that.channelCount,\r\n\t\t\t\t\ttype: lastSamples[0].constructor.name,\r\n\t\t\t\t\tisLast: true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\tfunction reset(options){\r\n\t\t\t//TODO: implement\r\n\t\t\tinit();\r\n\t\t}\r\n\t\tfunction release(options){\r\n\t\t\t//destroy\r\n\t\t\tthat._outputRingBuffer = null;\r\n\t\t\tthat._newInputBuffer = null;\r\n\t\t\tthat._newOutputBuffer = null;\r\n\t\t\tthat.resampler = null;\r\n\t\t\tspeexModule = null;\r\n\t\t\t//notify processor that we can terminate now\r\n\t\t\tthat.port.postMessage({\r\n\t\t\t\tmoduleState: 9\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t//on-request resampling\r\n\t\tfunction resampleRequest(req){\r\n\t\t\tvar samples = req.samples;\r\n\t\t\tvar int16Buffer;\r\n\t\t\tif (req.isInt16){\r\n\t\t\t\tint16Buffer = samples;\r\n\t\t\t}else{\r\n\t\t\t\tvar sampleSize = samples[0].length;\r\n\t\t\t\tint16Buffer = [new Int16Array(sampleSize)];\t\t//TODO: MONO\r\n\t\t\t\tfor (let i = 0; i < sampleSize; ++i){\r\n\t\t\t\t\tthat.floatTo16BitInterleavedPCM(samples, int16Buffer, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (that.resamplingMode){\r\n\t\t\t\tvar processed = that.resampler.processChunk(int16Buffer[0]);\r\n\t\t\t\tthat.port.postMessage({\r\n\t\t\t\t\tmoduleResponse: true,\r\n\t\t\t\t\tresampleResult: {\r\n\t\t\t\t\t\t//test: int16Buffer,\t\t//DEBUG\r\n\t\t\t\t\t\tsamples: [processed],\r\n\t\t\t\t\t\tsampleRate: that.targetSampleRate,\r\n\t\t\t\t\t\tchannels: that.channelCount\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}else{\r\n\t\t\t\tthat.port.postMessage({\r\n\t\t\t\t\terror: \"No resampling required. Skipped process!\",\r\n\t\t\t\t\tmoduleResponse: true,\r\n\t\t\t\t\tresampleResult: {}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//Control messages\r\n\t\tthis.port.onmessage = function(e){\r\n\t\t\tif (e.data.ctrl){\r\n\t\t\t\tif (that.doDebug) console.error(\"SpeexResampleSwitch - Controls\", e.data.ctrl);\t\t\t//DEBUG\r\n\t\t\t\tswitch (e.data.ctrl.action) {\r\n\t\t\t\t\t//common interface\r\n\t\t\t\t\tcase \"start\":\r\n\t\t\t\t\t\tstart(e.data.ctrl.options);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"stop\":\r\n\t\t\t\t\t\tstop(e.data.ctrl.options);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"reset\":\r\n\t\t\t\t\t\treset(e.data.ctrl.options);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"release\":\r\n\t\t\t\t\tcase \"close\":\r\n\t\t\t\t\t\trelease(e.data.ctrl.options);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"process\":\r\n\t\t\t\t\t\t//customProcess(e.data.ctrl.data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"handle\":\r\n\t\t\t\t\t\t//handleEvent(e.data.ctrl.data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.error(\"SpeexResampleSwitch - Unknown control message:\", e.data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}else if (e.data.resample){\r\n\t\t\t\t//custom interface\r\n\t\t\t\tresampleRequest(e.data.resample);\r\n\t\t\t}\r\n        }\r\n\t\t\r\n\t\tfunction onSpeexLog(msg){\r\n\t\t\tif (that.doDebug) console.error(\"SpeexResampleSwitch - SpeexModuleLog -\", msg, \"-\", that.moduleId);\t\t\t//DEBUG (use postMessage?)\r\n\t\t}\r\n\t\t//function onSpeexError(msg){}\t\t//TODO: we could wrap the 'resampler.processChunk' function in try-catch and log the error here\r\n\t\t\r\n\t\t//prepare\r\n\t\tif (this.resamplingMode){\r\n\t\t\tif (!speexModule){\r\n\t\t\t\tonSpeexLog(\"Init. Speex WASM module\");\r\n\t\t\t\tSpeexResampler.initPromise = this.Speex().then(function(s){\r\n\t\t\t\t\tonSpeexLog(\"Speex WASM module ready\");\r\n\t\t\t\t\tspeexModule = s;\t//NOTE: used inside Speex\r\n\t\t\t\t\tready(false);\r\n\t\t\t\t});\r\n\t\t\t}else{\r\n\t\t\t\tonSpeexLog(\"Speex WASM moduel already loaded\");\r\n\t\t\t\tready(false);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tonSpeexLog(\"Speex WASM module not needed\");\r\n\t\t\tready(true);\r\n\t\t}\r\n\t}\r\n\r\n\tprocess(inputs, outputs, parameters) {\r\n\t\tif (!this.isReadyForProcessing){\r\n\t\t\tconsole.error(\"SpeexResampleSwitch - Module wasn't ready for processing! Input was ignored!\", \"-\", this.moduleId);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//Use 1st input and output only\r\n\t\tlet input = inputs[0];\r\n\t\tlet output = outputs[0];\r\n\r\n\t\t//NOTE: AudioWorkletProcessor always gets input[0].length frames (typically 128, might change in future)\r\n\t\tif (input.length > 0){\r\n\t\t\tlet inputSampleSize = input[0].length;\r\n\t\t\t\r\n\t\t\tif (this._isFirstValidProcess){\r\n\t\t\t\tthis._isFirstValidProcess = false;\r\n\t\t\t\t//check inputSampleSize\r\n\t\t\t\tif (inputSampleSize != this.EXPECTED_SAMPLE_SIZE){\r\n\t\t\t\t\tlet msg = \"Sample size is: \" + inputSampleSize + \", expected: \" + this.EXPECTED_SAMPLE_SIZE + \". Need code adjustments!\";\r\n\t\t\t\t\tconsole.error(\"AudioWorkletProcessor sample size exception - Msg.: \" + msg);\r\n\t\t\t\t\tthrow new this.SampleSizeException(msg);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//transfer input to 16bit signed, interleaved (channels) PCM output - TODO: ONLY MONO so far!\r\n\t\t\tlet sqrSum = 0;\r\n\t\t\tfor (let i = 0; i < inputSampleSize; ++i){\r\n\t\t\t\t//gain\r\n\t\t\t\tif (this._hasGain) input[0][i] = input[0][i] * this.gain;\r\n\t\t\t\t\r\n\t\t\t\t//float to 16Bit interleaved PCM\r\n\t\t\t\tthis.floatTo16BitInterleavedPCM(input, this._newInputBuffer, i);\r\n\t\t\t\t\r\n\t\t\t\t//pass through\r\n\t\t\t\tif (this.passThroughMode == 2){\r\n\t\t\t\t\toutput[0][i] = this._newInputBuffer[0][i];\t//16Bit PCM\r\n\t\t\t\t}else if (this.passThroughMode == 1){\r\n\t\t\t\t\toutput[0][i] = input[0][i];\t\t\t\t\t//original (float32)\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//calc. sum for RMS\r\n\t\t\t\tif (this.calculateRmsVolume){\r\n\t\t\t\t\tthis._emitterSqrSum += (input[0][i] ** 2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._emitterSamples += inputSampleSize;\r\n\t\t\t\r\n\t\t\tif (this.resamplingMode != 0){\r\n\t\t\t\t//let interleaved16bitPcmAudioChunk = new Int16Array(this._inputDataView);\r\n\t\t\t\t//let processed = this.resampler.processChunk(interleaved16bitPcmAudioChunk);\r\n\t\t\t\tlet processed = this.resampler.processChunk(this._newInputBuffer[0]);\r\n\t\t\t\tthis._outputRingBuffer.push([processed]);\t\t\t\t//TODO: is MONO\r\n\t\t\t}else{\r\n\t\t\t\tthis._outputRingBuffer.push([this._newInputBuffer[0]]);\t//TODO: is MONO\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Process if we have enough frames for the kernel.\r\n\t\t\tif (this._outputRingBuffer.framesAvailable >= this.emitterBufferSize) {\r\n\t\t\t\t//pull samples\r\n\t\t\t\tthis._outputRingBuffer.pull(this._newOutputBuffer);\r\n\r\n\t\t\t\t//Send info\r\n\t\t\t\tthis.port.postMessage({\r\n\t\t\t\t\trms: this.emitterRms,\r\n\t\t\t\t\tsamples: this._newOutputBuffer,\r\n\t\t\t\t\tsampleRate: this.targetSampleRate,\r\n\t\t\t\t\tchannels: this.channelCount,\r\n\t\t\t\t\ttype: this._newOutputBuffer[0].constructor.name\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nregisterProcessor('speex-resample-switch', SpeexResampleProcessor);";

// These three imports are inlined by Rollup and loaded directly to avoid

if (!(typeof SepiaFW$1 == "object")){
	var SepiaFW$1 = {};
	window.SepiaFW = SepiaFW$1;
}
(function (parentModule){
	var WebAudio = parentModule.webAudio || {};
	WebAudio.version = "0.9.11";
	
	//Preparations
	var AudioContext = window.AudioContext || window.webkitAudioContext;
	var isMediaDevicesSupported = undefined;
	var isCordovaAudioinputSupported = undefined;

	function testStreamRecorderSupport(){
		isMediaDevicesSupported = (!!AudioContext && navigator.mediaDevices && navigator.mediaDevices.getUserMedia);
		//isCordovaAudioinputSupported = (window.cordova && window.audioinput);		//TODO: implement (import ... "./plugins/cordova-audio-input.js")
		return !!isMediaDevicesSupported || isCordovaAudioinputSupported;
	}
	
	WebAudio.isStreamRecorderSupported = testStreamRecorderSupport(); 		//set once at start
	WebAudio.isNativeStreamResamplingSupported = true; 	//will be tested on first media-stream creation
	WebAudio.tryNativeStreamResampling = true;			//overwrite to force-ignore native resampling
	WebAudio.contentFetchTimeout = 8000;	//used e.g. for WASM pre-loads etc.
	
	WebAudio.defaultProcessorOptions = {
		moduleFolder: "modules",
		initSuccessCallback: console.log,
		initErrorCallback: console.error,
		//modules: [],
		//onaudiostart: console.log,
		//onaudioend: console.log,		//NOTE: this only triggers if 'stop' is called not if stream ends etc. - compare: 'onEndCallback' of source
		//onrelease: console.log,
		onerror: console.error
		//debugLog: console.log
	};

	//Cache
	var preLoadCache = {};
	
	WebAudio.clearPreLoadCache = function(){
		preLoadCache = {};
	};

	//Media constraints
	WebAudio.getSupportedAudioConstraints = function(){
		var sc = navigator.mediaDevices.getSupportedConstraints();		//TODO: can fail due to non-SSL (secure context)
		var c = {}, owc = WebAudio.overwriteSupportedAudioConstraints;
		if (sc.deviceId) c.deviceId = (owc.deviceId != undefined)? owc.deviceId : undefined;
		if (sc.channelCount) c.channelCount = (owc.channelCount != undefined)? owc.channelCount : 1;
		if (sc.noiseSuppression) c.noiseSuppression = (owc.noiseSuppression != undefined)? owc.noiseSuppression : true;
		if (sc.autoGainControl) c.autoGainControl = (owc.autoGainControl != undefined)? owc.autoGainControl : false;
		if (sc.echoCancellation) c.echoCancellation = (owc.echoCancellation != undefined)? owc.echoCancellation : false;
		if (sc.sampleRate) c.sampleRate = (owc.sampleRate != undefined)? owc.sampleRate : 48000;
		//other options: latency: double, sampleSize: 16
		return c;
	};
	WebAudio.overwriteSupportedAudioConstraints = {};
	
	//Mime types
	WebAudio.defaultMimeTypesForCodecs = {
		ogg: "audio/ogg",
		ogg_opus: "audio/ogg;codecs=opus",
		ogg_vorbis: "audio/ogg;codecs=vorbis",
		ogg_speex: "audio/ogg;codecs=speex",
		opus: "audio/opus",
		vorbis: "audio/vorbis",
		speex: "audio/speex",
		wav: "audio/wav",
		raw: "audio/wav",
		webm_ogg_opus: "audio/webm;codecs=opus",
		webm_ogg_vorbis: "audio/webm;codecs=vorbis",
		webm_mkv_pcm: "audio/webm;codecs=pcm",		//this is kind of weird stuff ^^
		mp3: "audio/mpeg",
		mp4: "audio/mp4",
		flac: "audio/flac",
		mpeg: "audio/mpeg"
	};
	WebAudio.getSupportedMediaRecorderCodecs = function(){
		var codecs = {};
		if (window.MediaRecorder){
			Object.keys(WebAudio.defaultMimeTypesForCodecs).forEach(function(codec){
				var mimeType = WebAudio.defaultMimeTypesForCodecs[codec];
				if (window.MediaRecorder.isTypeSupported(mimeType)){
					codecs[codec] = mimeType;
				}
			});
		}
		return codecs;
	};
	
	//AudioContext creator
	WebAudio.createAudioContext = function(options, ignoreOptions){
		var contextOptions = {};
		if (!ignoreOptions && options.targetSampleRate){
			//NOTE: currently (Dec 2020) only Chromium can do this:
			contextOptions.sampleRate = options.targetSampleRate;
		}
		var ac = new AudioContext(contextOptions);
		//TODO: on some freaky circumstances ac.state can be faulty as seen in iOS (shows 'suspended' but await ac.suspend() never resolves)
		//console.log("AC STATE: " + ac.state);		//TODO: this can be suspended if the website is restrict and the user didn't interact with it yet
		return ac;
	};
	
	//Processor class
	
	WebAudio.Processor = function(options, initSuccessCallback, initErrorCallback){
		var thisProcessor = this;
		if (!initErrorCallback) initErrorCallback = WebAudio.defaultProcessorOptions.initErrorCallback;
		if (!initSuccessCallback) initSuccessCallback = WebAudio.defaultProcessorOptions.initSuccessCallback;
		if (!options) options = {};
		//TODO: add mic sinkId option
		
		var onProcessorError = options.onerror || WebAudio.defaultProcessorOptions.onerror;
		var moduleFolder = (options.moduleFolder || WebAudio.defaultProcessorOptions.moduleFolder).replace(/\/$/, "") + "/";
		
		var inputSampleRate;
		var sampleRateMismatch = 0;
		
		var mainAudioContext;
		var startFun;
		var stopFun;
		var releaseFun;
		var isProcessing = false;
		
		//Internal functions
		
		var isInitialized = false;
		var isInitPending = false;
		var initTimeout = options.initializerTimeout || 3000;
		var initTimeoutTimer;
		var initConditions = {};
		var sourceInitInfo = {};
		var modulesInitInfo = [];
		function addInitCondition(tag){
			if (options.debugLog) options.debugLog("Started init. condition: " + tag);
			initConditions[tag] = 1;
		}
		function completeInitCondition(tag){
			if (initConditions[tag]){
				delete initConditions[tag];
				if (options.debugLog) options.debugLog("Completed init. condition: " + tag);
				if (Object.keys(initConditions).length == 0){
					if (!isInitialized){
						clearTimeout(initTimeoutTimer);
						isInitialized = true;
						isInitPending = false;
						initSuccessCallback({
							name: "ProcessorReady", 
							message: "Processor is ready for action",
							inputSampleRate: inputSampleRate, 
							targetSampleRate: (options.targetSampleRate || inputSampleRate),
							sourceInfo: sourceInitInfo,
							modulesInfo: modulesInitInfo
						});
					}
				}
			}
		}
		function resetInitializer(){
			clearTimeout(initTimeoutTimer);
			isInitialized = false;
			isInitPending = false;
			//Define some conditions in advance
			initConditions = {};
			addInitCondition("sourceSetup");
			addInitCondition("modulesSetup");
		}
		function initializerError(err){
			//TODO: trigger 'thisProcessor.release' ?
			resetInitializer();
			initErrorCallback(err);
		}
		resetInitializer();		//make sure we start clean
		isInitPending = true;
		initTimeoutTimer = setTimeout(function(){
			initializerError({message: "Initialization took too long! If you expect long running init. process use option 'initializerTimeout' (ms).", name: "ProcessorInitTimeout"});
		}, initTimeout);
		
		async function createOrUpdateAudioContext(forceNew, ignoreOptions){
			if (mainAudioContext && forceNew){
				if (mainAudioContext.state != "closed"){
					await mainAudioContext.close();
				}
				mainAudioContext = null;
			}
			if (!mainAudioContext || mainAudioContext.state == "closed"){
				//TODO: clean up old context and sources?
				mainAudioContext = WebAudio.createAudioContext(options, ignoreOptions);
				if (options.startSuspended == undefined || options.startSuspended){
					try { await mainAudioContext.resume(); } catch(error){}					await mainAudioContext.suspend();
				}else {
					await mainAudioContext.resume();
				}
			}
			return mainAudioContext;
		}
		async function createModules(){
			if (!options.modules){
				return;
			}
			for (let i=0; i<options.modules.length; i++){
				let module = options.modules[i];
				let info = getModuleInfo(module);
				let moduleType = info.moduleType;	//1: AudioWorklet, 2: Web Worker, 3: Script Processor (legacy), 4: Audio Node (legacy)
				let moduleName = info.moduleName;
				if (moduleType == 1){
					//TODO: add option "pathUrl"?
					let modulePath = moduleFolder + moduleName + ".js";
					if (options.debugLog) options.debugLog("Adding audioWorklet module: " + modulePath);
					try {
						// HACK: Directly add the audio worklet module, inlined, with a data URL.
						// This is supposed to be a generic loading function but I only need this one module
						await mainAudioContext.audioWorklet.addModule(`data:application/javascript;charset=utf8,${encodeURIComponent(SpeexResampleSwitch)}`);
					}catch(e){
						console.error(e);
						if (options.debugLog) options.debugLog("FAILED to add audioWorklet module: " + modulePath + " - Msg.: " + e.name + ", " + e.message);
					}
				}else if (moduleType == 2){
					let modulePath = moduleFolder + moduleName.replace(/-worker$/, "") + '-worker.js';
					if (options.debugLog) options.debugLog("Adding worker module: " + modulePath);
					
				}else if (moduleType == 3){
					//TODO: ...
					throw {name: "CreateModuleError", message: "ScriptProcessor nodes are currently not supported as modules (only source)."};
				
				}else if (moduleType == 4){
					//TODO: ...
					throw {name: "CreateModuleError", message: "AudioNodes are currently not supported as modules (you can use them as custom source)."};
				
				}else {
					throw {name: "CreateModuleError", message: "Module type unknown."};
				}
			}
		}
		function getModuleInfo(module){
			//supports "string" (name) or "object" with options
			var moduleType, moduleName, moduleSetup, modulePreLoads;
			if (typeof module == "object"){
				//1: AudioWorklet, 2: Web Worker, 3: Script Processor (legacy), 4: Audio Node (legacy)
				if ((module.type && module.type == "worker") || module.isWorker){
					moduleType = 2;
				}else if (module.type && module.type == "scriptProcessor"){
					moduleType = 3;
				}else if (module.type && module.type == "audioNode"){
					moduleType = 4;
				}else {
					moduleType = 1;
				}
				moduleName = module.name;
				moduleSetup = module.setup || module.settings;
				modulePreLoads = module.preLoad || {};
			}else {
				moduleType = 1;
				moduleName = module;
				moduleSetup = {};
				modulePreLoads = {};
			}
			return {moduleType: moduleType, moduleName: moduleName, moduleSetup: moduleSetup, modulePreLoads: modulePreLoads};
		}
		
		//States
		
		function setStateProcessing(){
			isProcessing = true;
		}
		function setStateProcessingStop(){
			isProcessing = false;
		}
		//function setStateProcessorReleased(){} //already handled in 'resetInitializer'
			
		//Supported?
		if (!WebAudio.isStreamRecorderSupported && !options.customSourceTest && !options.customSource){
			var err = {name: "NotSupportedError", message: "Cannot create audio stream recorder because there are no compatible interfaces!"};
			initializerError(err);
			return;
		}
		
		//Add audio worklets
		function addModules(processNodes, sourceHasWorkletSupport, completeCallback){
			var startIndex = processNodes.length;
			if (options.modules && options.modules.length){
				var initInfo = new Array(options.modules.length);
				var N = options.modules.length;
				options.modules.forEach(async function(module, i){
					if (!isInitPending){
						//already failed so ignore rest
						return;
					}
					addInitCondition("module-" + i);
					
					var info = getModuleInfo(module);
					var moduleType = info.moduleType;	//1: AudioWorklet, 2: Web Worker, 3: Script Processor (legacy), 4: Audio Node (legacy)
					var moduleName = info.moduleName;
					var moduleSetup = info.moduleSetup;
					
					//pre-loads - NOTE: there might be room for optimizations here ... - TODO: can/should we cache preloads globally?
					var preLoads = {};
					var preLoadKeys = Object.keys(info.modulePreLoads);
					try{
						await Promise.all(preLoadKeys.map(async function(plKey, j){
							var plPath = info.modulePreLoads[plKey];	//NOTE: this can be a string or an object ({type: 2, path: 'url'})
							var plType = 1;		//1: text, 2: arraybuffer
							var convert = undefined;
							if (typeof plPath == "object"){
								plType = (plPath.type && (plPath.type == 2 || plPath.type.toLowerCase() == "arraybuffer"))? 2 : 1;
								plPath = plPath.path || plPath.url;
							}else if (plKey.indexOf("wasmFile") == 0){
								plType = 2;
							}else if (plKey.indexOf("wasmBase64") == 0){
								plType = 1;
								convert = convertBase64ToUint8Array;
							}
							var cachePath = plKey + "_" + plPath;
							if (preLoadCache[cachePath]){
								preLoads[plKey] = preLoadCache[cachePath];
							}else {
								try{
									var data;
									if (!plPath || plType > 2){
										throw {name: "PreLoadError", message: "Missing 'path' (url) or unsupported type (use 1=text or 2=arraybuffer)"};
									}else if (plType == 1){
										data = await textLoaderPromise(plPath);
									}else if (plType == 2){
										data = await arrayBufferLoaderPromise(plPath);
									}
									if (typeof convert == "function"){
										data = convert(data);
									}
									preLoads[plKey] = data;
									preLoadCache[cachePath] = data;
								}catch (err){
									throw {name: "AddModuleError", message: ("Failed to pre-load data: " + plKey + " - name: " + moduleName), info: err};
								}
							}
						}));
					}catch (err){
						initializerError(err);
						return;
					}
					//add some context info
					var fullOptions =  moduleSetup.options || {};
					fullOptions.preLoadResults = preLoads;
					
					var thisProcessNode;

					function onMessage(event){
						if (!event || event.data == undefined);else if (event.data.moduleState == 1){
							//STATE: READY
							thisProcessNode.isReady = true;
							completeInitCondition("module-" + i);
							if (event.data.moduleInfo) thisProcessNode.moduleInfo = event.data.moduleInfo;
							initInfo[i] = {
								moduleName: thisProcessNode.moduleName,
								moduleInfo: thisProcessNode.moduleInfo
							};
							if (--N == 0){
								completeCallback(initInfo);
							}
						}else if (event.data.moduleState == 9 && !thisProcessNode.isTerminated){
							//STATE: READY TO BE TERMINATED
							if (typeof thisProcessNode.terminate == "function"){
								try {
									thisProcessNode.isTerminated = true;
									thisProcessNode.terminate();	
								}catch (err){
									thisProcessNode.isTerminated = true;	//we need this to prevent follow up errors
									onError({name: "TerminateError", message: "Failed to terminate module", info: err});
								}
							}
						}else if (event.data.moduleState == 10){
							//STATE: CUSTOM INIT. ERROR
							event.data.error.target = event.target;
							onError(event.data.error);
							
						}else if (event.data.moduleResponse);else if (moduleSetup.sendToModules){		//TODO: when do we best clean-up 'sendToModules' to avoid empty loops (processNodes[n] = null)?
							//data for processing or custom event?
							if (event.data.moduleEvent){
								//EVENT
								moduleSetup.sendToModules.forEach(function(n){
									if (processNodes[n] && !processNodes[n].ignoreSendToModules) processNodes[n].sendToModule({ctrl: {action: "handle", data: event.data}});
								});
							}else {
								//PROCESS (default)
								moduleSetup.sendToModules.forEach(function(n){
									if (processNodes[n] && !processNodes[n].ignoreSendToModules) processNodes[n].sendToModule({ctrl: {action: "process", data: event.data}});
								});
							}
						}
						if (moduleSetup.onmessage){
							moduleSetup.onmessage(event.data, processNodes);
						}
					}
					function onError(err){
						//TODO: do something with 'completeInitCondition("module-" + i)' or abort whole processor?
						var errorMessage;
						if (err.message && err.message.indexOf("Uncaught {") == 0){
							err.preventDefault();
							errorMessage = JSON.parse(err.message.replace(/^Uncaught /, ""));
							err.message = errorMessage;
						}else {
							errorMessage = err;
						}
						onProcessorError({
							name: "AudioModuleProcessorException",
							message: ("Error in module: " + err.target.moduleName + " - " + (errorMessage && errorMessage.message? errorMessage.message : "Check console for details.")),
							module: err.target.moduleName,
							info: errorMessage
						});
						if (isInitPending && !isInitialized){
							//completeInitCondition("module-" + i);
							initializerError({message: "Error during setup of module: " + thisProcessNode.moduleName, name: "ProcessorInitError", info: errorMessage});
						}
						if (moduleSetup.onerror){
							moduleSetup.onerror(err);
						}
					}

					//AudioWorkletProcessor
					if (moduleType == 1){
						if (!sourceHasWorkletSupport){
							initializerError({name: "AddModuleError", message: ("Source does not support 'AudioWorkletProcessor' (use only workers instead) - name: " + moduleName)});
							return;
						}
						if (!fullOptions.processorOptions) fullOptions.processorOptions = fullOptions.setup || {};	//common field is "setup"
						if (!fullOptions.processorOptions.ctxInfo){
							fullOptions.processorOptions.ctxInfo = {
								sampleRate: mainAudioContext.sampleRate,
								targetSampleRate: options.targetSampleRate
							};
						}
						thisProcessNode = new AudioWorkletNode(mainAudioContext, moduleName, fullOptions);
						thisProcessNode.isReady = false;
						thisProcessNode.moduleName = moduleName;
						thisProcessNode.port.onmessage = onMessage;
						thisProcessNode.onprocessorerror = onError;
						thisProcessNode.sendToModule = function(msg){ 
							if (!thisProcessNode.isReady){
								onProcessorError({
									name: "AudioModuleProcessorException",
									message: "'sendToModule' was called before module was actually ready. Consider 'startSuspended' option maybe.'",
									module: thisProcessNode.moduleName
								});
							}else {
								thisProcessNode.port.postMessage(msg);
							}
						};
					
					//Web Worker
					}else if (moduleType == 2){
						if (!fullOptions.setup) fullOptions.setup = {};
						if (!fullOptions.setup.ctxInfo){
							fullOptions.setup.ctxInfo = {
								sampleRate: mainAudioContext.sampleRate,
								targetSampleRate: options.targetSampleRate
							};
						}
						// HACK: Instead of loading dynamically by file name, load our two specific workers that we need
						// thisProcessNode = new Worker(moduleFolder + moduleName.replace(/-worker$/, "") + '-worker.js'); 	//NOTE: a worker has to be named "-worker.js"!
						if (moduleName.includes('webrtc-vad')) {
							thisProcessNode = WorkerFactory$1();
						} else if (moduleName.includes('stt-socket')) {
							thisProcessNode = WorkerFactory();
						}
						thisProcessNode.isReady = false;
						thisProcessNode.moduleName = moduleName;
						thisProcessNode.onmessage = onMessage;
						thisProcessNode.onerror = onError;
						thisProcessNode.sendToModule = function(msg){ 
							if (!thisProcessNode.isReady){
								if (msg && msg.ctrl && msg.ctrl.action == "construct") thisProcessNode.postMessage(msg); 	//TODO: consider transerf option: (msg, [transfer]);
								else onProcessorError({
									name: "AudioModuleProcessorException",
									message: "'sendToModule' was called before module was actually ready. Consider 'startSuspended' option maybe.",
									module: thisProcessNode.moduleName
								});
							}else {
								thisProcessNode.postMessage(msg);
							}
						};
						thisProcessNode.sendToModule({ctrl: {action: "construct", options: fullOptions}});
					
					//Script Processor
					}else if (moduleType == 3){
						initializerError({name: "AddModuleError", message: "ScriptProcessor nodes are currently not supported as modules (only source)."});
						return;
					
					//Audio Node
					}else if (moduleType == 4){
						initializerError({name: "AddModuleError", message: "AudioNodes are currently not supported as modules (you can use them as custom source)."});
						return;
					
					}else {
						initializerError({name: "AddModuleError", message: "Unknown module type."});
						return;
					}
					thisProcessNode.moduleType = moduleType;
					thisProcessNode.ignoreSendToModules = false;	//this is most useful for workers to prevent serialization if message is not processed anyway
					thisProcessNode.deactivate = function(){
						thisProcessNode.ignoreSendToModules = true;		//prevent all other modules to send messages to this one
						if (isProcessing){
							//stop and reset if processor is running
							thisProcessNode.sendToModule({ctrl: {action: "stop"}});
							thisProcessNode.sendToModule({ctrl: {action: "reset"}});
						}
					};
					thisProcessNode.activate = function(){
						thisProcessNode.ignoreSendToModules = false;
						if (isProcessing){
							//start if processor is already running
							thisProcessNode.sendToModule({ctrl: {action: "start"}});
						}
					};
					module.handle = thisProcessNode;
					
					//adapt module to first non-worklet source?
					if (!sourceHasWorkletSupport && i == 0){
						var source = processNodes[0];
						if (!source.onmessage){
							initializerError({name: "AddModuleError", message: "If source is not compatible to 'AudioWorklet' it has to have a 'onmessage' event to get the processed data."});
							return;
						}
						source.onmessage = function(e){
							//like 'sendToModules' this can be event or data for processing
							if (!e || e.data == undefined);else if (e.data.moduleEvent || e.data.sourceEvent){
								//EVENT
								thisProcessNode.sendToModule({ctrl: {action: "handle", data: e.data}});
							}else {
								//PROCESS (default)
								thisProcessNode.sendToModule({ctrl: {action: "process", data: e.data}});
							}
						};
					}

					processNodes[startIndex + i] = thisProcessNode;
				});
			}else {
				completeCallback([]);
			}
		}			

		//AUDIO SOURCE HANDLER
		
		function sourceHandler(source, controls, metaInfo){
			inputSampleRate = mainAudioContext.sampleRate;
			if (!metaInfo) metaInfo = {};
			if (options.targetSampleRate && options.targetSampleRate != inputSampleRate){
				WebAudio.isNativeStreamResamplingSupported = false;
				sampleRateMismatch = inputSampleRate - options.targetSampleRate;
			}
									
			//Primary node
			var processNodes = [source];	//TODO: handle this for workers as well
			var audioWorkletNodes = [];		//all worklets will be connected in row
			
			//check 'metaInfo.type' and 'metaInfo.hasWorkletSupport'
			var sourceHasWorkletSupport = true;
			if (metaInfo.hasWorkletSupport != undefined){
				sourceHasWorkletSupport = metaInfo.hasWorkletSupport;
			}else if (metaInfo.type == "scriptProcessor"){
				sourceHasWorkletSupport = false;
			}
			//TODO: use sourceHasWorkletSupport
			
			//Connect other modules (nodes/workers)?
			addModules(processNodes, sourceHasWorkletSupport, function(info){
				//complete the rest:
				modulesInitInfo = info;
				completeInitCondition("modulesSetup");
				thisProcessor.processNodes = processNodes;
				
				let hasResampler = false;
				processNodes.forEach(function(node, i){
					if (sourceHasWorkletSupport && (!node.moduleType || node.moduleType == 1)){
						audioWorkletNodes.push(node);
					}
					if (node.moduleInfo && node.moduleInfo["resamplingMode"]) hasResampler = true;
				});

				if (sampleRateMismatch && !hasResampler){
					initializerError({message: "Samplerate mismatch and no resampler found!", name: "ProcessorInitError"});
					return;
				}
			});
			
			//Destination node?
			var destinationNode = options.destinationNode || mainAudioContext.destination;
			
			//source info
			thisProcessor.mainAudioContext = mainAudioContext;
			thisProcessor.source = source;
			thisProcessor.sourceInfo = metaInfo;
			sourceInitInfo = metaInfo;
			
			//controls
			if (!controls) controls = {};	//e.g.: onBeforeStart, onAfterStart, onBeforeStop, onAfterStop, onBeforeRelease, onAfterRelease
			
			//START
			startFun = function(startCallback, errorCallback){
				Promise.resolve((controls.onBeforeStart || noop)())
				.then(function(){
					return mainAudioContext.resume();
				})
				.then(function(){
					//connect worklets
					if (audioWorkletNodes.length > 1){
						for (var i=1; i<audioWorkletNodes.length; i++){
							audioWorkletNodes[i-1].connect(audioWorkletNodes[i]);
						}
						audioWorkletNodes[i-1].connect(destinationNode);
					}else if (audioWorkletNodes.length == 1){
						audioWorkletNodes[0].connect(destinationNode);		//TODO: what if there is no workletNode ...
					}else if (processNodes[0].connect){
						processNodes[0].connect(destinationNode);			//TODO: ... is this ok?
					}
					//signal
					processNodes.forEach(function(node){
						if (node.sendToModule) node.sendToModule({ctrl: {action: "start", options: {}}});	//TODO: add options from moduleOptions?
					});
					if (controls.onAfterStart){
						return Promise.resolve(controls.onAfterStart());
					}
				})
				.then(startCallback)
				.catch(function(err){
					onProcessorError({name: "ProcessorStartError", message: (err.name + " - Message: " + (err.message || err))});
					if (errorCallback) errorCallback(err);
				});
			};
			//STOP
			stopFun = function(stopCallback, errorCallback){
				Promise.resolve((controls.onBeforeStop || noop)())
				.then(function(){
					//disconnect and signal
					processNodes.forEach(function(node, i){
						//if (!node.moduleType || node.moduleType == 1) node.disconnect();		//TODO: should we do this check?
						if (node.disconnect) node.disconnect();
						if (node.sendToModule) node.sendToModule({ctrl: {action: "stop", options: {}}});	//TODO: add options from moduleOptions?
					});
					return mainAudioContext.suspend();
				})
				.then(function(){
					if (controls.onAfterStop){
						return Promise.resolve(controls.onAfterStop());
					}
				})
				.then(stopCallback)
				.catch(function(err){
					onProcessorError({name: "ProcessorStopError", message: (err.name + " - Message: " + (err.message || err))});
					if (errorCallback) errorCallback(err);
				});
			};
			//RELEASE
			releaseFun = function(releaseCallback, errorCallback){
				Promise.resolve((controls.onBeforeRelease || noop)())
				.then(function(){
					//signal
					processNodes.forEach(function(node, i){
						if (node.sendToModule) node.sendToModule({ctrl: {action: "release", options: {}}});		//TODO: add options from moduleOptions?
						processNodes[i] = null;
						//TODO: wait for result, confirm?
					});
					thisProcessor.processNodes = null;
					thisProcessor.source = null;
					//TODO: check state before calling close?
					return mainAudioContext.close();
				})
				.then(function(){
					if (controls.onAfterRelease){
						return Promise.resolve(controls.onAfterRelease());
					}
				})
				.then(releaseCallback)
				.catch(function(err){
					onProcessorError({name: "ProcessorReleaseError", message: (err.name + " - Message: " + (err.message || err))});
					if (errorCallback) errorCallback(err);
				});
			};
			
			completeInitCondition("sourceSetup");
		}
		
		//SOURCE(S)
		
		//Custom source test
		if (options.customSourceTest){
			//NOTE: This is just for testing!
			let thisProcessNode;
			WebAudio.createWhiteNoiseGeneratorNode(0.1, {
				targetSampleRate: options.targetSampleRate
			})
			.then(function(processNode){
				//Audio context and source node
				thisProcessNode = processNode;
				mainAudioContext = processNode.context;
				return createModules();
				
			}).then(function(){
				//continue with source handler
				sourceHandler(thisProcessNode, {}, {
					type: "whiteNoiseGenerator"		//TODO: add more?
				});
				
			}).catch(function(err){
				initializerError(err);
				return;
			});
			
		//Custom source node
		}else if (options.customSource){
			//Get audio context and source node then add modules
			let thisProcessNode = options.customSource.node;
			mainAudioContext = thisProcessNode.context;
			createModules().then(function(){
				//continue with source handler
				sourceHandler(thisProcessNode, {
					onBeforeStart: options.customSource.beforeStart,
					onAfterStart: options.customSource.start || options.customSource.afterStart,
					onBeforeStop: options.customSource.stop || options.customSource.beforeStop,
					onAfterStop: options.customSource.afterStop,
					onBeforeRelease: options.customSource.beforeRelease,
					onAfterRelease: options.customSource.release || options.customSource.afterRelease
				},{
					type: (options.customSource.type || "custom"),		//TODO: add more?
					typeData: options.customSource.typeData,
					hasWorkletSupport: (options.customSource.hasWorkletSupport != undefined)? 
						options.customSource.hasWorkletSupport : true
				});
				
			}).catch(function(err){
				initializerError(err);
				return;
			});
			
		//Cordova Audioinput plugin
		//}else if (isCordovaAudioinputSupported){
			//TODO: implement?
		
		//Official MediaDevices interface using microphone
		}else {
			let micRes;
			WebAudio.getMicrophone(options, createOrUpdateAudioContext).then(function(res){
				//add modules (mainAudioContext is already set)
				micRes = res;
				return createModules();
				
			}).then(function(){
				//continue with source handler
				sourceHandler(micRes.source, micRes.controls || {}, micRes.info);
				
			}).catch(function(err){
				if (typeof err == "string"){
					initializerError({message: err, name: "ProcessorInitError"});
				}else {
					initializerError({message: err.message, name: err.name, ref: err});	//should be err.name = "NotAllowedError", "NotFoundError", "TimeoutError"
				}
				return;
			});
		}
		
		//INTERFACE
		
		thisProcessor.start = function(startCallback, noopCallback, errorCallback){		
			//NOTE: callback management is a bit tricky here - most of the time you should use the common processor callbacks ...
			//... but in some situations you need a more direct feedback. Error here might not call all async. module errors though.
			if (isInitialized && !isProcessing){
				startFun(function(){
					var startTime = new Date().getTime();	//TODO: is this maybe already too late?
					setStateProcessing();
					if (options.onaudiostart) options.onaudiostart({
						startTime: startTime
					});
					if (startCallback) startCallback();
				}, errorCallback);
			}else {
				if (noopCallback) noopCallback();
			}
		};
		
		thisProcessor.stop = function(stopCallback, noopCallback, errorCallback){
			//NOTE: see notes above about callbacks
			if (isProcessing){
				stopFun(function(){
					var endTime = new Date().getTime();		//TODO: is this maybe already too late?
					setStateProcessingStop();
					if (options.onaudioend) options.onaudioend({
						endTime: endTime
					});
					if (stopCallback) stopCallback();
				}, errorCallback);
			}else {
				if (noopCallback) noopCallback();
			}
		};
		
		thisProcessor.release = function(releaseCallback, noopCallback, errorCallback){
			//NOTE: see notes above about callbacks
			if (isInitialized && releaseFun){
				releaseFun(function(){
					resetInitializer();
					if (options.onrelease) options.onrelease();
					if (releaseCallback) releaseCallback();
				}, errorCallback);
			}else if (isInitPending){
				initializerError({message: "Release was called before initialization was complete.", name: "ProcessorInitError"});
			}else {
				if (noopCallback) noopCallback();
			}
		};

		thisProcessor.isInitialized = function(){
			return isInitialized;
		};
		thisProcessor.isInitPending = function(){
			return isInitPending;
		};
		thisProcessor.isProcessing = function(){
			return isProcessing;
		};
	};
	
	//Get audio devices (in and out)
	WebAudio.getAudioDevices = function(timeout){
		return new Promise(function(resolve, reject){
			(async function(){
				if (!navigator.mediaDevices.enumerateDevices){
					return reject({message: "MediaDevices 'enumerateDevices' is not available! Check if context is secure (SSL, HTTPS, etc.).", name: "NotSupportedError"});
				}
				//List media devices - NOTE: if the user does not answer the permission request this will never resolve ... so we fake a timeout
				var didTimeout = false;
				var timeoutTimer = undefined;
				navigator.mediaDevices.enumerateDevices().then(function(devices){
					if (didTimeout)	return;	//NOT reject
					else clearTimeout(timeoutTimer);
					//look for audio in/out
					var audioIn = {};
					var audioOut = {};
					devices.forEach(function(device){
						//console.log(device.kind + ": " + device.label + " id = " + device.deviceId);
						if (device.kind == "audioinput"){
							audioIn[device.label] = device.deviceId;
						}else if (device.kind == "audiooutput"){
							audioOut[device.label] = device.deviceId;
						}
					});
					return resolve({input: audioIn, output: audioOut});
					
				}).catch(function(err) {
					return reject(err);
				});
				timeoutTimer = setTimeout(function(){
					didTimeout = true;
					return reject({message: "Media device enumeration timeout. Permission might require user interaction.", name: "TimeoutError"});
				}, timeout || 5000);
			})();
		});
	};
	
	//Get microphone via MediaDevices interface
	WebAudio.getMicrophone = function(options, asyncCreateOrUpdateAudioContext, timeout){
		if (!options) options = {};		//e.g.: 'targetSampleRate'
		if (!asyncCreateOrUpdateAudioContext){
			asyncCreateOrUpdateAudioContext = async function(forceNew, ignoreOptions){
				var audioContext = WebAudio.createAudioContext(options, ignoreOptions);
				if (options.startSuspended == undefined || options.startSuspended){
					try { await audioContext.resume(); } catch (error){}					await audioContext.suspend();
				}else {
					await audioContext.resume();
				}
				return audioContext;
			};
		}
		return new Promise(function(resolve, reject){
			(async function(){
				var constraints = JSON.parse(JSON.stringify(WebAudio.getSupportedAudioConstraints()));
				//TODO: make microphone constraints accessible via options
				if (constraints.sampleRate && options.targetSampleRate) constraints.sampleRate = options.targetSampleRate;
				//other options: latency: double, sampleSize: 16
				var audioVideoConstraints = { 
					video : false, audio: (Object.keys(constraints).length? constraints : true)
				};
				//'getUserMedia' can be empty in unsecure context!
				if (!navigator.mediaDevices.getUserMedia){
					return reject({message: "MediaDevices 'getUserMedia' is not available! Check if context is secure (SSL, HTTPS, etc.).", name: "NotSupportedError"});
				}
				//NOTE: if the user does not answer the permission request this will never resolve ... so we fake a timeout
				var didTimeout = false;
				var timeoutTimer = undefined;
				navigator.mediaDevices.getUserMedia(audioVideoConstraints).then(async function(stream){
					if (didTimeout)	return;	//NOT reject
					else clearTimeout(timeoutTimer);
					
					//Audio context and source node
					var audioContext;
					if (WebAudio.tryNativeStreamResampling && WebAudio.isNativeStreamResamplingSupported){
						audioContext = await asyncCreateOrUpdateAudioContext(false, false);		//Try native resampling first
					}else {
						audioContext = await asyncCreateOrUpdateAudioContext(false, true);
					}
					
					var source;
					try {
						source = audioContext.createMediaStreamSource(stream);
					}catch(e){
						audioContext = await asyncCreateOrUpdateAudioContext(true, true);
						source = audioContext.createMediaStreamSource(stream);
						if (e && e.name && e.name == "NotSupportedError"){
							WebAudio.isNativeStreamResamplingSupported = false;
							if (options.debugLog) options.debugLog("Native stream resampling has been deactivated - Info: " + e.message);
						}
					}
					
					if (!options.destinationNode){
						options.destinationNode = audioContext.createMediaStreamDestination();
					}
					
					var info = { type: "mic" };
					var track0;
					if (source.mediaStream && source.mediaStream.getAudioTracks){
						try {
							track0 = source.mediaStream.getAudioTracks()[0];
							info.label = track0.label;
							if (track0.getSettings) info.settings = track0.getSettings();
							else info.settings = {};
							info.settings.sampleRate = audioContext.sampleRate;
						}catch(e){}					}

					var controlEvents = {
						//onBeforeStart, onAfterStart, onBeforeStop, onAfterStop, onBeforeRelease, onAfterRelease
						onBeforeStart: function(){},
						onAfterStop: function(){},
						onAfterRelease: function(){
							//release mic resources
							if (track0 && typeof track0.stop == "function" && track0.readyState == "live"){
								track0.stop();
							}
						}
					};
					
					return resolve({
						source: source,
						controls: controlEvents,
						info: info
					});
					
				}).catch(function(err){
					return reject(err);
				});
				timeoutTimer = setTimeout(function(){
					didTimeout = true;
					return reject({message: "Media 'getUserMedia' timeout. Permission might require user interaction.",	name: "TimeoutError"});
				}, timeout || 5000);
			})();
		});
	};
	
	//Builders
	
	//MediaRecorder
	WebAudio.createAudioRecorder = function(stream, sourceInfo, recorderOptions){
		if (!recorderOptions) recorderOptions = {};		//TODO: option 'decodeToAudioBuffer' is still experimental
		if (!recorderOptions.codec) recorderOptions.codec = "webm_ogg_opus";
		return new Promise(function(resolve, reject){
			(async function(){
				try {
					var sampleRate = sourceInfo.settings.sampleRate;
					if (!sampleRate){
						return reject({message: "Sample-rate unknown! Please add correct 'sourceInfo'.", name: "AudioRecorderError"});
					}
					var channels = sourceInfo.settings.channelCount;
					if (channels > 1){
						//TODO: we only support MONO atm
						return reject({message: "Sorry, but this recorder only supports MONO audio at the moment.", name: "NotSupportedError"});
					}
					var mimeType = recorderOptions.mimeType || WebAudio.defaultMimeTypesForCodecs[recorderOptions.codec] || WebAudio.defaultMimeTypesForCodecs["webm_ogg_opus"];
					var sampleTime = recorderOptions.sampleTime || (recorderOptions.chunkSize? Math.floor(1000/sampleRate * recorderOptions.chunkSize) : 0);
					if (sampleTime && recorderOptions.decodeToAudioBuffer){
						console.error("WARNING: Partial decoding is not supported at the moment! It is possible but requires adding custom headers for each blob!");
						//TODO: try adding custom blob headers (proof of concept: add the first 2 ogg blobs to every following blob)
					}
					//var chunks = [];
					if (!window.MediaRecorder){
						return reject({message: "'MediaRecorder' is not available!", name: "NotSupportedError"});
					}else if (!MediaRecorder.isTypeSupported(mimeType)){
						return reject({message: ("MIME-Type '" + mimeType + "' is not supported!"), name: "NotSupportedError"});
					}else {
						var mediaRecorder = new MediaRecorder(stream, {
							mimeType: mimeType,
							bitsPerSecond: (sampleRate * 2 * channels)
						});
						var startedTS, stoppedTS;
						var triggeredLastData = false;
						
						mediaRecorder.onerror = recorderOptions.onerror || console.error;
						if (recorderOptions.onstart) mediaRecorder.onstart = recorderOptions.onstart;
						if (recorderOptions.onpause) mediaRecorder.onpause = recorderOptions.onpause;
						if (recorderOptions.onresume) mediaRecorder.onresume = recorderOptions.onresume;
						var onStop = recorderOptions.onstop;
						mediaRecorder.onstop = function(e){
							//var blob = new Blob(chunks, {'type' : mimeType});
							//chunks = [];
							//console.log("onstop", "state", mediaRecorder.state);		//DEBUG
							if (onStop && !recorderOptions.decodeToAudioBuffer){
								onStop();		//TODO: we delay stop if we need to decode the blob first to keep original order
							}
						};
						var onDataAvailable = recorderOptions.ondataavailable || recorderOptions.onprocess;
						if (recorderOptions.decodeToAudioBuffer){
							//decode chunks
							if (onDataAvailable) mediaRecorder.ondataavailable = function(e){
								//catch last 'ondataavailable' and delay stop
								//console.log("ondataavailable", "state", mediaRecorder.state);		//DEBUG
								if (mediaRecorder.state == "inactive") triggeredLastData = true;
								if (e && e.data){
									let startDecode = Date.now();
									WebAudio.offlineAudioContextBlobDecoder(sampleRate, channels, e.data, function(audioBuffer){
										if (audioBuffer){
											onDataAvailable({data: audioBuffer.getChannelData(0), decodeTime: (Date.now() - startDecode)});		//TODO: is MONO
										}
										if (!triggeredLastData && recorderOptions.recordLimitMs && ((Date.now() - startedTS) >= recorderOptions.recordLimitMs)){
											stop();
										}else if (triggeredLastData){
											if (onStop) onStop();		//NOTE: we have not stop-event here, but is there anything we need?
										}
									});
								}
							};
						}else {
							if (onDataAvailable) mediaRecorder.ondataavailable = function(e){
								//chunks.push(e.data);
								onDataAvailable(e);
								if (recorderOptions.recordLimitMs && ((Date.now() - startedTS) >= recorderOptions.recordLimitMs)){
									stop();
								}
							};
						}
						var stopTimer;
						var stop = function(){
							if (stopTimer) clearTimeout(stopTimer);
							stoppedTS = Date.now();
							//console.log("AudioRecorder state:", mediaRecorder.state);		//DEBUG
							if (mediaRecorder.state != "inactive") mediaRecorder.stop();
						};
						var start = function(){
							startedTS = Date.now();
							stoppedTS = undefined;
							triggeredLastData = false;
							if (sampleTime){
								mediaRecorder.start(sampleTime);
							}else {
								mediaRecorder.start();
								if (recorderOptions.recordLimitMs){
									stopTimer = setTimeout(stop, recorderOptions.recordLimitMs);	//NOTE: we need this because we have no intermediate results
								}
							}
						};
						return resolve({
							getMediaRecorder: function(){ return mediaRecorder; }, mimeType: mimeType, sourceInfo: sourceInfo, 
							sampleTime: sampleTime,
							start: start, stop: stop
						});
					}
				}catch (err){
					console.error("AudioRecorder", err);
					return reject(err);
				}
			})();
		});
	};
	WebAudio.offlineAudioContextBlobDecoder = function(sampleRate, channels, encodedBlob, callback){
		blobToArray(encodedBlob, function(encodedArray){
			if (!encodedArray){
				callback();
			}else {
				var offlineAudioContext = new OfflineAudioContext(channels, encodedArray.byteLength, sampleRate);
				offlineAudioContext.decodeAudioData(encodedArray, function(audioBuffer){
					callback(audioBuffer);
				}, function(err){
					console.error("offlineAudioContext.decodeAudioData ERROR", err);
					callback();
				});
			}
		});
	};
	function blobToArray(blobData, callback){
		if (!blobData || !blobData.size){
			callback();
		}else if (typeof blobData.arrayBuffer == "function"){
			blobData.arrayBuffer().then(function(buffer){
				callback(buffer);
			}).catch(function(err){
				console.error("blobToArray '.arrayBuffer' ERROR", err);
				callback();
			});
		}else {
			var fr = new FileReader();
			fr.onload = function(){
				callback(fr.result);
			};
			fr.onerror = function(event){
				console.error("blobToArray 'FileReader' ERROR", reader.error, event);
				callback();
			};
			fr.readAsArrayBuffer(blobData);
		}
	}
	WebAudio.blobToArray = blobToArray;
	
	//Legacy script processor node
	WebAudio.createLegacyMicrophoneScriptProcessor = function(options){
		if (!options) options = {};		//e.g. 'destinationNode', 'targetSampleRate' and 'bufferSize' (see 'getMicrophone' for more)
		return WebAudio.getMicrophone(options, undefined).then(function(res){
			//get context
			var source = res.source;
			var audioContext = source.context;
			var sampleRate = audioContext.sampleRate;

			var bufferSize = options.bufferSize || 2048;	//TODO: set undefined for auto-size?
			//for webkit?: bufferSize = 4096 * Math.pow(2, Math.ceil(Math.log(this.sampler.resampleRatio) / Math.log(2))); //2, 4, 8,...
			var channels = 1; //options.channels || 1;		//TODO: only MONO
			//var targetSampleRate = options.targetSampleRate;
			
			var processNode = audioContext.createScriptProcessor(bufferSize, channels, channels);	//bufferSize, numberOfInputChannels, numberOfOutputChannels
			
			source.connect(processNode);
			
			var customSource = {
				node: processNode,
				type: "scriptProcessor",
				typeData: res.info,
				hasWorkletSupport: false, 	//does not fit into audio processing thread (normal worklets)
				start: function(){
					//overwrites afterStart
					if (res.controls.onAfterStart) res.controls.onAfterStart();
				},
				stop: function(){
					//overwrites beforeStop
					if (res.controls.onBeforeStop) res.controls.onBeforeStop();
				},
				release: function(){
					//overwrites afterRelease
					if (res.controls.onAfterRelease) res.controls.onAfterRelease();
				}
				//TODO: implement more?!?
			};
			//remaining controlEvents - beforeStart, afterStart, beforeStop, afterStop, beforeRelease, afterRelease
			if (res.controls){
				if (res.controls.onBeforeStart) customSource.beforeStart = res.controls.onBeforeStart;
				//if (res.controls.onAfterStart) customSource.afterStart = res.controls.onAfterStart;
				//if (res.controls.onBeforeStop) customSource.beforeStop = res.controls.onBeforeStop;
				if (res.controls.onAfterStop) customSource.afterStop = res.controls.onAfterStop;
				if (res.controls.onBeforeRelease) customSource.beforeRelease = res.controls.onBeforeRelease;
				//if (res.controls.onAfterRelease) customSource.afterRelease = res.controls.onAfterRelease;
			}

			if (options.onaudioprocess){
				//this is the classic script processor callback
				processNode.onaudioprocess = options.onaudioprocess;
				//NOTE: we don't assign 'onmessage' here to make sure the module processor throws an error ... because it never gets called
			}else {
				//this resembles the module interface
				function convertEvent(e){
					if (e && e.inputBuffer){
						var samples = [e.inputBuffer.getChannelData(0)];	//TODO: only MONO
						processNode.onmessage({
							data: {
								samples: samples,
								sampleRate: sampleRate,
								channels: channels,
								//isLast: false,
								type: samples[0].constructor.name
							}
						});		
					}
				}
				processNode.onaudioprocess = function(e){ convertEvent(e); };
				processNode.onmessage = options.onmessage || function(e){};
			}
			
			return customSource;
		});
	};
	
	//White-noise-generator node for testing
	WebAudio.createWhiteNoiseGeneratorNode = function(noiseGain, ctxOptions, onMessageCallback){
		if (!ctxOptions) ctxOptions = {};		//e.g. 'targetSampleRate'
		var moduleFolder = WebAudio.defaultProcessorOptions.moduleFolder.replace(/\/$/, "") + "/";
		return new Promise(function(resolve, reject){
			(async function(){
				try {
					//Audio context and source node
					var audioContext = WebAudio.createAudioContext(ctxOptions);
					try { await audioContext.resume(); } catch(error){};		//TODO: prevent quirky stuff on e.g. iOS
					await audioContext.suspend();
					
					var modulePath = moduleFolder + "white-noise-generator.js";
					await audioContext.audioWorklet.addModule(modulePath);

					var thisProcessNode = new AudioWorkletNode(audioContext, "white-noise-generator", {
						//settings
						processorOptions: {
							gain: (noiseGain || 0.1)
						}
					});
					if (onMessageCallback){
						//just in case
						thisProcessNode.port.onmessage = onMessageCallback;
					}
					resolve(thisProcessNode);
					
				}catch (err){
					return reject(err);
				}
			})();
		});
	};
	
	//File AudioBufferSourceNode with start/stop/release
	WebAudio.createFileSource = function(fileUrl, ctxOptions, loop, onEndCallback){
		if (!ctxOptions) ctxOptions = {};		//e.g.: 'targetSampleRate'
		return new Promise(function(resolve, reject){
			try {
				function errorCallback(err){
					reject(err);
				}
				function successCallback(arrayBuffer){
					WebAudio.createAudioBufferSource(arrayBuffer, ctxOptions, loop, onEndCallback)
					.then(function(res){
						res.typeData = {
							fileUrl: fileUrl
						};
						resolve(res);
					})
					.catch(errorCallback);
				}
				WebAudio.readFileAsBuffer(fileUrl, successCallback, errorCallback);
				
			}catch (err){
				reject(err);
			}
		});
	};
	//Direct AudioBufferSourceNode with start/stop/release
	WebAudio.createAudioBufferSource = function(audioBuffer, ctxOptions, loop, onEndCallback){
		if (!ctxOptions) ctxOptions = {};		//e.g.: 'targetSampleRate'
		return new Promise(function(resolve, reject){
			(async function(){
				try {
					//AudioContext and AudioBufferSourceNode - NOTE: maybe useful: new OfflineAudioContext(1, 128, 16000);
					var audioContext = WebAudio.createAudioContext(ctxOptions);
					try { await audioContext.resume(); } catch(error){};		//TODO: prevent quirky stuff on e.g. iOS
					await audioContext.suspend();
					var audioBufferSourceNode = audioContext.createBufferSource();
					//decode to get buffer
					audioContext.decodeAudioData(audioBuffer, function(buffer){
						audioBufferSourceNode.buffer = buffer;
						audioBufferSourceNode.loop = (loop != undefined)? loop : true;
						if (onEndCallback) audioBufferSourceNode.onended = onEndCallback;	//NOTE: req. loop=false
						return resolve({
							node: audioBufferSourceNode,
							type: "fileAudioBuffer",
							typeData: {},
							start: function(){ audioBufferSourceNode.start(); },
							stop: function(){ audioBufferSourceNode.stop(); },
							release: function(){}	//TODO: ?!?
						});
					}, function(err){ 
						return reject(err);
					});
				}catch (err){
					return reject(err);
				}
			})();
		});
	};
	
	//Create player for source nodes (e.g. audio URL or buffer nodes)
	WebAudio.createSourceAudioPlayer = function(source, options, audioModules, onInit, onInitError){
		if (!options) options = {};
		options.modules = audioModules || [];
		options.customSource = source;	//important source prop.: 'loop' and 'onended'
		if (options.startSuspended == undefined) options.startSuspended = true;
		var webAudioProcessor = new WebAudio.Processor(options, onInit, onInitError);
		return webAudioProcessor;
	};
	
	//Encode buffer to wave
	WebAudio.encodeWaveBuffer = function(buffer, sampleRate, channels, isFloat32, successCallback, errorCallback){
		var moduleFolder = WebAudio.defaultProcessorOptions.moduleFolder.replace(/\/$/, "") + "/";
		var encoderWorker = new Worker(moduleFolder + 'wave-encoder' + '-worker.js');
		if (!successCallback) successCallback = console.log;
		if (!errorCallback) errorCallback = console.error;
		var options = {
			setup: {
				inputSampleRate: sampleRate,
				inputSampleSize: buffer.length,
				lookbackBufferMs: 0
			}
		};
		encoderWorker.onmessage = function(e){
			if (e.data.moduleState == 1){
				encoderWorker.postMessage({encode: {format: "wave", data: {
					samples: [buffer],		//MONO or interleaved in channel 1
					sampleRate: sampleRate, 
					channels: channels, 
					isFloat32: isFloat32
				}}});
			}else if (e.data.encoderResult){
				encoderWorker.terminate();
				if (e.data.error){
					errorCallback({name: "EncoderError", message: e.data.error});
				}else {
					successCallback(e.data.encoderResult);
				}
			}
		};
		encoderWorker.onerror = function(err){
			encoderWorker.terminate();
			errorCallback(err);
		};
		encoderWorker.postMessage({ctrl: {action: "construct", options: options}});
	};
	//Decode audio file to audio buffer
	WebAudio.decodeAudioFile = function(fileUrl, sampleRate, channels, successCallback, errorCallback){
		WebAudio.readFileAsBuffer(fileUrl, function(encodedArray){
			var offlineAudioContext = new OfflineAudioContext(channels, encodedArray.byteLength, sampleRate);
			offlineAudioContext.decodeAudioData(encodedArray, function(audioBuffer){
				successCallback(audioBuffer);
			}, function(err){
				errorCallback(err);
			});
		}, function(err){
			errorCallback(err);
		});
	};
	//Decode audio file to audio buffer
	WebAudio.decodeAudioFileToInt16Mono = function(fileUrl, sampleRate, successCallback, errorCallback){
		var channels = 1;
		WebAudio.decodeAudioFile(fileUrl, sampleRate, channels, function(audioBuffer){
			var isFloat32 = true;
			WebAudio.encodeWaveBuffer(audioBuffer.getChannelData(0), sampleRate, channels, isFloat32, function(res){
				try {
					var samplesInt16Mono = new Int16Array(res.wav.buffer);
					successCallback(samplesInt16Mono);
				}catch(err){
					errorCallback(err);
				}
			}, errorCallback);
		}, errorCallback);
	};
	
	//WASM resampler
	WebAudio.resampleBufferViaSpeex = function(buffer, inputSampleRate, targetSampleRate, channels, quality, successCallback, errorCallback){
		if (!successCallback) successCallback = console.log;
		if (!errorCallback) errorCallback = console.error;
		try {
			var offlineAudioContext = new OfflineAudioContext(channels, buffer.length, inputSampleRate);	//we just need this to setup the module
			var moduleFolder = WebAudio.defaultProcessorOptions.moduleFolder.replace(/\/$/, "") + "/";
			var moduleName = "speex-resample-switch";
			offlineAudioContext.audioWorklet.addModule(moduleFolder + moduleName + ".js").then(function(){	//NOTE: if the folder is wrong this can fail with poor error message
				var options = {
					processorOptions: {
						ctxInfo: {
							sampleRate: inputSampleRate
						},
						targetSampleRate: targetSampleRate,
						resampleQuality: quality, 		//1-10
						bufferSize: buffer.length
						//passThroughMode: 1,
						//calculateRmsVolume: true
					}
				};
				var processNode = new AudioWorkletNode(offlineAudioContext, moduleName, options);
				processNode.port.onmessage = function(e){
					if (e.data.moduleState == 1){
						processNode.port.postMessage({resample: {
							samples: [buffer],
							isInt16: true
						}});
					}else if (e.data.resampleResult){
						offlineAudioContext = null;
						if (e.data.error){
							errorCallback({name: "ResampleError", message: e.data.error});
						}else {
							successCallback(e.data.resampleResult);
						}
					}
				};
				processNode.onprocessorerror = function(err){
					offlineAudioContext = null;
					errorCallback(err);
				};
			});
		}catch(err){
			errorCallback(err);
		}
	};
	
	//Commons
	
	//File reader
	WebAudio.readFileAsBuffer = function(fileUrl, successCallback, errorCallback){
		if (SepiaFW$1 && SepiaFW$1.files){
			//more robust method
			SepiaFW$1.files.fetch(fileUrl, successCallback, errorCallback, "arraybuffer", WebAudio.contentFetchTimeout);
		}else {
			//fallback
			xmlHttpCall('arraybuffer', fileUrl, successCallback, errorCallback);
		}
	};
	WebAudio.readFileAsText = function(fileUrl, successCallback, errorCallback){
		if (SepiaFW$1 && SepiaFW$1.files){
			SepiaFW$1.files.fetch(fileUrl, successCallback, errorCallback, undefined, WebAudio.contentFetchTimeout);	//default: text
		}else {
			xmlHttpCall('text', fileUrl, successCallback, errorCallback);
		}
	};
	function arrayBufferLoaderPromise(url){
		return new Promise(function(resolve, reject){
			WebAudio.readFileAsBuffer(url, function(arraybuffer){ resolve(arraybuffer); }, function(err){ reject(err); });
		});
	}
	function textLoaderPromise(url){
		return new Promise(function(resolve, reject){
			WebAudio.readFileAsText(url, function(text){ resolve(text); }, function(err){ reject(err); });
		});
	}
	function xmlHttpCall(responseType, fileUrl, successCallback, errorCallback){
		var request = new XMLHttpRequest();
		request.open('GET', fileUrl);
		request.responseType = responseType; //'arraybuffer';
		request.timeout = WebAudio.contentFetchTimeout;
		request.onload = function(e){
			if (request.status >= 200 && request.status < 300){
				successCallback(request.response); 	//the arraybuffer is in request.response
			}else {
				errorCallback({
					status: request.status,
					message: request.statusText
				});
			}
		};
		request.onerror = function(e){
			errorCallback(e);
		};
		request.ontimeout = function(e){
			errorCallback(e);
		};
		request.send();
	}

	//Base64 converter
	function convertBase64ToUint8Array(s){
		try {
			var decoded = atob(s);
			var bytes = new Uint8Array(decoded.length);
			for (var i = 0; i < decoded.length; ++i){
				bytes[i] = decoded.charCodeAt(i);
			}
			return bytes;
		}catch (error){
			throw new Error("Converting base64 string to Uint8Array bytes array failed.");
		}
	}
	function convertUint8ArrayToBase64String(uint8Array){
		try {
			return btoa(uint8Array.reduce(function(data, byte){ return data + String.fromCharCode(byte); }, ''));
		}catch (error){
			throw new Error("Converting Uint8Array to base64 string failed.");
		}
	}
	//export
	WebAudio.base64 = {
		base64StringToUint8Array: convertBase64ToUint8Array,
		uint8ArrayToBase64String: convertUint8ArrayToBase64String
	};
	
	//Add audio data as audio element to element on page (or body)
	WebAudio.addAudioElementToPage = function(targetEle, audioData, audioType){
		var audioEle = document.createElement("audio");
		audioEle.src = window.URL.createObjectURL((audioData.constructor.name == "Blob")?
			audioData : (new Blob([audioData], { type: (audioType || "audio/wav") })));
		audioEle.setAttribute("controls", "controls");
		var audioBox = document.createElement("div");
		audioBox.appendChild(audioEle);
		if (!targetEle) targetEle = document.body;
		targetEle.appendChild(audioBox);
		return audioEle;
	};
	
	//used to keep Promise structure, e.g.: Promise.resolve((optionalFun || noop)()).then(...)
	function noop(){}	
	//END
	parentModule.webAudio = WebAudio;	//--> SepiaFW.webAudio
}(SepiaFW$1));

//Simple voice recorder with fixed parameters using SEPIA Web Audio Lib
(function(){
	var SepiaVoiceRecorder = {};

	//callbacks (defined once because we can have only one instance):

	SepiaVoiceRecorder.onProcessorReady = function(info){
		console.log("SepiaVoiceRecorder -  onProcessorReady", info);
	};
	SepiaVoiceRecorder.onProcessorInitError = function(err){
		console.error("SepiaVoiceRecorder -  onProcessorInitError", err);
	};
	SepiaVoiceRecorder.onConnected = function(info){
		console.log("SepiaVoiceRecorder -  onConnected", info);
	};
	SepiaVoiceRecorder.onDisconnected = function(info){
		console.log("SepiaVoiceRecorder -  onDisconnected", info);
	};

	SepiaVoiceRecorder.onAudioStart = function(info){
		console.log("SepiaVoiceRecorder -  onAudioStart");
	};
	SepiaVoiceRecorder.onAudioEnd = function(info){
		console.log("SepiaVoiceRecorder -  onAudioEnd");
	};
	SepiaVoiceRecorder.onProcessorError = function(err){
		console.error("SepiaVoiceRecorder -  onProcessorError", err);
	};

	SepiaVoiceRecorder.onProcessorRelease = function(info){
		console.log("SepiaVoiceRecorder -  onProcessorRelease");
	};

	SepiaVoiceRecorder.onDebugLog = function(msg){
		console.log("debugLog", msg);
	};
	
	//Resampler events
	SepiaVoiceRecorder.onResamplerData = function(data){
		console.log("SepiaVoiceRecorder -  onResamplerData", data);
	};
	
	//Wave encoder events
	SepiaVoiceRecorder.onWaveEncoderStateChange = function(state){
		console.log("SepiaVoiceRecorder -  onWaveEncoderStateChange", state);
	};
	SepiaVoiceRecorder.onWaveEncoderAudioData = function(waveData){
		console.log("SepiaVoiceRecorder -  onWaveEncoderAudioData", waveData);
		//SepiaVoiceRecorder.addAudioElementToPage(targetEle, waveData, "audio/wav");
	};
	function onWaveEncoderData(data){
		if (data.output && data.output.wav){
			SepiaVoiceRecorder.onWaveEncoderAudioData(data.output.wav);
			
		}else if (data.output && data.output.buffer);
		if (data.gate){
			SepiaVoiceRecorder.onWaveEncoderStateChange(data.gate);
			if (data.gate.isOpen === true){
				waveEncoderIsBuffering = true;
				
			}else if (data.gate.isOpen === false){
				if (waveEncoderIsBuffering){
					waveEncoderGetWave();		//we use this by default?
				}
				waveEncoderIsBuffering = false;
			}
		}
	}
	var waveEncoderIsBuffering = false;
	
	function onVadData(data){
		//console.log("onVadData", data);	//DEBUG
		if (data.voiceActivity != undefined);
		if (data.voiceEnergy != undefined);
		if (data.vadSequenceCode != undefined){
			//console.log("VAD sequence event: " + data.vadSequenceMsg);		//DEBUG
			if (data.vadSequenceCode == 1){
				SepiaVoiceRecorder.onVadStateChange("vaup", 1);			//1: voice activity registered
			}else if (data.vadSequenceCode == 2){
				SepiaVoiceRecorder.onVadStateChange("speechstart", 2);	//2: sequence started (continous speech)
			}else if (data.vadSequenceCode == 3){
				SepiaVoiceRecorder.onVadStateChange("vadown", 3);		//3: voice activity gone
			}else if (data.vadSequenceCode == 4){
				SepiaVoiceRecorder.onVadStateChange("speechend", 4);	//4: speech finished max. time
			}else if (data.vadSequenceCode == 5){
				SepiaVoiceRecorder.onVadStateChange("speechend", 5); 	//5: speech finished (sequence end)
				//data.vadSequenceStarted, data.vadSequenceEnded
			}
		}
	}

	//SpeechRecognition events
	SepiaVoiceRecorder.onSpeechRecognitionStateChange = function(ev){
		console.log("SepiaVoiceRecorder -  onSpeechRecognitionStateChange", ev);
	};
	SepiaVoiceRecorder.onSpeechRecognitionEvent = function(data){
		console.log("SepiaVoiceRecorder -  onSpeechRecognitionEvent", data);
	};
	function onSpeechRecognitionData(msg){
		if (!msg) return;
		if (msg.gate){
			//gate closed
			if (msg.gate.isOpen == false && asrModuleGateIsOpen){
				asrModuleGateIsOpen = false;
				//STATE: streamend
				SepiaVoiceRecorder.onSpeechRecognitionStateChange({
					state: "onStreamEnd", 
					bufferOrTimeLimit: msg.gate.bufferOrTimeLimit
				});
			//gate opened
			}else if (msg.gate.isOpen == true && !asrModuleGateIsOpen){
				//STATE: streamstart
				SepiaVoiceRecorder.onSpeechRecognitionStateChange({
					state: "onStreamStart"
				});
				asrModuleGateIsOpen = true;
			}
		}
		if (msg.recognitionEvent){
			SepiaVoiceRecorder.onSpeechRecognitionEvent(msg.recognitionEvent);
		}
		if (msg.connectionEvent){
			//TODO: use? - type: open
			if (msg.connectionEvent.type == "ready"){
				//ready
				SepiaVoiceRecorder.onConnected(msg.connectionEvent.data);
			}else if (msg.connectionEvent.type == "closed"){
				//closed
				SepiaVoiceRecorder.onDisconnected(msg.connectionEvent.data);
			}
		}
		//In debug or test-mode the module might send the recording:
		if (msg.output && msg.output.wav){
			SepiaVoiceRecorder.onWaveEncoderAudioData(msg.output.wav);
		}
	}
	var asrModuleGateIsOpen = false;
	
	//recorder processor:
	
	var sepiaWebAudioProcessor;
	var targetSampleRate = 16000;
	var resamplerBufferSize = 512;
	
	async function createRecorder(options){
		if (!options) options = {};
		else {
			//overwrite shared defaults?
			if (options.targetSampleRate) targetSampleRate = options.targetSampleRate;
			if (options.resamplerBufferSize) resamplerBufferSize = options.resamplerBufferSize;
		}
		var useRecognitionModule = !!options.asr;
		if (typeof options.asr != "object") options.asr = {};
		var useVadModule = !!options.vad;
		if (typeof options.vad != "object") options.vad = {};
		//audio source
		var customSource = undefined;
		if (options.fileUrl){
			//customSourceNode: file audio buffer
			try {
				customSource = await SepiaFW.webAudio.createFileSource(options.fileUrl, {
					targetSampleRate: targetSampleRate
				});
			}catch (err){
				SepiaVoiceRecorder.onProcessorInitError(err);
				return;
			}
		}
		
		var resampler = {
			name: 'speex-resample-switch',
			settings: {
				onmessage: SepiaVoiceRecorder.onResamplerData,
				sendToModules: [],	//index given to processor - 0: source, 1: module 1, ...
				options: {
					processorOptions: {
						targetSampleRate: targetSampleRate,
						resampleQuality: options.resampleQuality || 4, 	//1 [low] - 10 [best],
						bufferSize: resamplerBufferSize,
						passThroughMode: 0,		//0: none, 1: original (float32), 2: 16Bit PCM - NOTE: NOT resampled
						calculateRmsVolume: true,
						gain: options.gain || 1.0
					}
				}
			}
		};
		
		var waveEncoder = {
			name: 'wave-encoder',
			type: 'worker',
			handle: {},		//will be updated on init. with ref. to node.
			settings: {
				onmessage: onWaveEncoderData,
				options: {
					setup: {
						inputSampleRate: targetSampleRate,
						inputSampleSize: resamplerBufferSize,
						lookbackBufferMs: 0,
						recordBufferLimitKb: 500,		//default: 5MB (overwritten by ms limit), good value e.g. 600
						recordBufferLimitMs: options.recordingLimitMs,
						doDebug: false
					}
				}
			}
		};
		var waveEncoderIndex;
		
		var defaultVadBuffer = 480*2;	//480 is the 30ms window for WebRTC VAD 16k - its a bit "special"
		var vadWorker = {
			name: 'webrtc-vad-worker', 	//More experimental version: 'sepia-vad-worker'
			type: 'worker',
			settings: {
				onmessage: onVadData,
				options: {
					setup: {
						inputSampleRate: targetSampleRate,
						inputSampleSize: resamplerBufferSize,
						bufferSize: options.vad.bufferSize || defaultVadBuffer, //restrictions apply ^^
						vadMode: options.vad.mode || 3,
						sequence: {
							silenceActivationTime: 450, //250,
							maxSequenceTime: options.vad.maxSequenceTime || 10000,
							minSequenceTime: options.vad.minSequenceTime || 600
						}
					}
				}
			}
		};
		var vadWorkerIndex;

		var sttServerModule = {
			name: 'stt-socket',
			type: 'worker',
			handle: {},		//will be updated on init. with ref. to node.
			settings: {
				onmessage: onSpeechRecognitionData,
				options: {
					setup: {
						//rec. options
						inputSampleRate: targetSampleRate,
						inputSampleSize: resamplerBufferSize,
						lookbackBufferMs: 0,
						recordBufferLimitKb: 500,			//default: 5MB (overwritten by ms limit), good value e.g. 600
						recordBufferLimitMs: options.recordingLimitMs,	//NOTE: will not apply in 'continous' mode (but buffer will not grow larger)
						//ASR server options
						serverUrl: options.asr.serverUrl,	//NOTE: if set to 'debug' it will trigger "dry run" (wav file + pseudo res.)
						clientId: options.asr.clientId,
						accessToken: options.asr.accessToken,
						//ASR engine common options
						messageFormat: options.asr.messageFormat || "webSpeechApi",		//use events in 'webSpeechApi' compatible format
						language: options.asr.language || "",
						task: options.asr.task || "",
						model: options.asr.model || "",
						continuous: (options.asr.continuous != undefined? options.asr.continuous : false),	//one final result only?
						optimizeFinalResult: options.asr.optimizeFinalResult,	//try to optimize result e.g. by converting text to numbers etc.
						//ASR engine specific options (can include commons but will be overwritten with above)
						engineOptions: options.asr.engineOptions || {},			//e.g. ASR model, alternatives, ...
						//other
						returnAudioFile: options.asr.returnAudioFile || false,			//NOTE: can be enabled via "dry run" mode
						doDebug: false
					}
				}
			}
		};
		var sttServerModuleIndex;
				
		//put together modules
		var activeModules = [];
		
		//- resampler is required
		activeModules.push(resampler);
		activeModules.length;
		
		//- use VAD?
		if (useVadModule){
			activeModules.push(vadWorker);
			vadWorkerIndex = activeModules.length;
			SepiaVoiceRecorder.vadModule = vadWorker;
			resampler.settings.sendToModules.push(vadWorkerIndex);			//add to resampler
		}
		
		//- use either speech-recognition (ASR) or wave-encoder
		if (useRecognitionModule){
			activeModules.push(sttServerModule);
			sttServerModuleIndex = activeModules.length;
			SepiaVoiceRecorder.sttServerModule = sttServerModule;
			resampler.settings.sendToModules.push(sttServerModuleIndex);	//add to resampler
		}else {
			activeModules.push(waveEncoder);
			waveEncoderIndex = activeModules.length;
			SepiaVoiceRecorder.waveEncoder = waveEncoder;
			resampler.settings.sendToModules.push(waveEncoderIndex);		//add to resampler
		}
				
		//create processor
		sepiaWebAudioProcessor = new SepiaFW.webAudio.Processor({
			onaudiostart: SepiaVoiceRecorder.onAudioStart,
			onaudioend: SepiaVoiceRecorder.onAudioEnd,
			onrelease: SepiaVoiceRecorder.onProcessorRelease,
			onerror: SepiaVoiceRecorder.onProcessorError,
			targetSampleRate: targetSampleRate,
			//targetBufferSize: 512,
			modules: activeModules,
			destinationNode: undefined,		//defaults to: new "blind" destination (mic) or audioContext.destination (stream)
			startSuspended: true,
			debugLog: SepiaVoiceRecorder.onDebugLog,
			customSource: customSource
			
		}, function(msg){
			//Init. ready
			SepiaVoiceRecorder.onProcessorReady(msg);
			
		}, function(err){
			//Init. error
			SepiaVoiceRecorder.onProcessorInitError(err);
		});
	}
	
	//Interface:
	
	SepiaVoiceRecorder.create = function(options){
		if (sepiaWebAudioProcessor){
			SepiaVoiceRecorder.onProcessorInitError({name: "ProcessorInitError", message: "SepiaVoiceRecorder already exists. Release old one before creating new."});
			return;
		}
		if (!options) options = {};
		createRecorder(options);
	};
	
	SepiaVoiceRecorder.isReady = function(){
		return (!!sepiaWebAudioProcessor && sepiaWebAudioProcessor.isInitialized());
	};
	SepiaVoiceRecorder.isActive = function(){
		return (!!sepiaWebAudioProcessor && sepiaWebAudioProcessor.isInitialized() && sepiaWebAudioProcessor.isProcessing());
	};
	SepiaVoiceRecorder.start = function(successCallback, noopCallback, errorCallback){
		if (sepiaWebAudioProcessor){
			sepiaWebAudioProcessor.start(function(){
				waveEncoderSetGate("open");					//start recording
				speechRecognitionModuleSetGate("open");		//start recognition
				if (successCallback) successCallback();
			}, noopCallback, errorCallback);
		}else {
			if (errorCallback) errorCallback({name: "ProcessorInitError", message: "SepiaVoiceRecorder doesn't exist yet."});
		}
	};
	SepiaVoiceRecorder.stop = function(stopCallback, noopCallback, errorCallback){
		if (sepiaWebAudioProcessor){
			sepiaWebAudioProcessor.stop(function(info){
				waveEncoderSetGate("close");				//stop recording
				speechRecognitionModuleSetGate("close");	//stop recognition
				if (stopCallback) stopCallback(info);
			}, noopCallback, errorCallback);
		}else {
			if (noopCallback) noopCallback();
		}
	};
	SepiaVoiceRecorder.release = function(releaseCallback, noopCallback, errorCallback){
		if (sepiaWebAudioProcessor){
			sepiaWebAudioProcessor.release(function(){
				sepiaWebAudioProcessor = undefined;
				if (releaseCallback) releaseCallback();
			}, function(){
				sepiaWebAudioProcessor = undefined;
				if (noopCallback) noopCallback();
			}, function(err){
				sepiaWebAudioProcessor = undefined;
				if (errorCallback) errorCallback(err);
			});
		}else {
			if (noopCallback) noopCallback();
		}
	};
	//stop and release if possible or confirm right away
	SepiaVoiceRecorder.stopIfActive = function(callback){
		if (SepiaVoiceRecorder.isActive()){
			SepiaVoiceRecorder.stop(callback, callback, undefined);
		}else {
			if (callback) callback();
		}
	};
	SepiaVoiceRecorder.stopAndReleaseIfActive = function(callback){
		SepiaVoiceRecorder.stopIfActive(function(){
			if (SepiaVoiceRecorder.isReady()){
				SepiaVoiceRecorder.release(callback, callback, undefined);
			}else {
				sepiaWebAudioProcessor = undefined;
				if (callback) callback();
			}	
		});
	};
	
	//Extras:
	
	function waveEncoderSetGate(state){
		if (sepiaWebAudioProcessor && SepiaVoiceRecorder.waveEncoder){
			SepiaVoiceRecorder.waveEncoder.handle.sendToModule({gate: state});	//"open", "close"
		}
	}
	function waveEncoderGetWave(){
		if (sepiaWebAudioProcessor && SepiaVoiceRecorder.waveEncoder){
			SepiaVoiceRecorder.waveEncoder.handle.sendToModule({request: {get: "wave"}});
		}
	}
	function speechRecognitionModuleSetGate(state){
		if (sepiaWebAudioProcessor && SepiaVoiceRecorder.sttServerModule){
			SepiaVoiceRecorder.sttServerModule.handle.sendToModule({gate: state});	//"open", "close"
		}
	}

	//Decode audio file to audio buffer and then to 16bit PCM mono
	SepiaVoiceRecorder.decodeAudioFileToInt16Mono = function(fileUrl, sampleRate, channels, successCallback, errorCallback){
		if (!sampleRate) sampleRate = 16000;
		if (channels && channels > 1){
			console.error("SepiaVoiceRecorder.decodeAudioFileToInt16Mono - Channels > 1 not supported. Result will only contain data of channel 0.");
		}
		if (!successCallback) successCallback = console.log;
		if (!errorCallback) errorCallback = console.error;
		SepiaFW.webAudio.decodeAudioFileToInt16Mono(fileUrl, sampleRate, successCallback, errorCallback);
	};
	
	//Add audio data as audio element to page
	SepiaVoiceRecorder.addAudioElementToPage = function(targetEle, audioData, audioType){
		return SepiaFW.webAudio.addAudioElementToPage(targetEle, audioData, audioType);
	};
	
	//export
	window.SepiaVoiceRecorder = SepiaVoiceRecorder;
})();

//--- Recorder ---
class Recorder {
  volumeThresholds = [0.05, 10];		//too low/too high
  gain = 1;
  
  isLoading = false;
  isRecording = false;
  isWaitingForFinalResult = false;
  waitingForFinalResultTimer = undefined;
  waitingForFinalResultDelay = 4000;
  asrStreaming = false;
  sourceInfo = "-?-";

  constructor(sepiaSpeechRecognition, sepiaSpeechRecognitionConfig) {
    //set correct modules folder
    if (window.SepiaFW) SepiaFW.webAudio.defaultProcessorOptions.moduleFolder = "lib";
    
    if (!window.SepiaVoiceRecorder) {
      SepiaVoiceRecorder = {notSupported: true};	//Library not found or not supported (browser <= IE11)
      console.error("SEPIA Web Audio Library not found or not supported (IE11?)!");
    } else {
      this.sepiaSpeechRecognition = sepiaSpeechRecognition;
      this.sepiaSpeechRecognitionConfig = sepiaSpeechRecognitionConfig;
      const self = this;
      
      SepiaVoiceRecorder.onProcessorReady = function(info) {
        console.log("SepiaVoiceRecorder -  onProcessorReady", info);
        this.sourceInfo = "Sample-rate: " + info.targetSampleRate 
          + "Hz (factor: " + (info.inputSampleRate/info.targetSampleRate) + ")\nDevice Label:\n" + (info.sourceInfo ? info.sourceInfo.label : "");
        console.log(this.sourceInfo);
        self.isLoading = false;
        self.isRecording = false;
        self.isWaitingForFinalResult = false;
        SepiaVoiceRecorder.start();
      };
      SepiaVoiceRecorder.onConnected = function(info) {
        if (info && info.model) {
          console.log("INFO - connected - ASR active model: " + info.model);
          sepiaSpeechRecognition._dispatchEvent(new Event('start'));
        }
      };
      SepiaVoiceRecorder.onDisconnected = function() {
        sepiaSpeechRecognition._dispatchEvent(new Event('end'));
      };
      SepiaVoiceRecorder.onProcessorInitError = function(err) {
        self.onMicError();
        const error = new SpeechRecognitionErrorEvent();
        error.message = err.message;
        switch (err.name) {
          case 'NotAllowedError':
            error.error = SpeechRecognitionErrorCode.NOTALLOWED;
            error._dispatch(sepiaSpeechRecognition);
            break;
          default:
            console.log(err);
            break;
        }
        if (location.protocol == "http:" && !location.origin.indexOf("http://localhost") == 0) {
          console.error("Init. ERROR - Likely because of insecure origin (no HTTPS or localhost)");
        }
      };
      SepiaVoiceRecorder.onProcessorError = function(err) {
        console.error("SepiaVoiceRecorder -  onProcessorError", err);
        self.onMicError();
        console.log("ERROR - onProcessorError: " + err.name);
      };
      
      SepiaVoiceRecorder.onAudioStart = function(info) {
        sepiaSpeechRecognition._dispatchEvent(new Event('audiostart'));
        self.isRecording = true;
      };
      SepiaVoiceRecorder.onAudioEnd = function(info) {
        sepiaSpeechRecognition._dispatchEvent(new Event('audioend'));
        self.isRecording = false;
        //"loading" or "idle"? Depends if waiting for final result...
        if (self.isWaitingForFinalResult) {
          //trigger fallback timer
          clearTimeout(self.waitingForFinalResultTimer);
          self.waitingForFinalResultTimer = setTimeout(function() {
            self.isWaitingForFinalResult = false;
          }, self.waitingForFinalResultDelay);
        }
        console.log("Microphone is CLOSED");
      };
      
      SepiaVoiceRecorder.onProcessorRelease = function(info) {
        console.log("SepiaVoiceRecorder -  onProcessorRelease");
        self.isRecording = false;
        self.isLoading = false;
        self.isWaitingForFinalResult = false;
      };
      
      SepiaVoiceRecorder.onDebugLog = function(msg) {};
      
      SepiaVoiceRecorder.onResamplerData = function(data) {
        //console.log("SepiaVoiceRecorder -  onResamplerData", data.rms);
      };
      SepiaVoiceRecorder.onSpeechRecognitionStateChange = function(ev) {
        if (ev.state == "onStreamStart") {
          if (!self.asrStreaming) ;
          self.asrStreaming = true;
        } else if (ev.state == "onStreamEnd") {
          if (self.asrStreaming) {
            if (ev.bufferOrTimeLimit === true) {
              console.log("Speech Recognition - Stopped streaming due to buffer- or time-limit");
            }
            if (self.isRecording) {
              SepiaVoiceRecorder.stop();
            } else if (self.isWaitingForFinalResult) {
              //trigger fallback timer
              clearTimeout(self.waitingForFinalResultTimer);
              self.waitingForFinalResultTimer = setTimeout(function() {
                self.isWaitingForFinalResult = false;
              }, self.waitingForFinalResultDelay);
            }
          }
          self.asrStreaming = false;
        }
      };
      SepiaVoiceRecorder.onSpeechRecognitionEvent = function(data) {
        if (data.type == "result") {
          if (!self.isRecording && !self.isWaitingForFinalResult) return;	//TODO: ignore unplanned results - use?
          // Prepare SpeechRecognitionEvent
          const alternative = new SpeechRecognitionAlternative();
          alternative.transcript = data.transcript;
          alternative.confidence = data.confidence;
          const result = new SpeechRecognitionResult([alternative]);
          if (data.isFinal) {
            // Final transcript
            if (self.isWaitingForFinalResult && !self.isRecording) {
              clearTimeout(self.waitingForFinalResultTimer);
            }
            result.isFinal = true;
            const list = new SpeechRecognitionResultList([result]);
            const event = new SpeechRecognitionEvent(list);
            if (data.transcript) {
              event._dispatch(sepiaSpeechRecognition, 'result');
            } else {
              const event = new SpeechRecognitionErrorEvent();
              event.error = SpeechRecognitionErrorCode.NOSPEECH;
              event.message = 'No speech was detected.';
              event._dispatch(sepiaSpeechRecognition);
            }
            self.isWaitingForFinalResult = false;
          } else {
            // Partial transcript
            result.isFinal = false;
            const list = new SpeechRecognitionResultList([result]);
            const event = new SpeechRecognitionEvent(list);
            if (data.transcript) {
              event._dispatch(sepiaSpeechRecognition, 'result');
            } else {
              event._dispatch(sepiaSpeechRecognition, 'nomatch');
            }
            self.isWaitingForFinalResult = true;
          }
        } else if (data.type == "error") {
          const error = new SpeechRecognitionErrorEvent();
          error.message = data.message;
          if (data.name && data.message) {
            switch (data.name) {
              case 'SocketConnectionError':
                error.error = SpeechRecognitionErrorCode.NETWORK;
                error._dispatch(sepiaSpeechRecognition);
                break;
              case 'Error':
                if (data.message === 'ChunkProcessorError failed to load.') {
                  // This only seems to happen when the access token is incorrect,
                  // so will use this for service not allowed.
                  error.error = SpeechRecognitionErrorCode.SERVICENOTALLOWED;
                  error.message = 'You are likely unauthorized to access this SEPIA STT server.';
                  error._dispatch(sepiaSpeechRecognition);
                }
                break;
              default:
                console.log(data);
                break;
            }
          } else {
            console.error("Speech Recognition Error:", data);
          }
        } else {
          console.log("Speech Recognition - Event: " + data.type);
        }
      };
      SepiaVoiceRecorder.onWaveEncoderAudioData = function(waveData) {
        // N/A
      };
      //Voice-Activity-Detection events
      SepiaVoiceRecorder.onVadStateChange = function(state, code){
        switch (state) {
          case 'vaup':
            sepiaSpeechRecognition._dispatchEvent(new Event('soundstart'));
            break;
          case 'vadown':
            sepiaSpeechRecognition._dispatchEvent(new Event('soundend'));
            break;
          case 'speechstart':
            sepiaSpeechRecognition._dispatchEvent(new Event('speechstart'));
            break;
          case 'speechend':
          sepiaSpeechRecognition._dispatchEvent(new Event('speechend'));
          break;
        }
      };
    }
  }
  
  toggleMic() {
    const shortenedLang = this.sepiaSpeechRecognition.lang.split('-')[0];
    if (asrOptions.language != this.sepiaSpeechRecognition.lang && asrOptions.language != shortenedLang) {
      const event = new SpeechRecognitionErrorEvent();
      event.error = SpeechRecognitionErrorCode.LANGUAGENOTSUPPORTED;
      event.message = 'The specified SEPIA STT server does not support the language specified by the user agent.';
      event._dispatch(this.sepiaSpeechRecognition);
      return;
    }
    
    const self = this;
    if (!this.isLoading && !this.isRecording && !this.isWaitingForFinalResult) {
      this.isLoading = true;
      //for this demo we create a new recorder each time
      SepiaVoiceRecorder.stopAndReleaseIfActive(function() {
        SepiaFW.webAudio.tryNativeStreamResampling = false;		//try native resampling?
        //build options
        const speechRecOptions = {
          language: self.sepiaSpeechRecognition.lang,
          continuous: self.sepiaSpeechRecognition.continuous,
          messageFormat: 'default'
        };
        var opt = Object.assign(self.sepiaSpeechRecognitionConfig, speechRecOptions);
        console.log(opt);
        // Commenting out for now, will likely try to utilize these for grammars in the future
        // if (phrases.length) {
        //   if (!opt.engineOptions) opt.engineOptions = {};
        //   opt.engineOptions.phrases = phrases;
        // }
        // if (hotWords.length) {
        //   if (!opt.engineOptions) opt.engineOptions = {};
        //   opt.engineOptions.hotWords = hotWords;
        // }
        SepiaVoiceRecorder.create({
          gain: self.gain,
          //recordingLimitMs: 10000,	//NOTE: will not apply in continous mode
          asr: opt,
          vad: true 	//check voice recorder demo of SEPIA Web Audio Lib. for info about VAD etc.
        });
      });
      
    } else if (this.isRecording) {
      SepiaVoiceRecorder.stop();
    
    } else if (this.isLoading || this.isWaitingForFinalResult) {
      SepiaVoiceRecorder.stopAndReleaseIfActive(function() {
        self.isLoading = false;
        self.isRecording = false;
        self.isWaitingForFinalResult = false;
      });
    }
  }
  
  releaseMic(callback) {
    SepiaVoiceRecorder.stopAndReleaseIfActive(function() {
      this.isLoading = false;
      this.isRecording = false;
      this.isWaitingForFinalResult = false;
      if (callback) callback();
    });
  }
  
  onMicError() {
    this.isRecording = false;
    this.isWaitingForFinalResult = false;
    this.isLoading = false;
  }
}

/**
 * Represents a set of words or patterns of words that we want the recognition service to recognize.
 * Grammar is defined using JSpeech Grammar Format (JSGF.) Other formats may also be supported in the future.
 */
class SpeechGrammar {
  /** Sets and returns a string containing the grammar from within in the SpeechGrammar object. */
  src = '';
  /** Sets and returns the weight of the SpeechGrammar object. */
  weight = 1;
}

/**
 * Represents a list of SpeechGrammar objects containing words or patterns of words 
 * that we want the recognition service to recognize. Grammar is defined using JSpeech Grammar Format (JSGF).
 * Other formats may also be supported in the future.
 */
class SpeechGrammarList {
  /** Internal list of SpeechGrammar objects */
  #list = [];

  /** Allows individual SpeechGrammar objects to be retrieved from the SpeechGrammarList using array syntax. */
  #item(index) {
    return this.#list[index];
  }
  
  /** Returns the number of SpeechGrammar objects contained in the SpeechGrammarList. */
  length = 0;
  
  constructor() {
    // Use a Proxy to more closely match the interface of SpeechGrammarList.
    return new Proxy(this, {
      get: (target, prop) => {
        if (prop === 'addFromString' || prop === 'addFromURI') {
          return function() {
            return target[prop].apply(target, arguments);
          }
        } else if (typeof +prop === 'number') {
          return target.#item(prop);
        } else if (prop === 'length') {
          return target.#list.length;
        }
      }
    });
  }

  /**
   * Takes a grammar present at a specific URI and adds it to the SpeechGrammarList as a new SpeechGrammar object. 
   * @param {String} src The URI to fetch the grammar from.
   * @param {Number} weight The weight to assign to the newly created SpeechGrammar object. Default is 1.
   */
  addFromURI = (src, weight = 1) => {
    const grammar = new SpeechGrammar();
    fetch(src).then(res => {
      res.text().then(text => {
        grammar.src = text;
        grammar.weight = weight;
        this.#list.push(grammar);
      });
    }).catch(err => {
      console.log('Failed to add SpeechGrammar from URI: ', err);
    });
  }

  /**
   * Takes a grammar present in a specific string and adds it to the SpeechGrammarList as a new SpeechGrammar object. 
   * @param {String} string The string containing the grammar.
   * @param {Number} weight The weight to assign to the newly created SpeechGrammar object. Default is 1.
   */
  addFromString = (string, weight = 1) => {
    const grammar = new SpeechGrammar();
    grammar.src = string;
    grammar.weight = weight;
    this.#list.push(grammar);
  }
}

let sepiaConfig = {};

/**
 * Returns a SpeechRecognition implementation that uses a SEPIA STT server
 * to perform ASR and generate transcriptions.
 * 
 * @param config The configuration that is ultimately passed to the SEPIA STT socket client.
 * @returns A class implementing the SpeechRecognition interface.
 */
 const sepiaSpeechRecognitionInit = (config) => {
  sepiaConfig = config;
  return SepiaSpeechRecognition;
};

class SepiaSpeechRecognition {
  #recorder = new Recorder(this, sepiaConfig);
  
  /**
   * Returns and sets a collection of SpeechGrammar objects that represent the grammars 
   * that will be understood by the current SpeechRecognition. 
   */
  grammars = new SpeechGrammarList();

  /**
   * Returns and sets the language of the current SpeechRecognition. 
   * If not specified, this defaults to the HTML lang attribute value, 
   * or the user agent's language setting if that isn't set either. 
   */
  lang = document.documentElement.lang || navigator.language;

  /** Controls whether continuous results are returned for each recognition, or only a single result. */
  continuous = false;

  /**
   * Controls whether interim results should be returned (true) or not (false).
   * Interim results are results that are not yet final
   * (e.g. the SpeechRecognitionResult.isFinal property is false). 
   */
  interimResults = false;

  /** Sets the maximum number of SpeechRecognitionAlternatives provided per SpeechRecognitionResult. */
  maxAlternatives = 1;

  constructor() {
    getServerInfo(sepiaConfig);
  }

  /**
   * Starts the speech recognition service listening to incoming audio with intent
   * to recognize grammars associated with the current SpeechRecognition. 
   */
  start = () => {
    this.#recorder.toggleMic();
  }

  /**
   * Stops the speech recognition service from listening to incoming audio, 
   * and attempts to return a SpeechRecognitionResult using the audio captured so far. 
   */
  stop = () => {
    this.#recorder.toggleMic();
  }

  /**
   * Stops the speech recognition service from listening to incoming audio,
   * and doesn't attempt to return a SpeechRecognitionResult. 
   */
  abort = () => {
    this.#recorder.toggleMic();
  }

  /**
   * Fired when the user agent has started to capture audio for speech recognition.
   * @param {Event} event 
   */
  onaudiostart = (event) => {};
  /**
   * Fired when any sound — recognizable speech or not — has been detected.
   * @param {Event} event 
   */
  onsoundstart = (event) => {};
  /**
   * fired when sound recognized by the speech recognition service as speech has been detected.
   * @param {Event} event 
   */
  onspeechstart = (event) => {};
  /**
   * Fired when speech recognized by the speech recognition service has stopped being detected.
   * @param {Event} event 
   */
  onspeechend = (event) => {};
  /**
   * Fired when any sound — recognizable speech or not — has stopped being detected.
   * @param {Event} event 
   */
  onsoundend = (event) => {};
  /**
   * Fired when the user agent has finished capturing audio for speech recognition.
   * @param {Event} event 
   */
  onaudioend = (event) => {};
  /**
   * Fired when the speech recognition service returns a result — a word or phrase has been 
   * positively recognized and this has been communicated back to the app
   * @param {SpeechRecognitionEvent} event 
   */
  onresult = (event) => {};
  /**
   * Fired when the speech recognition service returns a final result with no significant recognition.
   * @param {SpeechRecognitionEvent} event 
   */
  onnomatch = (event) => {};
  /**
   * Fired when a speech recognition error occurs.
   * @param {SpeechRecognitionErrorEvent} event 
   */
  onerror = (event) => {};
  /**
   * Fired when the speech recognition service has begun listening to incoming audio 
   * with intent to recognize grammars associated with the current SpeechRecognition.
   * @param {Event} event 
   */
  onstart = (event) => {};
  /**
   * Fired when the speech recognition service has disconnected.
   * @param {Event} event 
   */
  onend = (event) => {};

  /** Internal Map of event callbacks */
  _eventCallbacks = new Map();
  
  /**
   * Internal function to fire events
   */
  _dispatchEvent = (event) => {
    // Fire registered callbacks for this event
    const callbacks = this._eventCallbacks.get(event.type);
    if (callbacks) {
      callbacks.forEach(cb => cb(event));
    }
    // Fire EventHandler
    this[`on${event.type}`](event);
  }
  /**
   * Dummy addEventListener implementation.
   * Does not implement options or useCapture.
   * 
   * @param {String} type The event to listen for
   * @param {Function} listener The listener to add for this event
   */
  addEventListener = (type, listener) => {
    // Associate callback with specified event
    if (!this._eventCallbacks.has(type)) {
      this._eventCallbacks.set(type, [listener]);
    } else {
      this._eventCallbacks.get(type).push(listener);
    }
  }
  /**
   * Dummy removeEventListener implementation.
   * Does not implement options or useCapture.
   * 
   * @param {String} type The event to listen for
   * @param {Function} listener The listener to remove for this event
   */
   removeEventListener = (type, listener) => {
    // Associate callback with specified event
    if (!this._eventCallbacks.has(type)) ; else {
      const listeners = this._eventCallbacks.get(type);
      if (listeners.includes(listener)) {
        listeners.splice(listeners.indexOf(listener), 1);
      }
    }
  }
}

/**
 * The configuration to use when connecting to the SEPIA STT server.
 * Each property's initial value is set in such a way that you could
 * connect to a server running from the Docker image with no additional configuration,
 * as long as your current language is either English or German.
 */
class SepiaSpeechRecognitionConfig {
  // Server Settings

  /** The URL for the SEPIA STT server. */
  serverUrl = "http://localhost:20741";

  /** The client ID to authenticate as with the SEPIA STT server. */
  clientId = "any";

  /**
   * The access token used to authenticate with the SEPIA STT server.
   * 
   * **On a default server installation, which is set to use a common access token,
   * this is set to `test1234`.** If the server is set to use individual tokens instead,
   * this should be set to the corresponding token for the clientId.
   */
  accessToken = "test1234";

  // ASR options

  /// Common options (usually supported by all engines):

  /** Allows for selecting a task-specific model without knowing its exact name. */
  task = "assistant";

  /** The name of the ASR model to use on the server. This does not need to be set if language is already set. */
  model = "";

  /**
   * If set to true, will optimize final results by converting numbers and ordinals expressed as words
   * into integers (i.e. one -> 1, third -> 3rd, etc).
   */
  optimizeFinalResult = true;

  /// Engine specific options:

  /**
   * Allows you to set options for features that may only be available in certain engines used by the server.
   * An example would be Vosk's speaker detection, which is not available in Coqui.
   */
  engineOptions = {};
}

export { SepiaSpeechRecognitionConfig, sepiaSpeechRecognitionInit };
