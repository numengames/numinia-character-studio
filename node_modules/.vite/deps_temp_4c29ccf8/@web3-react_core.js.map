{
  "version": 3,
  "sources": ["../../tiny-invariant/dist/esm/tiny-invariant.js", "../../node_modules/babel-plugin-transform-async-to-promises/helpers.js", "../../@web3-react/core/src/normalizers.ts", "../../@web3-react/core/src/manager.ts", "../../@web3-react/core/src/provider.tsx"],
  "sourcesContent": ["var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n", "// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n", "import { arrayify } from '@ethersproject/bytes'\nimport { keccak256 } from '@ethersproject/keccak256'\nimport invariant from 'tiny-invariant'\n\nexport function normalizeChainId(chainId: string | number): number {\n  if (typeof chainId === 'string') {\n    // Temporary fix until the next version of Metamask Mobile gets released.\n    // In the current version (0.2.13), the chainId starts with “Ox” rather\n    // than “0x”. Fix: https://github.com/MetaMask/metamask-mobile/pull/1275\n    chainId = chainId.replace(/^Ox/, '0x')\n\n    const parsedChainId = Number.parseInt(chainId, chainId.trim().substring(0, 2) === '0x' ? 16 : 10)\n    invariant(!Number.isNaN(parsedChainId), `chainId ${chainId} is not an integer`)\n    return parsedChainId\n  } else {\n    invariant(Number.isInteger(chainId), `chainId ${chainId} is not an integer`)\n    return chainId\n  }\n}\n\n// https://github.com/ethers-io/ethers.js/blob/d9d438a119bb11f8516fc9cf02c534ab3816fcb3/packages/address/src.ts/index.ts\nexport function normalizeAccount(_address: string): string {\n  invariant(typeof _address === 'string' && _address.match(/^(0x)?[0-9a-fA-F]{40}$/), `Invalid address ${_address}`)\n\n  const address = _address.substring(0, 2) === '0x' ? _address : `0x${_address}`\n  const chars = address\n    .toLowerCase()\n    .substring(2)\n    .split('')\n\n  const charsArray = new Uint8Array(40)\n  for (let i = 0; i < 40; i++) {\n    charsArray[i] = chars[i].charCodeAt(0)\n  }\n  const hashed = arrayify(keccak256(charsArray))\n\n  for (let i = 0; i < 40; i += 2) {\n    if (hashed[i >> 1] >> 4 >= 8) {\n      chars[i] = chars[i].toUpperCase()\n    }\n    if ((hashed[i >> 1] & 0x0f) >= 8) {\n      chars[i + 1] = chars[i + 1].toUpperCase()\n    }\n  }\n\n  const addressChecksum = `0x${chars.join('')}`\n\n  invariant(\n    !(address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && address !== addressChecksum),\n    `Bad address checksum ${address} ${addressChecksum}`\n  )\n\n  return addressChecksum\n}\n", "import { useReducer, useEffect, useCallback, useRef } from 'react'\nimport { ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport warning from 'tiny-warning'\n\nimport { Web3ReactManagerReturn } from './types'\nimport { normalizeChainId, normalizeAccount } from './normalizers'\n\nclass StaleConnectorError extends Error {\n  constructor() {\n    super()\n    this.name = this.constructor.name\n  }\n}\n\nexport class UnsupportedChainIdError extends Error {\n  public constructor(unsupportedChainId: number, supportedChainIds?: readonly number[]) {\n    super()\n    this.name = this.constructor.name\n    this.message = `Unsupported chain id: ${unsupportedChainId}. Supported chain ids are: ${supportedChainIds}.`\n  }\n}\n\ninterface Web3ReactManagerState {\n  connector?: AbstractConnector\n  provider?: any\n  chainId?: number\n  account?: null | string\n\n  onError?: (error: Error) => void\n\n  error?: Error\n}\n\nenum ActionType {\n  ACTIVATE_CONNECTOR,\n  UPDATE,\n  UPDATE_FROM_ERROR,\n  ERROR,\n  ERROR_FROM_ACTIVATION,\n  DEACTIVATE_CONNECTOR\n}\n\ninterface Action {\n  type: ActionType\n  payload?: any\n}\n\nfunction reducer(state: Web3ReactManagerState, { type, payload }: Action): Web3ReactManagerState {\n  switch (type) {\n    case ActionType.ACTIVATE_CONNECTOR: {\n      const { connector, provider, chainId, account, onError } = payload\n      return { connector, provider, chainId, account, onError }\n    }\n    case ActionType.UPDATE: {\n      const { provider, chainId, account } = payload\n      return {\n        ...state,\n        ...(provider === undefined ? {} : { provider }),\n        ...(chainId === undefined ? {} : { chainId }),\n        ...(account === undefined ? {} : { account })\n      }\n    }\n    case ActionType.UPDATE_FROM_ERROR: {\n      const { provider, chainId, account } = payload\n      return {\n        ...state,\n        ...(provider === undefined ? {} : { provider }),\n        ...(chainId === undefined ? {} : { chainId }),\n        ...(account === undefined ? {} : { account }),\n        error: undefined\n      }\n    }\n    case ActionType.ERROR: {\n      const { error } = payload\n      const { connector, onError } = state\n      return {\n        connector,\n        error,\n        onError\n      }\n    }\n    case ActionType.ERROR_FROM_ACTIVATION: {\n      const { connector, error } = payload\n      return {\n        connector,\n        error\n      }\n    }\n    case ActionType.DEACTIVATE_CONNECTOR: {\n      return {}\n    }\n  }\n}\n\nasync function augmentConnectorUpdate(\n  connector: AbstractConnector,\n  update: ConnectorUpdate\n): Promise<ConnectorUpdate<number>> {\n  const provider = update.provider === undefined ? await connector.getProvider() : update.provider\n  const [_chainId, _account] = (await Promise.all([\n    update.chainId === undefined ? connector.getChainId() : update.chainId,\n    update.account === undefined ? connector.getAccount() : update.account\n  ])) as [Required<ConnectorUpdate>['chainId'], Required<ConnectorUpdate>['account']]\n\n  const chainId = normalizeChainId(_chainId)\n  if (!!connector.supportedChainIds && !connector.supportedChainIds.includes(chainId)) {\n    throw new UnsupportedChainIdError(chainId, connector.supportedChainIds)\n  }\n  const account = _account === null ? _account : normalizeAccount(_account)\n\n  return { provider, chainId, account }\n}\n\nexport function useWeb3ReactManager(): Web3ReactManagerReturn {\n  const [state, dispatch] = useReducer(reducer, {})\n  const { connector, provider, chainId, account, onError, error } = state\n\n  const updateBusterRef = useRef(-1)\n  updateBusterRef.current += 1\n\n  const activate = useCallback(\n    async (\n      connector: AbstractConnector,\n      onError?: (error: Error) => void,\n      throwErrors: boolean = false\n    ): Promise<void> => {\n      const updateBusterInitial = updateBusterRef.current\n\n      let activated = false\n      try {\n        const update = await connector.activate().then(\n          (update): ConnectorUpdate => {\n            activated = true\n            return update\n          }\n        )\n\n        const augmentedUpdate = await augmentConnectorUpdate(connector, update)\n\n        if (updateBusterRef.current > updateBusterInitial) {\n          throw new StaleConnectorError()\n        }\n        dispatch({ type: ActionType.ACTIVATE_CONNECTOR, payload: { connector, ...augmentedUpdate, onError } })\n      } catch (error) {\n        if (error instanceof StaleConnectorError) {\n          activated && connector.deactivate()\n          warning(false, `Suppressed stale connector activation ${connector}`)\n        } else if (throwErrors) {\n          activated && connector.deactivate()\n          throw error\n        } else if (onError) {\n          activated && connector.deactivate()\n          onError(error)\n        } else {\n          // we don't call activated && connector.deactivate() here because it'll be handled in the useEffect\n          dispatch({ type: ActionType.ERROR_FROM_ACTIVATION, payload: { connector, error } })\n        }\n      }\n    },\n    []\n  )\n\n  const setError = useCallback((error: Error): void => {\n    dispatch({ type: ActionType.ERROR, payload: { error } })\n  }, [])\n\n  const deactivate = useCallback((): void => {\n    dispatch({ type: ActionType.DEACTIVATE_CONNECTOR })\n  }, [])\n\n  const handleUpdate = useCallback(\n    async (update: ConnectorUpdate): Promise<void> => {\n      if (!connector) {\n        throw Error(\"This should never happen, it's just so Typescript stops complaining\")\n      }\n\n      const updateBusterInitial = updateBusterRef.current\n\n      // updates are handled differently depending on whether the connector is active vs in an error state\n      if (!error) {\n        const chainId = update.chainId === undefined ? undefined : normalizeChainId(update.chainId)\n        if (chainId !== undefined && !!connector.supportedChainIds && !connector.supportedChainIds.includes(chainId)) {\n          const error = new UnsupportedChainIdError(chainId, connector.supportedChainIds)\n          onError ? onError(error) : dispatch({ type: ActionType.ERROR, payload: { error } })\n        } else {\n          const account = typeof update.account === 'string' ? normalizeAccount(update.account) : update.account\n          dispatch({ type: ActionType.UPDATE, payload: { provider: update.provider, chainId, account } })\n        }\n      } else {\n        try {\n          const augmentedUpdate = await augmentConnectorUpdate(connector, update)\n\n          if (updateBusterRef.current > updateBusterInitial) {\n            throw new StaleConnectorError()\n          }\n          dispatch({ type: ActionType.UPDATE_FROM_ERROR, payload: augmentedUpdate })\n        } catch (error) {\n          if (error instanceof StaleConnectorError) {\n            warning(false, `Suppressed stale connector update from error state ${connector} ${update}`)\n          } else {\n            // though we don't have to, we're re-circulating the new error\n            onError ? onError(error) : dispatch({ type: ActionType.ERROR, payload: { error } })\n          }\n        }\n      }\n    },\n    [connector, error, onError]\n  )\n  const handleError = useCallback(\n    (error: Error): void => {\n      onError ? onError(error) : dispatch({ type: ActionType.ERROR, payload: { error } })\n    },\n    [onError]\n  )\n  const handleDeactivate = useCallback((): void => {\n    dispatch({ type: ActionType.DEACTIVATE_CONNECTOR })\n  }, [])\n\n  // ensure that connectors which were set are deactivated\n  useEffect((): (() => void) => {\n    return () => {\n      if (connector) {\n        connector.deactivate()\n      }\n    }\n  }, [connector])\n\n  // ensure that events emitted from the set connector are handled appropriately\n  useEffect((): (() => void) => {\n    if (connector) {\n      connector\n        .on(ConnectorEvent.Update, handleUpdate)\n        .on(ConnectorEvent.Error, handleError)\n        .on(ConnectorEvent.Deactivate, handleDeactivate)\n    }\n\n    return () => {\n      if (connector) {\n        connector\n          .off(ConnectorEvent.Update, handleUpdate)\n          .off(ConnectorEvent.Error, handleError)\n          .off(ConnectorEvent.Deactivate, handleDeactivate)\n      }\n    }\n  }, [connector, handleUpdate, handleError, handleDeactivate])\n\n  return { connector, provider, chainId, account, activate, setError, deactivate, error }\n}\n", "import React, { createContext, useContext, useMemo } from 'react'\nimport invariant from 'tiny-invariant'\n\nimport { Web3ReactContextInterface } from './types'\nimport { useWeb3ReactManager } from './manager'\n\nexport const PRIMARY_KEY = 'primary'\nconst CONTEXTS: { [key: string]: React.Context<Web3ReactContextInterface> } = {}\n\ninterface Web3ReactProviderArguments {\n  getLibrary: (provider?: any, connector?: Required<Web3ReactContextInterface>['connector']) => any\n  children: any\n}\n\nexport function createWeb3ReactRoot(key: string): (args: Web3ReactProviderArguments) => JSX.Element {\n  invariant(!CONTEXTS[key], `A root already exists for provided key ${key}`)\n\n  CONTEXTS[key] = createContext<Web3ReactContextInterface>({\n    activate: async () => {\n      invariant(false, 'No <Web3ReactProvider ... /> found.')\n    },\n    setError: () => {\n      invariant(false, 'No <Web3ReactProvider ... /> found.')\n    },\n    deactivate: () => {\n      invariant(false, 'No <Web3ReactProvider ... /> found.')\n    },\n    active: false\n  })\n  CONTEXTS[key].displayName = `Web3ReactContext - ${key}`\n\n  const Provider = CONTEXTS[key].Provider\n\n  return function Web3ReactProvider({ getLibrary, children }: Web3ReactProviderArguments): JSX.Element {\n    const {\n      connector,\n      provider,\n      chainId,\n      account,\n\n      activate,\n      setError,\n      deactivate,\n\n      error\n    } = useWeb3ReactManager()\n\n    const active = connector !== undefined && chainId !== undefined && account !== undefined && !!!error\n    const library = useMemo(\n      () =>\n        active && chainId !== undefined && Number.isInteger(chainId) && !!connector\n          ? getLibrary(provider, connector)\n          : undefined,\n      [active, getLibrary, provider, connector, chainId]\n    )\n\n    const web3ReactContext: Web3ReactContextInterface = {\n      connector,\n      library,\n      chainId,\n      account,\n\n      activate,\n      setError,\n      deactivate,\n\n      active,\n      error\n    }\n\n    return <Provider value={web3ReactContext}>{children}</Provider>\n  }\n}\n\nexport const Web3ReactProvider = createWeb3ReactRoot(PRIMARY_KEY)\n\nexport function getWeb3ReactContext<T = any>(key: string = PRIMARY_KEY): React.Context<Web3ReactContextInterface<T>> {\n  invariant(Object.keys(CONTEXTS).includes(key), `Invalid key ${key}`)\n  return CONTEXTS[key]\n}\n\nexport function useWeb3React<T = any>(key?: string): Web3ReactContextInterface<T> {\n  return useContext(getWeb3ReactContext(key))\n}\n"],
  "mappings": "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",
  "names": ["_iteratorSymbol", "Symbol", "iterator", "_asyncIteratorSymbol", "asyncIterator", "_catch", "body", "recover", "result", "e", "then", "normalizeChainId", "chainId", "replace", "parsedChainId", "Number", "parseInt", "trim", "substring", "isNaN", "invariant", "isInteger", "normalizeAccount", "_address", "match", "address", "chars", "toLowerCase", "split", "charsArray", "Uint8Array", "i", "charCodeAt", "hashed", "arrayify", "keccak256", "toUpperCase", "addressChecksum", "join", "augmentConnectorUpdate", "connector", "update", "provider", "Promise", "all", "undefined", "getChainId", "account", "getAccount", "_chainId", "_account", "supportedChainIds", "includes", "UnsupportedChainIdError", "getProvider", "StaleConnectorError", "name", "constructor", "Error", "unsupportedChainId", "message", "ActionType", "reducer", "state", "type", "payload", "ACTIVATE_CONNECTOR", "onError", "UPDATE", "UPDATE_FROM_ERROR", "error", "ERROR", "ERROR_FROM_ACTIVATION", "DEACTIVATE_CONNECTOR", "useWeb3ReactManager", "useReducer", "dispatch", "updateBusterRef", "useRef", "current", "activate", "useCallback", "throwErrors", "updateBusterInitial", "activated", "augmentedUpdate", "deactivate", "warning", "setError", "handleUpdate", "handleError", "handleDeactivate", "useEffect", "on", "ConnectorEvent", "Update", "Deactivate", "off", "PRIMARY_KEY", "CONTEXTS", "createWeb3ReactRoot", "key", "createContext", "active", "displayName", "Provider", "Web3ReactProvider", "getLibrary", "children", "library", "useMemo", "web3ReactContext", "React", "value", "getWeb3ReactContext", "Object", "keys", "useWeb3React", "useContext"]
}
