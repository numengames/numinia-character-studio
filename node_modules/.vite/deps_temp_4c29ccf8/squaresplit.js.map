{
  "version": 3,
  "sources": ["../../squaresplit/index.js"],
  "sourcesContent": ["export default function squaresplit(numBoxes, size = 10) {\r\n    if (numBoxes <= 0) {\r\n        return [];\r\n    }\r\n    const count = numBoxes\r\n    const squares = [{ w: size, h: size, x: 0, y: 0 }];\r\n\r\n    function recursiveCut(size, count, x, y) {\r\n      if (count <= 0) {\r\n        return;\r\n      }\r\n    \r\n      // Square - cut into 4 equal squares\r\n      const newSize = size.w / 2;\r\n      const newSquares = [\r\n        { w: newSize, h: newSize, x: x, y: y },\r\n        { w: newSize, h: newSize, x: x + newSize, y: y },\r\n        { w: newSize, h: newSize, x: x, y: y + newSize },\r\n        { w: newSize, h: newSize, x: x + newSize, y: y + newSize }\r\n      ];\r\n      squares.push(...newSquares);\r\n      const oldSquare = squares.find((square)=>square.x === x && square.y === y && square.w === size.w && square.h === size.h)\r\n      squares.splice(squares.indexOf(oldSquare), 1)\r\n\r\n      if(numBoxes <=squares.length){\r\n        return;\r\n      }\r\n\r\n      // Next square to cut should be the next biggest square\r\n      const biggestSquareWidth = Math.max(...squares.map((square)=>square.w)); \r\n      const nextSquareToCut = squares.find((square)=>square.w === biggestSquareWidth)\r\n\r\n      const nextX = nextSquareToCut.x;\r\n      const nextY = nextSquareToCut.y;\r\n\r\n      recursiveCut({ w: nextSquareToCut.w, h: nextSquareToCut.h }, count - 1, nextX, nextY);\r\n    }\r\n\r\n    if(numBoxes == 1){\r\n      return {squares,fill:1};\r\n    }\r\n\r\n    recursiveCut({ w: size, h: size }, count, 0, 0);\r\n\r\n    // sort squares by size, biggest first\r\n    squares.sort((a, b) => b.w - a.w);\r\n\r\n    // remove smallest squares until we have the right amount\r\n    while (squares.length > numBoxes) {\r\n        squares.pop();\r\n    }\r\n\r\n    const fill = squares.reduce((acc, square) => acc + square.w * square.h, 0) / (size * size);\r\n\r\n    return {\r\n        squares,\r\n        fill\r\n    };\r\n}\r\n"],
  "mappings": ";;;AAAe,SAAR,YAA6B,UAAU,OAAO,IAAI;AACrD,MAAI,YAAY,GAAG;AACf,WAAO,CAAC;AAAA,EACZ;AACA,QAAM,QAAQ;AACd,QAAM,UAAU,CAAC,EAAE,GAAG,MAAM,GAAG,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC;AAEjD,WAAS,aAAaA,OAAMC,QAAO,GAAG,GAAG;AACvC,QAAIA,UAAS,GAAG;AACd;AAAA,IACF;AAGA,UAAM,UAAUD,MAAK,IAAI;AACzB,UAAM,aAAa;AAAA,MACjB,EAAE,GAAG,SAAS,GAAG,SAAS,GAAM,EAAK;AAAA,MACrC,EAAE,GAAG,SAAS,GAAG,SAAS,GAAG,IAAI,SAAS,EAAK;AAAA,MAC/C,EAAE,GAAG,SAAS,GAAG,SAAS,GAAM,GAAG,IAAI,QAAQ;AAAA,MAC/C,EAAE,GAAG,SAAS,GAAG,SAAS,GAAG,IAAI,SAAS,GAAG,IAAI,QAAQ;AAAA,IAC3D;AACA,YAAQ,KAAK,GAAG,UAAU;AAC1B,UAAM,YAAY,QAAQ,KAAK,CAAC,WAAS,OAAO,MAAM,KAAK,OAAO,MAAM,KAAK,OAAO,MAAMA,MAAK,KAAK,OAAO,MAAMA,MAAK,CAAC;AACvH,YAAQ,OAAO,QAAQ,QAAQ,SAAS,GAAG,CAAC;AAE5C,QAAG,YAAW,QAAQ,QAAO;AAC3B;AAAA,IACF;AAGA,UAAM,qBAAqB,KAAK,IAAI,GAAG,QAAQ,IAAI,CAAC,WAAS,OAAO,CAAC,CAAC;AACtE,UAAM,kBAAkB,QAAQ,KAAK,CAAC,WAAS,OAAO,MAAM,kBAAkB;AAE9E,UAAM,QAAQ,gBAAgB;AAC9B,UAAM,QAAQ,gBAAgB;AAE9B,iBAAa,EAAE,GAAG,gBAAgB,GAAG,GAAG,gBAAgB,EAAE,GAAGC,SAAQ,GAAG,OAAO,KAAK;AAAA,EACtF;AAEA,MAAG,YAAY,GAAE;AACf,WAAO,EAAC,SAAQ,MAAK,EAAC;AAAA,EACxB;AAEA,eAAa,EAAE,GAAG,MAAM,GAAG,KAAK,GAAG,OAAO,GAAG,CAAC;AAG9C,UAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,IAAI,EAAE,CAAC;AAGhC,SAAO,QAAQ,SAAS,UAAU;AAC9B,YAAQ,IAAI;AAAA,EAChB;AAEA,QAAM,OAAO,QAAQ,OAAO,CAAC,KAAK,WAAW,MAAM,OAAO,IAAI,OAAO,GAAG,CAAC,KAAK,OAAO;AAErF,SAAO;AAAA,IACH;AAAA,IACA;AAAA,EACJ;AACJ;",
  "names": ["size", "count"]
}
