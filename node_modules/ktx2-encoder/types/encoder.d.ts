import { IBasisEncoder, SourceType } from "./IBasisEncoder";
export interface IEncodeOptions {
    /**
     *  enable debug output, default is false
     */
    enableDebug: boolean;
    /**
     * is UASTC texture, default is true
     */
    isUASTC: boolean;
    /**
     * if true the source images will be Y flipped before compression, default is false
     */
    isYFlip: boolean;
    /**
     * Sets the ETC1S encoder's quality level, which controls the file size vs. quality tradeoff.
     */
    qualityLevel: number;
    /**
     * The compression_level parameter controls the encoder perf vs. file size tradeoff for ETC1S files.
     */
    compressionLevel: number;
    /**
     * Use UASTC Zstandard supercompression. Defaults to disabled or KTX2_SS_NONE
     */
    needSupercompression: boolean;
    /**
     * setNormalMapMode is the same as the basisu.exe "-normal_map" option. It tunes several codec parameters so compression works better on normal maps.
     */
    isNormalMap: boolean;
    /**
     * Input source is sRGB. This should very probably match the "perceptual" setting.
     */
    isSetKTX2SRGBTransferFunc: boolean;
    /**
     * If true mipmaps will be generated from the source images
     */
    generateMipmap: boolean;
    /**
     * Create .KTX2 files instead of .basis files. By default this is FALSE.
     */
    isKTX2File: boolean;
    /** kv data */
    kvData: Record<string, string | Uint8Array>;
    /** type */
    type: SourceType;
}
export declare const DefaultOptions: {
    enableDebug: boolean;
    isUASTC: boolean;
    isKTX2File: boolean;
    isInputSRGB: boolean;
    generateMipmap: boolean;
    needSupercompression: boolean;
    isSetKTX2SRGBTransferFunc: boolean;
};
export declare function decodeImageData(imageBitmapSource: ImageBitmapSource): Promise<ImageData>;
export declare function encodeImageToKTX2(buffer: ArrayBuffer, options?: Partial<IEncodeOptions>): Promise<Uint8Array>;
export declare function encodeToKTX2(imageBitmapSource: ImageBitmapSource | ArrayBuffer, options?: Partial<IEncodeOptions>): Promise<Uint8Array>;
export declare function encodeKTX2Cube(pngBuffers: Array<ArrayBuffer>, options?: Partial<IEncodeOptions>, keepEncoder?: boolean): Promise<Uint8Array>;
export declare function destroyEncoder(): void;
export declare function applyInputOptions(options: Partial<IEncodeOptions> | undefined, encoder: IBasisEncoder): void;
