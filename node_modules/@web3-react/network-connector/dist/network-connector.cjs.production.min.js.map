{"version":3,"file":"network-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\n// taken from ethers.js, compatible interface with web3 provider\ntype AsyncSendable = {\n  isMetaMask?: boolean\n  host?: string\n  path?: string\n  sendAsync?: (request: any, callback: (error: any, response: any) => void) => void\n  send?: (request: any, callback: (error: any, response: any) => void) => void\n}\n\nexport class RequestError extends Error {\n  constructor(message: string, public code: number, public data?: unknown) {\n    super()\n    this.name = this.constructor.name\n    this.message = message\n  }\n}\n\nclass MiniRpcProvider implements AsyncSendable {\n  public readonly isMetaMask: false = false\n  public readonly chainId: number\n  public readonly url: string\n  public readonly host: string\n  public readonly path: string\n\n  constructor(chainId: number, url: string) {\n    this.chainId = chainId\n    this.url = url\n    const parsed = new URL(url)\n    this.host = parsed.host\n    this.path = parsed.pathname\n  }\n\n  public readonly sendAsync = (\n    request: { jsonrpc: '2.0'; id: number | string | null; method: string; params?: unknown[] | object },\n    callback: (error: any, response: any) => void\n  ): void => {\n    console.log('sendAsync', request.method, request.params)\n    this.request(request.method, request.params)\n      .then(result => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n      .catch(error => callback(error, null))\n  }\n\n  public readonly request = async (\n    method: string | { method: string; params?: unknown[] | object },\n    params?: unknown[] | object\n  ): Promise<unknown> => {\n    if (typeof method !== 'string') {\n      params = (method as any).params\n      method = method.method\n    }\n\n    const response = await fetch(this.url, {\n      method: 'POST',\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        id: 1,\n        method,\n        params\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    if (!response.ok) throw new RequestError(`${response.status}: ${response.statusText}`, -32000)\n    const body = await response.json()\n    if ('error' in body) {\n      throw new RequestError(body?.error?.message, body?.error?.code, body?.error?.data)\n    } else if ('result' in body) {\n      return body.result\n    } else {\n      throw new RequestError(`Received unexpected JSON-RPC response to ${method} request.`, -32000, body)\n    }\n  }\n}\n\ninterface NetworkConnectorArguments {\n  urls: { [chainId: number]: string }\n  defaultChainId?: number\n}\n\nexport class NetworkConnector extends AbstractConnector {\n  private readonly providers: { [chainId: number]: MiniRpcProvider }\n  private currentChainId: number\n\n  constructor({ urls, defaultChainId }: NetworkConnectorArguments) {\n    invariant(defaultChainId || Object.keys(urls).length === 1, 'defaultChainId is a required argument with >1 url')\n    super({ supportedChainIds: Object.keys(urls).map((k): number => Number(k)) })\n\n    this.currentChainId = defaultChainId || Number(Object.keys(urls)[0])\n    this.providers = Object.keys(urls).reduce<{ [chainId: number]: MiniRpcProvider }>((accumulator, chainId) => {\n      accumulator[Number(chainId)] = new MiniRpcProvider(Number(chainId), urls[Number(chainId)])\n      return accumulator\n    }, {})\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    return { provider: this.providers[this.currentChainId], chainId: this.currentChainId, account: null }\n  }\n\n  public async getProvider(): Promise<MiniRpcProvider> {\n    return this.providers[this.currentChainId]\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.currentChainId\n  }\n\n  public async getAccount(): Promise<null> {\n    return null\n  }\n\n  public deactivate() {\n    return\n  }\n\n  public changeChainId(chainId: number) {\n    invariant(Object.keys(this.providers).includes(chainId.toString()), `No url found for chainId ${chainId}`)\n    this.currentChainId = chainId\n    this.emitUpdate({ provider: this.providers[this.currentChainId], chainId })\n  }\n}\n"],"names":["RequestError","message","code","data","name","_this","constructor","Error","MiniRpcProvider","chainId","url","this","request","callback","console","log","method","params","_this2","then","result","jsonrpc","id","error","fetch","_this3","body","JSON","stringify","headers","response","ok","status","statusText","json","_body$error","_body$error2","_body$error3","parsed","URL","host","path","pathname","urls","defaultChainId","Object","keys","length","invariant","supportedChainIds","map","k","Number","currentChainId","providers","reduce","accumulator","activate","provider","account","getProvider","getChainId","getAccount","deactivate","changeChainId","includes","toString","emitUpdate","AbstractConnector"],"mappings":"k2CAaaA,yBACCC,EAAwBC,EAAqBC,2CAArBD,SAAqBC,IAElDC,KAAOC,EAAKC,YAAYF,OACxBH,QAAUA,uBAJeM,QAQ5BC,EAOJ,SAAYC,EAAiBC,SA2BEC,6BAjCK,iBAcR,SAC1BC,EACAC,GAEAC,QAAQC,IAAI,YAAaH,EAAQI,OAAQJ,EAAQK,QACjDC,EAAKN,QAAQA,EAAQI,OAAQJ,EAAQK,QAClCE,MAAK,SAAAC,UAAUP,EAAS,KAAM,CAAEQ,QAAS,MAAOC,GAAIV,EAAQU,GAAIF,OAAAA,cAC1D,SAAAG,UAASV,EAASU,EAAO,gCAIlCP,EACAC,aAEsB,iBAAXD,IACTC,EAAUD,EAAeC,OACzBD,EAASA,EAAOA,wBAGKQ,MAAMC,EAAKf,IAAK,CACrCM,OAAQ,OACRU,KAAMC,KAAKC,UAAU,CACnBP,QAAS,MACTC,GAAI,EACJN,OAAAA,EACAC,OAAAA,IAEFY,QAAS,gBACS,sCATdC,OAYDA,EAASC,GAAI,MAAM,IAAI/B,EAAgB8B,EAASE,YAAWF,EAASG,YAAe,6BACrEH,EAASI,uBAAtBR,gBACF,UAAWA,QACP,IAAI1B,QAAa0B,YAAAA,EAAMH,cAANY,EAAalC,cAASyB,YAAAA,EAAMH,cAANa,EAAalC,WAAMwB,YAAAA,EAAMH,cAANc,EAAalC,MACxE,GAAI,WAAYuB,SACdA,EAAKN,aAEN,IAAIpB,8CAAyDgB,eAAoB,KAAOU,kDA7C3FjB,QAAUA,OACVC,IAAMA,MACL4B,EAAS,IAAIC,IAAI7B,QAClB8B,KAAOF,EAAOE,UACdC,KAAOH,EAAOI,mEAuDPC,IAAAA,KAAMC,IAAAA,sBACRA,GAA+C,IAA7BC,OAAOC,KAAKH,GAAMI,QAA9CC,qBACM,CAAEC,kBAAmBJ,OAAOC,KAAKH,GAAMO,KAAI,SAACC,UAAcC,OAAOD,eAElEE,eAAiBT,GAAkBQ,OAAOP,OAAOC,KAAKH,GAAM,MAC5DW,UAAYT,OAAOC,KAAKH,GAAMY,QAA+C,SAACC,EAAa/C,UAC9F+C,EAAYJ,OAAO3C,IAAY,IAAID,EAAgB4C,OAAO3C,GAAUkC,EAAKS,OAAO3C,KACzE+C,IACN,wCAGQC,+CACJ,CAAEC,SAAU/C,KAAK2C,UAAL3C,KAAoB0C,gBAAiB5C,QAArCE,KAAmD0C,eAAgBM,QAAS,6CAGpFC,kDACJjD,KAAK2C,UAAL3C,KAAoB0C,uDAGhBQ,iDACJlD,KAAK0C,sDAGDS,6CACJ,SAGFC,WAAA,eAIAC,cAAA,SAAcvD,GACToC,OAAOC,KAAKnC,KAAK2C,WAAWW,SAASxD,EAAQyD,aAAvDlB,WACKK,eAAiB5C,OACjB0D,WAAW,CAAET,SAAU/C,KAAK2C,UAAU3C,KAAK0C,gBAAiB5C,QAAAA,QAtC/B2D"}